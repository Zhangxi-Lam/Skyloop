//
// File generated by /home/hpc/cWB/root-v5-32/bin/rootcint at Tue Dec  9 10:40:49 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME wave_dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "wave_dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::slice slice;
      #else
      class slice  {
         public:
         //friend XX;
         unsigned long _M_off; //offset
         unsigned long _M_sz; //size
         unsigned long _M_st; //stride unit
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::pixdata pixdata;
      #else
      class pixdata  {
         public:
         //friend XX;
         double noiserms; //average noise rms
         double wave; //vector of 00 pixel's wavelet amplitudes
         double w_90; //vector of 90 pixel's wavelet amplitudes
         double asnr; //vector of 00 pixel's whitened amplitudes
         double a_90; //vector of 90 pixel's whitened amplitudes
         float rank; //vector of pixel's rank amplitudes
         int index; //index in wavearray
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::wavearray< float > wavearraylEfloatgR;
      #else
      class wavearraylEfloatgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~wavearraylEfloatgR() throw() {};
         float* data; //! data array
         unsigned long Size; //number of elements in the data array
         double Rate; //data sampling rate
         double Start; //start time
         double Stop; //end time
         double Edge; //buffer length in seconds in the beginning and the end 
         ::slice Slice; //the data slice structure
         ::TFFTRealComplex* fftw; //! pointer to direct  fftw object
         ::TFFTComplexReal* ifftw; //! pointer to inverse fftw object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::wavearray< double > wavearraylEdoublegR;
      #else
      class wavearraylEdoublegR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~wavearraylEdoublegR() throw() {};
         double* data; //! data array
         unsigned long Size; //number of elements in the data array
         double Rate; //data sampling rate
         double Start; //start time
         double Stop; //end time
         double Edge; //buffer length in seconds in the beginning and the end 
         ::slice Slice; //the data slice structure
         ::TFFTRealComplex* fftw; //! pointer to direct  fftw object
         ::TFFTComplexReal* ifftw; //! pointer to inverse fftw object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::WSeries< double > WSerieslEdoublegR;
      #else
      class WSerieslEdoublegR  :  public ::wavearray< double > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~WSerieslEdoublegR() throw() {};
         ::WaveDWT< double >* pWavelet; //
         unsigned long w_mode; //
         double bpp; //
         double wRate; //
         double f_low; //
         double f_high; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::WSeries< float > WSerieslEfloatgR;
      #else
      class WSerieslEfloatgR  :  public ::wavearray< float > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~WSerieslEfloatgR() throw() {};
         ::WaveDWT< float >* pWavelet; //
         unsigned long w_mode; //
         double bpp; //
         double wRate; //
         double f_low; //
         double f_high; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::WaveDWT< float > WaveDWTlEfloatgR;
      #else
      class WaveDWTlEfloatgR  :  public ::Wavelet {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~WaveDWTlEfloatgR() throw() {};
         float* pWWS; //! pointer to wavelet work space      
         unsigned long nWWS; //size of the wavelet work space
         unsigned long nSTS; //size of the original time series
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SSeries< double > SSerieslEdoublegR;
      #else
      class SSerieslEdoublegR  :  public ::WSeries< double > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SSerieslEdoublegR() throw() {};
         ::TBits core; //core pixel array 1/0 : core/not-core
         ::wavearray< int > sparseLookup; //store the index pointer to the layers 
         ::TBits sparseType; //store pixel type 1/0  core/halo 
         ::wavearray< int > sparseIndex; //store pixel index
         ::wavearray< float > sparseMap00; //store pixel 00 amp
         ::wavearray< float > sparseMap90; //store pixel 90 amp;
         int layerHalo; //number of sparse layers associated to a pixel [+/- layerHalo]
         int time_Halo; //typically half length of time-delay filter
         int extraHalo; //number of extra sparse slices associated to a pixel [+/- (time_Halo+extraHalo)]
         double net_Delay; //delay time (sec) used to compute extraHalo = net_Delay*this->wrate()
         int wdm_BetaOrder; //
         int wdm_m_Layer; //
         int wdm_KWDM; //
         int wdm_precision; //
         int wdm_rate; //
         int wdm_start; //
         int wdm_nSTS; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::WaveDWT< double > WaveDWTlEdoublegR;
      #else
      class WaveDWTlEdoublegR  :  public ::Wavelet {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~WaveDWTlEdoublegR() throw() {};
         double* pWWS; //! pointer to wavelet work space      
         unsigned long nWWS; //size of the wavelet work space
         unsigned long nSTS; //size of the original time series
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::wavearray< short > wavearraylEshortgR;
      #else
      class wavearraylEshortgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~wavearraylEshortgR() throw() {};
         short* data; //! data array
         unsigned long Size; //number of elements in the data array
         double Rate; //data sampling rate
         double Start; //start time
         double Stop; //end time
         double Edge; //buffer length in seconds in the beginning and the end 
         ::slice Slice; //the data slice structure
         ::TFFTRealComplex* fftw; //! pointer to direct  fftw object
         ::TFFTComplexReal* ifftw; //! pointer to inverse fftw object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::wavearray< int > wavearraylEintgR;
      #else
      class wavearraylEintgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~wavearraylEintgR() throw() {};
         int* data; //! data array
         unsigned long Size; //number of elements in the data array
         double Rate; //data sampling rate
         double Start; //start time
         double Stop; //end time
         double Edge; //buffer length in seconds in the beginning and the end 
         ::slice Slice; //the data slice structure
         ::TFFTRealComplex* fftw; //! pointer to direct  fftw object
         ::TFFTComplexReal* ifftw; //! pointer to inverse fftw object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmArraySSE< float > SymmArraySSElEfloatgR;
      #else
      class SymmArraySSElEfloatgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmArraySSElEfloatgR() throw() {};
         int last; //
         int SizeSSE; //SizeSSE in bytes (multiple of 8)
         float* rec; //!
         float* zero; //! always in the middle of the allocated space
         int recSize; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::delayFilter delayFilter;
      #else
      class delayFilter  {
         public:
         //friend XX;
         vector< short > index; //relative wavelet array index
         vector< float > value; //amplitude
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::detectorParams detectorParams;
      #else
      class detectorParams  {
         public:
         //friend XX;
         char name[32]; //
         double latitude; //
         double longitude; //
         double elevation; //
         double AltX; //elevation of the x arm
         double AzX; //azimut of the x arm  (angle-deg from nord)
         double AltY; //elevation of the y arm
         double AzY; //azimut of the y arm (angle-deg from nord)
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::WDM< double > WDMlEdoublegR;
      #else
      class WDMlEdoublegR  :  public ::WaveDWT< double > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~WDMlEdoublegR() throw() {};
         int BetaOrder; //beta function order for Meyer 
         int precision; //wavelet precision
         int KWDM; //K - parameter
         int LWDM; //unit time delay is tau/LWDM where tau is 1/hot_rate 
         ::wavearray< double > wdmFilter; //WDM filter
         ::SymmObjArray< ::SymmArraySSE< float >  > T0; //time-delay filters
         ::SymmObjArray< ::SymmArraySSE< float >  > Tx; //time-delay filters
         ::wavearray< float > sinTD; //
         ::wavearray< float > cosTD; //
         ::wavearray< float > sinTDx; //
         double** TFMap00; //! pointer to 0-phase data, by default not initialized
         double** TFMap90; //! pointer to 90-phase data, by default not initialized
          void (*SSE_TDF)(); //
         float* td_buffer; //!
         float* td_data; //!
         ::SymmArraySSE< float > td_halo[6]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmArray< double > SymmArraylEdoublegR;
      #else
      class SymmArraylEdoublegR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmArraylEdoublegR() throw() {};
         int Size; //
         double* rec; //!
         double* zero; //!
         int recSize; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmObjArray< ::SymmArraySSE< float >  > SymmObjArraylESymmArraySSElEfloatgRsPgR;
      #else
      class SymmObjArraylESymmArraySSElEfloatgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmObjArraylESymmArraySSElEfloatgRsPgR() throw() {};
         int Size; //
         ::SymmArraySSE< float >* rec; //!
         ::SymmArraySSE< float >* zero; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::waveSegment waveSegment;
      #else
      class waveSegment  {
         public:
         //friend XX;
         int index; //
         double start; //
         double stop; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::wavearray< unsigned int > wavearraylEunsignedsPintgR;
      #else
      class wavearraylEunsignedsPintgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~wavearraylEunsignedsPintgR() throw() {};
         unsigned int* data; //! data array
         unsigned long Size; //number of elements in the data array
         double Rate; //data sampling rate
         double Start; //start time
         double Stop; //end time
         double Edge; //buffer length in seconds in the beginning and the end 
         ::slice Slice; //the data slice structure
         ::TFFTRealComplex* fftw; //! pointer to direct  fftw object
         ::TFFTComplexReal* ifftw; //! pointer to inverse fftw object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::wavearray< long long > wavearraylElongsPlonggR;
      #else
      class wavearraylElongsPlonggR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~wavearraylElongsPlonggR() throw() {};
         G__int64* data; //! data array
         unsigned long Size; //number of elements in the data array
         double Rate; //data sampling rate
         double Start; //start time
         double Stop; //end time
         double Edge; //buffer length in seconds in the beginning and the end 
         ::slice Slice; //the data slice structure
         ::TFFTRealComplex* fftw; //! pointer to direct  fftw object
         ::TFFTComplexReal* ifftw; //! pointer to inverse fftw object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::wavearray< long > wavearraylElonggR;
      #else
      class wavearraylElonggR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~wavearraylElonggR() throw() {};
         long* data; //! data array
         unsigned long Size; //number of elements in the data array
         double Rate; //data sampling rate
         double Start; //start time
         double Stop; //end time
         double Edge; //buffer length in seconds in the beginning and the end 
         ::slice Slice; //the data slice structure
         ::TFFTRealComplex* fftw; //! pointer to direct  fftw object
         ::TFFTComplexReal* ifftw; //! pointer to inverse fftw object
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Haar< float > HaarlEfloatgR;
      #else
      class HaarlEfloatgR  :  public ::WaveDWT< float > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HaarlEfloatgR() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Haar< double > HaarlEdoublegR;
      #else
      class HaarlEdoublegR  :  public ::WaveDWT< double > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~HaarlEdoublegR() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Biorthogonal< float > BiorthogonallEfloatgR;
      #else
      class BiorthogonallEfloatgR  :  public ::WaveDWT< float > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~BiorthogonallEfloatgR() throw() {};
         double* PForward; //!
         double* PInverse; //!
         double* UForward; //!
         double* UInverse; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Biorthogonal< double > BiorthogonallEdoublegR;
      #else
      class BiorthogonallEdoublegR  :  public ::WaveDWT< double > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~BiorthogonallEdoublegR() throw() {};
         double* PForward; //!
         double* PInverse; //!
         double* UForward; //!
         double* UInverse; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Daubechies< float > DaubechieslEfloatgR;
      #else
      class DaubechieslEfloatgR  :  public ::WaveDWT< float > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~DaubechieslEfloatgR() throw() {};
         double* pLForward; //!
         double* pLInverse; //!
         double* pHForward; //!
         double* pHInverse; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Daubechies< double > DaubechieslEdoublegR;
      #else
      class DaubechieslEdoublegR  :  public ::WaveDWT< double > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~DaubechieslEdoublegR() throw() {};
         double* pLForward; //!
         double* pLInverse; //!
         double* pHForward; //!
         double* pHInverse; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Symlet< float > SymletlEfloatgR;
      #else
      class SymletlEfloatgR  :  public ::WaveDWT< float > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymletlEfloatgR() throw() {};
         double* pLForward; //!
         double* pLInverse; //!
         double* pHForward; //!
         double* pHInverse; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Symlet< double > SymletlEdoublegR;
      #else
      class SymletlEdoublegR  :  public ::WaveDWT< double > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymletlEdoublegR() throw() {};
         double* pLForward; //!
         double* pLInverse; //!
         double* pHForward; //!
         double* pHInverse; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Meyer< float > MeyerlEfloatgR;
      #else
      class MeyerlEfloatgR  :  public ::WaveDWT< float > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~MeyerlEfloatgR() throw() {};
         double* pLForward; //!
         double* pLInverse; //!
         double* pHForward; //!
         double* pHInverse; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Meyer< double > MeyerlEdoublegR;
      #else
      class MeyerlEdoublegR  :  public ::WaveDWT< double > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~MeyerlEdoublegR() throw() {};
         double* pLForward; //!
         double* pLInverse; //!
         double* pHForward; //!
         double* pHInverse; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::WDM< float > WDMlEfloatgR;
      #else
      class WDMlEfloatgR  :  public ::WaveDWT< float > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~WDMlEfloatgR() throw() {};
         int BetaOrder; //beta function order for Meyer 
         int precision; //wavelet precision
         int KWDM; //K - parameter
         int LWDM; //unit time delay is tau/LWDM where tau is 1/hot_rate 
         ::wavearray< double > wdmFilter; //WDM filter
         ::SymmObjArray< ::SymmArraySSE< float >  > T0; //time-delay filters
         ::SymmObjArray< ::SymmArraySSE< float >  > Tx; //time-delay filters
         ::wavearray< float > sinTD; //
         ::wavearray< float > cosTD; //
         ::wavearray< float > sinTDx; //
         float** TFMap00; //! pointer to 0-phase data, by default not initialized
         float** TFMap90; //! pointer to 90-phase data, by default not initialized
          void (*SSE_TDF)(); //
         float* td_buffer; //!
         float* td_data; //!
         ::SymmArraySSE< float > td_halo[6]; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmArray< int > SymmArraylEintgR;
      #else
      class SymmArraylEintgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmArraylEintgR() throw() {};
         int Size; //
         int* rec; //!
         int* zero; //!
         int recSize; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmArray< float > SymmArraylEfloatgR;
      #else
      class SymmArraylEfloatgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmArraylEfloatgR() throw() {};
         int Size; //
         float* rec; //!
         float* zero; //!
         int recSize; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmArraySSE< int > SymmArraySSElEintgR;
      #else
      class SymmArraySSElEintgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmArraySSElEintgR() throw() {};
         int last; //
         int SizeSSE; //SizeSSE in bytes (multiple of 8)
         int* rec; //!
         int* zero; //! always in the middle of the allocated space
         int recSize; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmArraySSE< double > SymmArraySSElEdoublegR;
      #else
      class SymmArraySSElEdoublegR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmArraySSElEdoublegR() throw() {};
         int last; //
         int SizeSSE; //SizeSSE in bytes (multiple of 8)
         double* rec; //!
         double* zero; //! always in the middle of the allocated space
         int recSize; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmObjArray< ::SymmArray< int >  > SymmObjArraylESymmArraylEintgRsPgR;
      #else
      class SymmObjArraylESymmArraylEintgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmObjArraylESymmArraylEintgRsPgR() throw() {};
         int Size; //
         ::SymmArray< int >* rec; //!
         ::SymmArray< int >* zero; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmObjArray< ::SymmArray< float >  > SymmObjArraylESymmArraylEfloatgRsPgR;
      #else
      class SymmObjArraylESymmArraylEfloatgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmObjArraylESymmArraylEfloatgRsPgR() throw() {};
         int Size; //
         ::SymmArray< float >* rec; //!
         ::SymmArray< float >* zero; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmObjArray< ::SymmArray< double >  > SymmObjArraylESymmArraylEdoublegRsPgR;
      #else
      class SymmObjArraylESymmArraylEdoublegRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmObjArraylESymmArraylEdoublegRsPgR() throw() {};
         int Size; //
         ::SymmArray< double >* rec; //!
         ::SymmArray< double >* zero; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmObjArray< ::SymmArraySSE< int >  > SymmObjArraylESymmArraySSElEintgRsPgR;
      #else
      class SymmObjArraylESymmArraySSElEintgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmObjArraylESymmArraySSElEintgRsPgR() throw() {};
         int Size; //
         ::SymmArraySSE< int >* rec; //!
         ::SymmArraySSE< int >* zero; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SymmObjArray< ::SymmArraySSE< double >  > SymmObjArraylESymmArraySSElEdoublegRsPgR;
      #else
      class SymmObjArraylESymmArraySSElEdoublegRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SymmObjArraylESymmArraySSElEdoublegRsPgR() throw() {};
         int Size; //
         ::SymmArraySSE< double >* rec; //!
         ::SymmArraySSE< double >* zero; //!
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SSeries< float > SSerieslEfloatgR;
      #else
      class SSerieslEfloatgR  :  public ::WSeries< float > {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SSerieslEfloatgR() throw() {};
         ::TBits core; //core pixel array 1/0 : core/not-core
         ::wavearray< int > sparseLookup; //store the index pointer to the layers 
         ::TBits sparseType; //store pixel type 1/0  core/halo 
         ::wavearray< int > sparseIndex; //store pixel index
         ::wavearray< float > sparseMap00; //store pixel 00 amp
         ::wavearray< float > sparseMap90; //store pixel 90 amp;
         int layerHalo; //number of sparse layers associated to a pixel [+/- layerHalo]
         int time_Halo; //typically half length of time-delay filter
         int extraHalo; //number of extra sparse slices associated to a pixel [+/- (time_Halo+extraHalo)]
         double net_Delay; //delay time (sec) used to compute extraHalo = net_Delay*this->wrate()
         int wdm_BetaOrder; //
         int wdm_m_Layer; //
         int wdm_KWDM; //
         int wdm_precision; //
         int wdm_rate; //
         int wdm_start; //
         int wdm_nSTS; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void slice_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void slice_Dictionary();
   static void *new_slice(void *p = 0);
   static void *newArray_slice(Long_t size, void *p);
   static void delete_slice(void *p);
   static void deleteArray_slice(void *p);
   static void destruct_slice(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::slice*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::slice) == sizeof(::ROOT::Shadow::slice));
      ::slice *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::slice),0);
      static ::ROOT::TGenericClassInfo 
         instance("slice", "./wslice.hh", 46,
                  typeid(::slice), DefineBehavior(ptr, ptr),
                  &slice_ShowMembers, &slice_Dictionary, isa_proxy, 4,
                  sizeof(::slice) );
      instance.SetNew(&new_slice);
      instance.SetNewArray(&newArray_slice);
      instance.SetDelete(&delete_slice);
      instance.SetDeleteArray(&deleteArray_slice);
      instance.SetDestructor(&destruct_slice);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::slice*)
   {
      return GenerateInitInstanceLocal((::slice*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::slice*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void slice_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::slice*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Wavelet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Wavelet(void *p = 0);
   static void *newArray_Wavelet(Long_t size, void *p);
   static void delete_Wavelet(void *p);
   static void deleteArray_Wavelet(void *p);
   static void destruct_Wavelet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Wavelet*)
   {
      ::Wavelet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Wavelet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Wavelet", ::Wavelet::Class_Version(), "./Wavelet.hh", 34,
                  typeid(::Wavelet), DefineBehavior(ptr, ptr),
                  &::Wavelet::Dictionary, isa_proxy, 4,
                  sizeof(::Wavelet) );
      instance.SetNew(&new_Wavelet);
      instance.SetNewArray(&newArray_Wavelet);
      instance.SetDelete(&delete_Wavelet);
      instance.SetDeleteArray(&deleteArray_Wavelet);
      instance.SetDestructor(&destruct_Wavelet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Wavelet*)
   {
      return GenerateInitInstanceLocal((::Wavelet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Wavelet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void wavecomplex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_wavecomplex(void *p = 0);
   static void *newArray_wavecomplex(Long_t size, void *p);
   static void delete_wavecomplex(void *p);
   static void deleteArray_wavecomplex(void *p);
   static void destruct_wavecomplex(void *p);
   static void streamer_wavecomplex(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wavecomplex*)
   {
      ::wavecomplex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::wavecomplex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("wavecomplex", ::wavecomplex::Class_Version(), "./wavecomplex.hh", 15,
                  typeid(::wavecomplex), DefineBehavior(ptr, ptr),
                  &::wavecomplex::Dictionary, isa_proxy, 0,
                  sizeof(::wavecomplex) );
      instance.SetNew(&new_wavecomplex);
      instance.SetNewArray(&newArray_wavecomplex);
      instance.SetDelete(&delete_wavecomplex);
      instance.SetDeleteArray(&deleteArray_wavecomplex);
      instance.SetDestructor(&destruct_wavecomplex);
      instance.SetStreamerFunc(&streamer_wavecomplex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wavecomplex*)
   {
      return GenerateInitInstanceLocal((::wavecomplex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wavecomplex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void pixdata_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void pixdata_Dictionary();
   static void *new_pixdata(void *p = 0);
   static void *newArray_pixdata(Long_t size, void *p);
   static void delete_pixdata(void *p);
   static void deleteArray_pixdata(void *p);
   static void destruct_pixdata(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::pixdata*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::pixdata) == sizeof(::ROOT::Shadow::pixdata));
      ::pixdata *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::pixdata),0);
      static ::ROOT::TGenericClassInfo 
         instance("pixdata", "./netpixel.hh", 16,
                  typeid(::pixdata), DefineBehavior(ptr, ptr),
                  &pixdata_ShowMembers, &pixdata_Dictionary, isa_proxy, 4,
                  sizeof(::pixdata) );
      instance.SetNew(&new_pixdata);
      instance.SetNewArray(&newArray_pixdata);
      instance.SetDelete(&delete_pixdata);
      instance.SetDeleteArray(&deleteArray_pixdata);
      instance.SetDestructor(&destruct_pixdata);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::pixdata*)
   {
      return GenerateInitInstanceLocal((::pixdata*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::pixdata*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pixdata_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::pixdata*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void netpixel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_netpixel(void *p = 0);
   static void *newArray_netpixel(Long_t size, void *p);
   static void delete_netpixel(void *p);
   static void deleteArray_netpixel(void *p);
   static void destruct_netpixel(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::netpixel*)
   {
      ::netpixel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::netpixel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("netpixel", ::netpixel::Class_Version(), "./netpixel.hh", 26,
                  typeid(::netpixel), DefineBehavior(ptr, ptr),
                  &::netpixel::Dictionary, isa_proxy, 4,
                  sizeof(::netpixel) );
      instance.SetNew(&new_netpixel);
      instance.SetNewArray(&newArray_netpixel);
      instance.SetDelete(&delete_netpixel);
      instance.SetDeleteArray(&deleteArray_netpixel);
      instance.SetDestructor(&destruct_netpixel);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::netpixel*)
   {
      return GenerateInitInstanceLocal((::netpixel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::netpixel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void wavearraylEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void wavearraylEfloatgR_Dictionary();
   static void *new_wavearraylEfloatgR(void *p = 0);
   static void *newArray_wavearraylEfloatgR(Long_t size, void *p);
   static void delete_wavearraylEfloatgR(void *p);
   static void deleteArray_wavearraylEfloatgR(void *p);
   static void destruct_wavearraylEfloatgR(void *p);
   static void streamer_wavearraylEfloatgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wavearray<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::wavearray<float>) == sizeof(::ROOT::Shadow::wavearraylEfloatgR));
      ::wavearray<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::wavearray<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("wavearray<float>", ::wavearray<float>::Class_Version(), "./wavearray.hh", 37,
                  typeid(::wavearray<float>), DefineBehavior(ptr, ptr),
                  &wavearraylEfloatgR_Dictionary, isa_proxy, 1,
                  sizeof(::wavearray<float>) );
      instance.SetNew(&new_wavearraylEfloatgR);
      instance.SetNewArray(&newArray_wavearraylEfloatgR);
      instance.SetDelete(&delete_wavearraylEfloatgR);
      instance.SetDeleteArray(&deleteArray_wavearraylEfloatgR);
      instance.SetDestructor(&destruct_wavearraylEfloatgR);
      instance.SetStreamerFunc(&streamer_wavearraylEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wavearray<float>*)
   {
      return GenerateInitInstanceLocal((::wavearray<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wavearray<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void wavearraylEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wavearray<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void wavearraylEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void wavearraylEdoublegR_Dictionary();
   static void *new_wavearraylEdoublegR(void *p = 0);
   static void *newArray_wavearraylEdoublegR(Long_t size, void *p);
   static void delete_wavearraylEdoublegR(void *p);
   static void deleteArray_wavearraylEdoublegR(void *p);
   static void destruct_wavearraylEdoublegR(void *p);
   static void streamer_wavearraylEdoublegR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wavearray<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::wavearray<double>) == sizeof(::ROOT::Shadow::wavearraylEdoublegR));
      ::wavearray<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::wavearray<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("wavearray<double>", ::wavearray<double>::Class_Version(), "./wavearray.hh", 37,
                  typeid(::wavearray<double>), DefineBehavior(ptr, ptr),
                  &wavearraylEdoublegR_Dictionary, isa_proxy, 1,
                  sizeof(::wavearray<double>) );
      instance.SetNew(&new_wavearraylEdoublegR);
      instance.SetNewArray(&newArray_wavearraylEdoublegR);
      instance.SetDelete(&delete_wavearraylEdoublegR);
      instance.SetDeleteArray(&deleteArray_wavearraylEdoublegR);
      instance.SetDestructor(&destruct_wavearraylEdoublegR);
      instance.SetStreamerFunc(&streamer_wavearraylEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wavearray<double>*)
   {
      return GenerateInitInstanceLocal((::wavearray<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wavearray<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void wavearraylEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wavearray<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void network_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_network(void *p = 0);
   static void *newArray_network(Long_t size, void *p);
   static void delete_network(void *p);
   static void deleteArray_network(void *p);
   static void destruct_network(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::network*)
   {
      ::network *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::network >(0);
      static ::ROOT::TGenericClassInfo 
         instance("network", ::network::Class_Version(), "./network.hh", 40,
                  typeid(::network), DefineBehavior(ptr, ptr),
                  &::network::Dictionary, isa_proxy, 4,
                  sizeof(::network) );
      instance.SetNew(&new_network);
      instance.SetNewArray(&newArray_network);
      instance.SetDelete(&delete_network);
      instance.SetDeleteArray(&deleteArray_network);
      instance.SetDestructor(&destruct_network);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::network*)
   {
      return GenerateInitInstanceLocal((::network*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::network*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void clusterdata_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_clusterdata(void *p = 0);
   static void *newArray_clusterdata(Long_t size, void *p);
   static void delete_clusterdata(void *p);
   static void deleteArray_clusterdata(void *p);
   static void destruct_clusterdata(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::clusterdata*)
   {
      ::clusterdata *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::clusterdata >(0);
      static ::ROOT::TGenericClassInfo 
         instance("clusterdata", ::clusterdata::Class_Version(), "./netcluster.hh", 31,
                  typeid(::clusterdata), DefineBehavior(ptr, ptr),
                  &::clusterdata::Dictionary, isa_proxy, 4,
                  sizeof(::clusterdata) );
      instance.SetNew(&new_clusterdata);
      instance.SetNewArray(&newArray_clusterdata);
      instance.SetDelete(&delete_clusterdata);
      instance.SetDeleteArray(&deleteArray_clusterdata);
      instance.SetDestructor(&destruct_clusterdata);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::clusterdata*)
   {
      return GenerateInitInstanceLocal((::clusterdata*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::clusterdata*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void netcluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_netcluster(void *p = 0);
   static void *newArray_netcluster(Long_t size, void *p);
   static void delete_netcluster(void *p);
   static void deleteArray_netcluster(void *p);
   static void destruct_netcluster(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::netcluster*)
   {
      ::netcluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::netcluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("netcluster", ::netcluster::Class_Version(), "./netcluster.hh", 76,
                  typeid(::netcluster), DefineBehavior(ptr, ptr),
                  &::netcluster::Dictionary, isa_proxy, 4,
                  sizeof(::netcluster) );
      instance.SetNew(&new_netcluster);
      instance.SetNewArray(&newArray_netcluster);
      instance.SetDelete(&delete_netcluster);
      instance.SetDeleteArray(&deleteArray_netcluster);
      instance.SetDestructor(&destruct_netcluster);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::netcluster*)
   {
      return GenerateInitInstanceLocal((::netcluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::netcluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void WSerieslEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void WSerieslEdoublegR_Dictionary();
   static void *new_WSerieslEdoublegR(void *p = 0);
   static void *newArray_WSerieslEdoublegR(Long_t size, void *p);
   static void delete_WSerieslEdoublegR(void *p);
   static void deleteArray_WSerieslEdoublegR(void *p);
   static void destruct_WSerieslEdoublegR(void *p);
   static void streamer_WSerieslEdoublegR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WSeries<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::WSeries<double>) == sizeof(::ROOT::Shadow::WSerieslEdoublegR));
      ::WSeries<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::WSeries<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("WSeries<double>", ::WSeries<double>::Class_Version(), "./wseries.hh", 27,
                  typeid(::WSeries<double>), DefineBehavior(ptr, ptr),
                  &WSerieslEdoublegR_Dictionary, isa_proxy, 1,
                  sizeof(::WSeries<double>) );
      instance.SetNew(&new_WSerieslEdoublegR);
      instance.SetNewArray(&newArray_WSerieslEdoublegR);
      instance.SetDelete(&delete_WSerieslEdoublegR);
      instance.SetDeleteArray(&deleteArray_WSerieslEdoublegR);
      instance.SetDestructor(&destruct_WSerieslEdoublegR);
      instance.SetStreamerFunc(&streamer_WSerieslEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WSeries<double>*)
   {
      return GenerateInitInstanceLocal((::WSeries<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::WSeries<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void WSerieslEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::WSeries<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void WSerieslEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void WSerieslEfloatgR_Dictionary();
   static void *new_WSerieslEfloatgR(void *p = 0);
   static void *newArray_WSerieslEfloatgR(Long_t size, void *p);
   static void delete_WSerieslEfloatgR(void *p);
   static void deleteArray_WSerieslEfloatgR(void *p);
   static void destruct_WSerieslEfloatgR(void *p);
   static void streamer_WSerieslEfloatgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WSeries<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::WSeries<float>) == sizeof(::ROOT::Shadow::WSerieslEfloatgR));
      ::WSeries<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::WSeries<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("WSeries<float>", ::WSeries<float>::Class_Version(), "./wseries.hh", 27,
                  typeid(::WSeries<float>), DefineBehavior(ptr, ptr),
                  &WSerieslEfloatgR_Dictionary, isa_proxy, 1,
                  sizeof(::WSeries<float>) );
      instance.SetNew(&new_WSerieslEfloatgR);
      instance.SetNewArray(&newArray_WSerieslEfloatgR);
      instance.SetDelete(&delete_WSerieslEfloatgR);
      instance.SetDeleteArray(&deleteArray_WSerieslEfloatgR);
      instance.SetDestructor(&destruct_WSerieslEfloatgR);
      instance.SetStreamerFunc(&streamer_WSerieslEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WSeries<float>*)
   {
      return GenerateInitInstanceLocal((::WSeries<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::WSeries<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void WSerieslEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::WSeries<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void WaveDWTlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void WaveDWTlEfloatgR_Dictionary();
   static void *new_WaveDWTlEfloatgR(void *p = 0);
   static void *newArray_WaveDWTlEfloatgR(Long_t size, void *p);
   static void delete_WaveDWTlEfloatgR(void *p);
   static void deleteArray_WaveDWTlEfloatgR(void *p);
   static void destruct_WaveDWTlEfloatgR(void *p);
   static void streamer_WaveDWTlEfloatgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WaveDWT<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::WaveDWT<float>) == sizeof(::ROOT::Shadow::WaveDWTlEfloatgR));
      ::WaveDWT<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::WaveDWT<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("WaveDWT<float>", ::WaveDWT<float>::Class_Version(), "./WaveDWT.hh", 26,
                  typeid(::WaveDWT<float>), DefineBehavior(ptr, ptr),
                  &WaveDWTlEfloatgR_Dictionary, isa_proxy, 1,
                  sizeof(::WaveDWT<float>) );
      instance.SetNew(&new_WaveDWTlEfloatgR);
      instance.SetNewArray(&newArray_WaveDWTlEfloatgR);
      instance.SetDelete(&delete_WaveDWTlEfloatgR);
      instance.SetDeleteArray(&deleteArray_WaveDWTlEfloatgR);
      instance.SetDestructor(&destruct_WaveDWTlEfloatgR);
      instance.SetStreamerFunc(&streamer_WaveDWTlEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WaveDWT<float>*)
   {
      return GenerateInitInstanceLocal((::WaveDWT<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::WaveDWT<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void WaveDWTlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SSerieslEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SSerieslEdoublegR_Dictionary();
   static void *new_SSerieslEdoublegR(void *p = 0);
   static void *newArray_SSerieslEdoublegR(Long_t size, void *p);
   static void delete_SSerieslEdoublegR(void *p);
   static void deleteArray_SSerieslEdoublegR(void *p);
   static void destruct_SSerieslEdoublegR(void *p);
   static void streamer_SSerieslEdoublegR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SSeries<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SSeries<double>) == sizeof(::ROOT::Shadow::SSerieslEdoublegR));
      ::SSeries<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SSeries<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SSeries<double>", ::SSeries<double>::Class_Version(), "./sseries.hh", 20,
                  typeid(::SSeries<double>), DefineBehavior(ptr, ptr),
                  &SSerieslEdoublegR_Dictionary, isa_proxy, 1,
                  sizeof(::SSeries<double>) );
      instance.SetNew(&new_SSerieslEdoublegR);
      instance.SetNewArray(&newArray_SSerieslEdoublegR);
      instance.SetDelete(&delete_SSerieslEdoublegR);
      instance.SetDeleteArray(&deleteArray_SSerieslEdoublegR);
      instance.SetDestructor(&destruct_SSerieslEdoublegR);
      instance.SetStreamerFunc(&streamer_SSerieslEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SSeries<double>*)
   {
      return GenerateInitInstanceLocal((::SSeries<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SSeries<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SSerieslEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SSeries<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void WaveDWTlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void WaveDWTlEdoublegR_Dictionary();
   static void *new_WaveDWTlEdoublegR(void *p = 0);
   static void *newArray_WaveDWTlEdoublegR(Long_t size, void *p);
   static void delete_WaveDWTlEdoublegR(void *p);
   static void deleteArray_WaveDWTlEdoublegR(void *p);
   static void destruct_WaveDWTlEdoublegR(void *p);
   static void streamer_WaveDWTlEdoublegR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WaveDWT<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::WaveDWT<double>) == sizeof(::ROOT::Shadow::WaveDWTlEdoublegR));
      ::WaveDWT<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::WaveDWT<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("WaveDWT<double>", ::WaveDWT<double>::Class_Version(), "./WaveDWT.hh", 26,
                  typeid(::WaveDWT<double>), DefineBehavior(ptr, ptr),
                  &WaveDWTlEdoublegR_Dictionary, isa_proxy, 1,
                  sizeof(::WaveDWT<double>) );
      instance.SetNew(&new_WaveDWTlEdoublegR);
      instance.SetNewArray(&newArray_WaveDWTlEdoublegR);
      instance.SetDelete(&delete_WaveDWTlEdoublegR);
      instance.SetDeleteArray(&deleteArray_WaveDWTlEdoublegR);
      instance.SetDestructor(&destruct_WaveDWTlEdoublegR);
      instance.SetStreamerFunc(&streamer_WaveDWTlEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WaveDWT<double>*)
   {
      return GenerateInitInstanceLocal((::WaveDWT<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::WaveDWT<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void WaveDWTlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void watcLcLAlm_Base_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void watcLcLAlm_Base_Dictionary();
   static void *new_watcLcLAlm_Base(void *p = 0);
   static void *newArray_watcLcLAlm_Base(Long_t size, void *p);
   static void delete_watcLcLAlm_Base(void *p);
   static void deleteArray_watcLcLAlm_Base(void *p);
   static void destruct_watcLcLAlm_Base(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wat::Alm_Base*)
   {
      ::wat::Alm_Base *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::wat::Alm_Base),0);
      static ::ROOT::TGenericClassInfo 
         instance("wat::Alm_Base", "./alm.hh", 26,
                  typeid(::wat::Alm_Base), DefineBehavior(ptr, ptr),
                  0, &watcLcLAlm_Base_Dictionary, isa_proxy, 0,
                  sizeof(::wat::Alm_Base) );
      instance.SetNew(&new_watcLcLAlm_Base);
      instance.SetNewArray(&newArray_watcLcLAlm_Base);
      instance.SetDelete(&delete_watcLcLAlm_Base);
      instance.SetDeleteArray(&deleteArray_watcLcLAlm_Base);
      instance.SetDestructor(&destruct_watcLcLAlm_Base);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wat::Alm_Base*)
   {
      return GenerateInitInstanceLocal((::wat::Alm_Base*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wat::Alm_Base*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void watcLcLAlm_Base_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wat::Alm_Base*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void watcLcLAlm_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void watcLcLAlm_Dictionary();
   static void *new_watcLcLAlm(void *p = 0);
   static void *newArray_watcLcLAlm(Long_t size, void *p);
   static void delete_watcLcLAlm(void *p);
   static void deleteArray_watcLcLAlm(void *p);
   static void destruct_watcLcLAlm(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wat::Alm*)
   {
      ::wat::Alm *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::wat::Alm),0);
      static ::ROOT::TGenericClassInfo 
         instance("wat::Alm", "./alm.hh", 172,
                  typeid(::wat::Alm), DefineBehavior(ptr, ptr),
                  0, &watcLcLAlm_Dictionary, isa_proxy, 0,
                  sizeof(::wat::Alm) );
      instance.SetNew(&new_watcLcLAlm);
      instance.SetNewArray(&newArray_watcLcLAlm);
      instance.SetDelete(&delete_watcLcLAlm);
      instance.SetDeleteArray(&deleteArray_watcLcLAlm);
      instance.SetDestructor(&destruct_watcLcLAlm);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wat::Alm*)
   {
      return GenerateInitInstanceLocal((::wat::Alm*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wat::Alm*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void watcLcLAlm_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wat::Alm*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR_Dictionary();
   static void *new_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(void *p = 0);
   static void *newArray_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(Long_t size, void *p);
   static void delete_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(void *p);
   static void deleteArray_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(void *p);
   static void destruct_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wat::Alm_Template<complex<double> >*)
   {
      ::wat::Alm_Template<complex<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::wat::Alm_Template<complex<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("wat::Alm_Template<complex<double> >", "./alm.hh", 82,
                  typeid(::wat::Alm_Template<complex<double> >), DefineBehavior(ptr, ptr),
                  0, &watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(::wat::Alm_Template<complex<double> >) );
      instance.SetNew(&new_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR);
      instance.SetNewArray(&newArray_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR);
      instance.SetDelete(&delete_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR);
      instance.SetDestructor(&destruct_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wat::Alm_Template<complex<double> >*)
   {
      return GenerateInitInstanceLocal((::wat::Alm_Template<complex<double> >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wat::Alm_Template<complex<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wat::Alm_Template<complex<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void skymap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_skymap(void *p = 0);
   static void *newArray_skymap(Long_t size, void *p);
   static void delete_skymap(void *p);
   static void deleteArray_skymap(void *p);
   static void destruct_skymap(void *p);
   static void streamer_skymap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::skymap*)
   {
      ::skymap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::skymap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("skymap", ::skymap::Class_Version(), "./skymap.hh", 46,
                  typeid(::skymap), DefineBehavior(ptr, ptr),
                  &::skymap::Dictionary, isa_proxy, 1,
                  sizeof(::skymap) );
      instance.SetNew(&new_skymap);
      instance.SetNewArray(&newArray_skymap);
      instance.SetDelete(&delete_skymap);
      instance.SetDeleteArray(&deleteArray_skymap);
      instance.SetDestructor(&destruct_skymap);
      instance.SetStreamerFunc(&streamer_skymap);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::skymap*)
   {
      return GenerateInitInstanceLocal((::skymap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::skymap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void wavearraylEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void wavearraylEshortgR_Dictionary();
   static void *new_wavearraylEshortgR(void *p = 0);
   static void *newArray_wavearraylEshortgR(Long_t size, void *p);
   static void delete_wavearraylEshortgR(void *p);
   static void deleteArray_wavearraylEshortgR(void *p);
   static void destruct_wavearraylEshortgR(void *p);
   static void streamer_wavearraylEshortgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wavearray<short>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::wavearray<short>) == sizeof(::ROOT::Shadow::wavearraylEshortgR));
      ::wavearray<short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::wavearray<short> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("wavearray<short>", ::wavearray<short>::Class_Version(), "./wavearray.hh", 37,
                  typeid(::wavearray<short>), DefineBehavior(ptr, ptr),
                  &wavearraylEshortgR_Dictionary, isa_proxy, 1,
                  sizeof(::wavearray<short>) );
      instance.SetNew(&new_wavearraylEshortgR);
      instance.SetNewArray(&newArray_wavearraylEshortgR);
      instance.SetDelete(&delete_wavearraylEshortgR);
      instance.SetDeleteArray(&deleteArray_wavearraylEshortgR);
      instance.SetDestructor(&destruct_wavearraylEshortgR);
      instance.SetStreamerFunc(&streamer_wavearraylEshortgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wavearray<short>*)
   {
      return GenerateInitInstanceLocal((::wavearray<short>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wavearray<short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void wavearraylEshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wavearray<short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void wavearraylEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void wavearraylEintgR_Dictionary();
   static void *new_wavearraylEintgR(void *p = 0);
   static void *newArray_wavearraylEintgR(Long_t size, void *p);
   static void delete_wavearraylEintgR(void *p);
   static void deleteArray_wavearraylEintgR(void *p);
   static void destruct_wavearraylEintgR(void *p);
   static void streamer_wavearraylEintgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wavearray<int>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::wavearray<int>) == sizeof(::ROOT::Shadow::wavearraylEintgR));
      ::wavearray<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::wavearray<int> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("wavearray<int>", ::wavearray<int>::Class_Version(), "./wavearray.hh", 37,
                  typeid(::wavearray<int>), DefineBehavior(ptr, ptr),
                  &wavearraylEintgR_Dictionary, isa_proxy, 1,
                  sizeof(::wavearray<int>) );
      instance.SetNew(&new_wavearraylEintgR);
      instance.SetNewArray(&newArray_wavearraylEintgR);
      instance.SetDelete(&delete_wavearraylEintgR);
      instance.SetDeleteArray(&deleteArray_wavearraylEintgR);
      instance.SetDestructor(&destruct_wavearraylEintgR);
      instance.SetStreamerFunc(&streamer_wavearraylEintgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wavearray<int>*)
   {
      return GenerateInitInstanceLocal((::wavearray<int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wavearray<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void wavearraylEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wavearray<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmArraySSElEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmArraySSElEfloatgR_Dictionary();
   static void *new_SymmArraySSElEfloatgR(void *p = 0);
   static void *newArray_SymmArraySSElEfloatgR(Long_t size, void *p);
   static void delete_SymmArraySSElEfloatgR(void *p);
   static void deleteArray_SymmArraySSElEfloatgR(void *p);
   static void destruct_SymmArraySSElEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmArraySSE<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmArraySSE<float>) == sizeof(::ROOT::Shadow::SymmArraySSElEfloatgR));
      ::SymmArraySSE<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmArraySSE<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmArraySSE<float>", ::SymmArraySSE<float>::Class_Version(), "./SymmArraySSE.hh", 12,
                  typeid(::SymmArraySSE<float>), DefineBehavior(ptr, ptr),
                  &SymmArraySSElEfloatgR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmArraySSE<float>) );
      instance.SetNew(&new_SymmArraySSElEfloatgR);
      instance.SetNewArray(&newArray_SymmArraySSElEfloatgR);
      instance.SetDelete(&delete_SymmArraySSElEfloatgR);
      instance.SetDeleteArray(&deleteArray_SymmArraySSElEfloatgR);
      instance.SetDestructor(&destruct_SymmArraySSElEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmArraySSE<float>*)
   {
      return GenerateInitInstanceLocal((::SymmArraySSE<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmArraySSE<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmArraySSElEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void delayFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delayFilter_Dictionary();
   static void *new_delayFilter(void *p = 0);
   static void *newArray_delayFilter(Long_t size, void *p);
   static void delete_delayFilter(void *p);
   static void deleteArray_delayFilter(void *p);
   static void destruct_delayFilter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::delayFilter*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::delayFilter) == sizeof(::ROOT::Shadow::delayFilter));
      ::delayFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::delayFilter),0);
      static ::ROOT::TGenericClassInfo 
         instance("delayFilter", "./detector.hh", 26,
                  typeid(::delayFilter), DefineBehavior(ptr, ptr),
                  &delayFilter_ShowMembers, &delayFilter_Dictionary, isa_proxy, 4,
                  sizeof(::delayFilter) );
      instance.SetNew(&new_delayFilter);
      instance.SetNewArray(&newArray_delayFilter);
      instance.SetDelete(&delete_delayFilter);
      instance.SetDeleteArray(&deleteArray_delayFilter);
      instance.SetDestructor(&destruct_delayFilter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::delayFilter*)
   {
      return GenerateInitInstanceLocal((::delayFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::delayFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void delayFilter_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::delayFilter*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void detectorParams_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void detectorParams_Dictionary();
   static void *new_detectorParams(void *p = 0);
   static void *newArray_detectorParams(Long_t size, void *p);
   static void delete_detectorParams(void *p);
   static void deleteArray_detectorParams(void *p);
   static void destruct_detectorParams(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::detectorParams*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::detectorParams) == sizeof(::ROOT::Shadow::detectorParams));
      ::detectorParams *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::detectorParams),0);
      static ::ROOT::TGenericClassInfo 
         instance("detectorParams", "./detector.hh", 31,
                  typeid(::detectorParams), DefineBehavior(ptr, ptr),
                  &detectorParams_ShowMembers, &detectorParams_Dictionary, isa_proxy, 4,
                  sizeof(::detectorParams) );
      instance.SetNew(&new_detectorParams);
      instance.SetNewArray(&newArray_detectorParams);
      instance.SetDelete(&delete_detectorParams);
      instance.SetDeleteArray(&deleteArray_detectorParams);
      instance.SetDestructor(&destruct_detectorParams);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::detectorParams*)
   {
      return GenerateInitInstanceLocal((::detectorParams*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::detectorParams*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void detectorParams_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::detectorParams*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void detector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_detector(void *p = 0);
   static void *newArray_detector(Long_t size, void *p);
   static void delete_detector(void *p);
   static void deleteArray_detector(void *p);
   static void destruct_detector(void *p);
   static void streamer_detector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::detector*)
   {
      ::detector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::detector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("detector", ::detector::Class_Version(), "./detector.hh", 50,
                  typeid(::detector), DefineBehavior(ptr, ptr),
                  &::detector::Dictionary, isa_proxy, 1,
                  sizeof(::detector) );
      instance.SetNew(&new_detector);
      instance.SetNewArray(&newArray_detector);
      instance.SetDelete(&delete_detector);
      instance.SetDeleteArray(&deleteArray_detector);
      instance.SetDestructor(&destruct_detector);
      instance.SetStreamerFunc(&streamer_detector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::detector*)
   {
      return GenerateInitInstanceLocal((::detector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::detector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void monster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_monster(void *p = 0);
   static void *newArray_monster(Long_t size, void *p);
   static void delete_monster(void *p);
   static void deleteArray_monster(void *p);
   static void destruct_monster(void *p);
   static void streamer_monster(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::monster*)
   {
      ::monster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::monster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("monster", ::monster::Class_Version(), "./monster.hh", 19,
                  typeid(::monster), DefineBehavior(ptr, ptr),
                  &::monster::Dictionary, isa_proxy, 0,
                  sizeof(::monster) );
      instance.SetNew(&new_monster);
      instance.SetNewArray(&newArray_monster);
      instance.SetDelete(&delete_monster);
      instance.SetDeleteArray(&deleteArray_monster);
      instance.SetDestructor(&destruct_monster);
      instance.SetStreamerFunc(&streamer_monster);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::monster*)
   {
      return GenerateInitInstanceLocal((::monster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::monster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void WDMlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void WDMlEdoublegR_Dictionary();
   static void *new_WDMlEdoublegR(void *p = 0);
   static void *newArray_WDMlEdoublegR(Long_t size, void *p);
   static void delete_WDMlEdoublegR(void *p);
   static void deleteArray_WDMlEdoublegR(void *p);
   static void destruct_WDMlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WDM<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::WDM<double>) == sizeof(::ROOT::Shadow::WDMlEdoublegR));
      ::WDM<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::WDM<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("WDM<double>", ::WDM<double>::Class_Version(), "./WDM.hh", 24,
                  typeid(::WDM<double>), DefineBehavior(ptr, ptr),
                  &WDMlEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::WDM<double>) );
      instance.SetNew(&new_WDMlEdoublegR);
      instance.SetNewArray(&newArray_WDMlEdoublegR);
      instance.SetDelete(&delete_WDMlEdoublegR);
      instance.SetDeleteArray(&deleteArray_WDMlEdoublegR);
      instance.SetDestructor(&destruct_WDMlEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WDM<double>*)
   {
      return GenerateInitInstanceLocal((::WDM<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::WDM<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void WDMlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::WDM<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmArraylEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmArraylEdoublegR_Dictionary();
   static void *new_SymmArraylEdoublegR(void *p = 0);
   static void *newArray_SymmArraylEdoublegR(Long_t size, void *p);
   static void delete_SymmArraylEdoublegR(void *p);
   static void deleteArray_SymmArraylEdoublegR(void *p);
   static void destruct_SymmArraylEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmArray<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmArray<double>) == sizeof(::ROOT::Shadow::SymmArraylEdoublegR));
      ::SymmArray<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmArray<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmArray<double>", ::SymmArray<double>::Class_Version(), "./SymmArray.hh", 12,
                  typeid(::SymmArray<double>), DefineBehavior(ptr, ptr),
                  &SymmArraylEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmArray<double>) );
      instance.SetNew(&new_SymmArraylEdoublegR);
      instance.SetNewArray(&newArray_SymmArraylEdoublegR);
      instance.SetDelete(&delete_SymmArraylEdoublegR);
      instance.SetDeleteArray(&deleteArray_SymmArraylEdoublegR);
      instance.SetDestructor(&destruct_SymmArraylEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmArray<double>*)
   {
      return GenerateInitInstanceLocal((::SymmArray<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmArray<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmArraylEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmObjArraylESymmArraySSElEfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmObjArraylESymmArraySSElEfloatgRsPgR_Dictionary();
   static void *new_SymmObjArraylESymmArraySSElEfloatgRsPgR(void *p = 0);
   static void *newArray_SymmObjArraylESymmArraySSElEfloatgRsPgR(Long_t size, void *p);
   static void delete_SymmObjArraylESymmArraySSElEfloatgRsPgR(void *p);
   static void deleteArray_SymmObjArraylESymmArraySSElEfloatgRsPgR(void *p);
   static void destruct_SymmObjArraylESymmArraySSElEfloatgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmObjArray<SymmArraySSE<float> >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmObjArray<SymmArraySSE<float> >) == sizeof(::ROOT::Shadow::SymmObjArraylESymmArraySSElEfloatgRsPgR));
      ::SymmObjArray<SymmArraySSE<float> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmObjArray<SymmArraySSE<float> > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmObjArray<SymmArraySSE<float> >", ::SymmObjArray<SymmArraySSE<float> >::Class_Version(), "./SymmObjArray.hh", 12,
                  typeid(::SymmObjArray<SymmArraySSE<float> >), DefineBehavior(ptr, ptr),
                  &SymmObjArraylESymmArraySSElEfloatgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmObjArray<SymmArraySSE<float> >) );
      instance.SetNew(&new_SymmObjArraylESymmArraySSElEfloatgRsPgR);
      instance.SetNewArray(&newArray_SymmObjArraylESymmArraySSElEfloatgRsPgR);
      instance.SetDelete(&delete_SymmObjArraylESymmArraySSElEfloatgRsPgR);
      instance.SetDeleteArray(&deleteArray_SymmObjArraylESymmArraySSElEfloatgRsPgR);
      instance.SetDestructor(&destruct_SymmObjArraylESymmArraySSElEfloatgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmObjArray<SymmArraySSE<float> >*)
   {
      return GenerateInitInstanceLocal((::SymmObjArray<SymmArraySSE<float> >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<float> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmObjArraylESymmArraySSElEfloatgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<float> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void waveSegment_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void waveSegment_Dictionary();
   static void *new_waveSegment(void *p = 0);
   static void *newArray_waveSegment(Long_t size, void *p);
   static void delete_waveSegment(void *p);
   static void deleteArray_waveSegment(void *p);
   static void destruct_waveSegment(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::waveSegment*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::waveSegment) == sizeof(::ROOT::Shadow::waveSegment));
      ::waveSegment *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::waveSegment),0);
      static ::ROOT::TGenericClassInfo 
         instance("waveSegment", "./network.hh", 33,
                  typeid(::waveSegment), DefineBehavior(ptr, ptr),
                  &waveSegment_ShowMembers, &waveSegment_Dictionary, isa_proxy, 4,
                  sizeof(::waveSegment) );
      instance.SetNew(&new_waveSegment);
      instance.SetNewArray(&newArray_waveSegment);
      instance.SetDelete(&delete_waveSegment);
      instance.SetDeleteArray(&deleteArray_waveSegment);
      instance.SetDestructor(&destruct_waveSegment);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::waveSegment*)
   {
      return GenerateInitInstanceLocal((::waveSegment*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::waveSegment*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void waveSegment_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::waveSegment*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void injection_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_injection(void *p = 0);
   static void *newArray_injection(Long_t size, void *p);
   static void delete_injection(void *p);
   static void deleteArray_injection(void *p);
   static void destruct_injection(void *p);
   static void streamer_injection(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::injection*)
   {
      ::injection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::injection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("injection", ::injection::Class_Version(), "./injection.hh", 31,
                  typeid(::injection), DefineBehavior(ptr, ptr),
                  &::injection::Dictionary, isa_proxy, 0,
                  sizeof(::injection) );
      instance.SetNew(&new_injection);
      instance.SetNewArray(&newArray_injection);
      instance.SetDelete(&delete_injection);
      instance.SetDeleteArray(&deleteArray_injection);
      instance.SetDestructor(&destruct_injection);
      instance.SetStreamerFunc(&streamer_injection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::injection*)
   {
      return GenerateInitInstanceLocal((::injection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::injection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void watplot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_watplot(void *p = 0);
   static void *newArray_watplot(Long_t size, void *p);
   static void delete_watplot(void *p);
   static void deleteArray_watplot(void *p);
   static void destruct_watplot(void *p);
   static void streamer_watplot(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::watplot*)
   {
      ::watplot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::watplot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("watplot", ::watplot::Class_Version(), "./watplot.hh", 30,
                  typeid(::watplot), DefineBehavior(ptr, ptr),
                  &::watplot::Dictionary, isa_proxy, 0,
                  sizeof(::watplot) );
      instance.SetNew(&new_watplot);
      instance.SetNewArray(&newArray_watplot);
      instance.SetDelete(&delete_watplot);
      instance.SetDeleteArray(&deleteArray_watplot);
      instance.SetDestructor(&destruct_watplot);
      instance.SetStreamerFunc(&streamer_watplot);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::watplot*)
   {
      return GenerateInitInstanceLocal((::watplot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::watplot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void wavepixel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void wavepixel_Dictionary();
   static void *new_wavepixel(void *p = 0);
   static void *newArray_wavepixel(Long_t size, void *p);
   static void delete_wavepixel(void *p);
   static void deleteArray_wavepixel(void *p);
   static void destruct_wavepixel(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wavepixel*)
   {
      ::wavepixel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::wavepixel),0);
      static ::ROOT::TGenericClassInfo 
         instance("wavepixel", "./cluster.hh", 20,
                  typeid(::wavepixel), DefineBehavior(ptr, ptr),
                  0, &wavepixel_Dictionary, isa_proxy, 0,
                  sizeof(::wavepixel) );
      instance.SetNew(&new_wavepixel);
      instance.SetNewArray(&newArray_wavepixel);
      instance.SetDelete(&delete_wavepixel);
      instance.SetDeleteArray(&deleteArray_wavepixel);
      instance.SetDestructor(&destruct_wavepixel);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wavepixel*)
   {
      return GenerateInitInstanceLocal((::wavepixel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wavepixel*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void wavepixel_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wavepixel*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void wavecluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void wavecluster_Dictionary();
   static void *new_wavecluster(void *p = 0);
   static void *newArray_wavecluster(Long_t size, void *p);
   static void delete_wavecluster(void *p);
   static void deleteArray_wavecluster(void *p);
   static void destruct_wavecluster(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wavecluster*)
   {
      ::wavecluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::wavecluster),0);
      static ::ROOT::TGenericClassInfo 
         instance("wavecluster", "./cluster.hh", 52,
                  typeid(::wavecluster), DefineBehavior(ptr, ptr),
                  0, &wavecluster_Dictionary, isa_proxy, 0,
                  sizeof(::wavecluster) );
      instance.SetNew(&new_wavecluster);
      instance.SetNewArray(&newArray_wavecluster);
      instance.SetDelete(&delete_wavecluster);
      instance.SetDeleteArray(&deleteArray_wavecluster);
      instance.SetDestructor(&destruct_wavecluster);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wavecluster*)
   {
      return GenerateInitInstanceLocal((::wavecluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wavecluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void wavecluster_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wavecluster*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void wavecor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_wavecor(void *p = 0);
   static void *newArray_wavecor(Long_t size, void *p);
   static void delete_wavecor(void *p);
   static void deleteArray_wavecor(void *p);
   static void destruct_wavecor(void *p);
   static void streamer_wavecor(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wavecor*)
   {
      ::wavecor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::wavecor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("wavecor", ::wavecor::Class_Version(), "./wavecor.hh", 19,
                  typeid(::wavecor), DefineBehavior(ptr, ptr),
                  &::wavecor::Dictionary, isa_proxy, 0,
                  sizeof(::wavecor) );
      instance.SetNew(&new_wavecor);
      instance.SetNewArray(&newArray_wavecor);
      instance.SetDelete(&delete_wavecor);
      instance.SetDeleteArray(&deleteArray_wavecor);
      instance.SetDestructor(&destruct_wavecor);
      instance.SetStreamerFunc(&streamer_wavecor);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wavecor*)
   {
      return GenerateInitInstanceLocal((::wavecor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wavecor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void WaveRDC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_WaveRDC(void *p = 0);
   static void *newArray_WaveRDC(Long_t size, void *p);
   static void delete_WaveRDC(void *p);
   static void deleteArray_WaveRDC(void *p);
   static void destruct_WaveRDC(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WaveRDC*)
   {
      ::WaveRDC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::WaveRDC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("WaveRDC", ::WaveRDC::Class_Version(), "./waverdc.hh", 19,
                  typeid(::WaveRDC), DefineBehavior(ptr, ptr),
                  &::WaveRDC::Dictionary, isa_proxy, 4,
                  sizeof(::WaveRDC) );
      instance.SetNew(&new_WaveRDC);
      instance.SetNewArray(&newArray_WaveRDC);
      instance.SetDelete(&delete_WaveRDC);
      instance.SetDeleteArray(&deleteArray_WaveRDC);
      instance.SetDestructor(&destruct_WaveRDC);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WaveRDC*)
   {
      return GenerateInitInstanceLocal((::WaveRDC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::WaveRDC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void wavearraylEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void wavearraylEunsignedsPintgR_Dictionary();
   static void *new_wavearraylEunsignedsPintgR(void *p = 0);
   static void *newArray_wavearraylEunsignedsPintgR(Long_t size, void *p);
   static void delete_wavearraylEunsignedsPintgR(void *p);
   static void deleteArray_wavearraylEunsignedsPintgR(void *p);
   static void destruct_wavearraylEunsignedsPintgR(void *p);
   static void streamer_wavearraylEunsignedsPintgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wavearray<unsigned int>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::wavearray<unsigned int>) == sizeof(::ROOT::Shadow::wavearraylEunsignedsPintgR));
      ::wavearray<unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::wavearray<unsigned int> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("wavearray<unsigned int>", ::wavearray<unsigned int>::Class_Version(), "./wavearray.hh", 37,
                  typeid(::wavearray<unsigned int>), DefineBehavior(ptr, ptr),
                  &wavearraylEunsignedsPintgR_Dictionary, isa_proxy, 1,
                  sizeof(::wavearray<unsigned int>) );
      instance.SetNew(&new_wavearraylEunsignedsPintgR);
      instance.SetNewArray(&newArray_wavearraylEunsignedsPintgR);
      instance.SetDelete(&delete_wavearraylEunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_wavearraylEunsignedsPintgR);
      instance.SetDestructor(&destruct_wavearraylEunsignedsPintgR);
      instance.SetStreamerFunc(&streamer_wavearraylEunsignedsPintgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wavearray<unsigned int>*)
   {
      return GenerateInitInstanceLocal((::wavearray<unsigned int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wavearray<unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void wavearraylEunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wavearray<unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void linefilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void linefilter_Dictionary();
   static void *new_linefilter(void *p = 0);
   static void *newArray_linefilter(Long_t size, void *p);
   static void delete_linefilter(void *p);
   static void deleteArray_linefilter(void *p);
   static void destruct_linefilter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::linefilter*)
   {
      ::linefilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::linefilter),0);
      static ::ROOT::TGenericClassInfo 
         instance("linefilter", "./wavelinefilter.hh", 34,
                  typeid(::linefilter), DefineBehavior(ptr, ptr),
                  0, &linefilter_Dictionary, isa_proxy, 0,
                  sizeof(::linefilter) );
      instance.SetNew(&new_linefilter);
      instance.SetNewArray(&newArray_linefilter);
      instance.SetDelete(&delete_linefilter);
      instance.SetDeleteArray(&deleteArray_linefilter);
      instance.SetDestructor(&destruct_linefilter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::linefilter*)
   {
      return GenerateInitInstanceLocal((::linefilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::linefilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void linefilter_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::linefilter*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void netevent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_netevent(void *p = 0);
   static void *newArray_netevent(Long_t size, void *p);
   static void delete_netevent(void *p);
   static void deleteArray_netevent(void *p);
   static void destruct_netevent(void *p);
   static void streamer_netevent(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::netevent*)
   {
      ::netevent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::netevent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("netevent", ::netevent::Class_Version(), "./netevent.hh", 39,
                  typeid(::netevent), DefineBehavior(ptr, ptr),
                  &::netevent::Dictionary, isa_proxy, 0,
                  sizeof(::netevent) );
      instance.SetNew(&new_netevent);
      instance.SetNewArray(&newArray_netevent);
      instance.SetDelete(&delete_netevent);
      instance.SetDeleteArray(&deleteArray_netevent);
      instance.SetDestructor(&destruct_netevent);
      instance.SetStreamerFunc(&streamer_netevent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::netevent*)
   {
      return GenerateInitInstanceLocal((::netevent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::netevent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void regression_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_regression(void *p = 0);
   static void *newArray_regression(Long_t size, void *p);
   static void delete_regression(void *p);
   static void deleteArray_regression(void *p);
   static void destruct_regression(void *p);
   static void streamer_regression(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::regression*)
   {
      ::regression *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::regression >(0);
      static ::ROOT::TGenericClassInfo 
         instance("regression", ::regression::Class_Version(), "./regression.hh", 32,
                  typeid(::regression), DefineBehavior(ptr, ptr),
                  &::regression::Dictionary, isa_proxy, 0,
                  sizeof(::regression) );
      instance.SetNew(&new_regression);
      instance.SetNewArray(&newArray_regression);
      instance.SetDelete(&delete_regression);
      instance.SetDeleteArray(&deleteArray_regression);
      instance.SetDestructor(&destruct_regression);
      instance.SetStreamerFunc(&streamer_regression);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::regression*)
   {
      return GenerateInitInstanceLocal((::regression*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::regression*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void watcLcLTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_watcLcLTime(void *p = 0);
   static void *newArray_watcLcLTime(Long_t size, void *p);
   static void delete_watcLcLTime(void *p);
   static void deleteArray_watcLcLTime(void *p);
   static void destruct_watcLcLTime(void *p);
   static void streamer_watcLcLTime(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wat::Time*)
   {
      ::wat::Time *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::wat::Time >(0);
      static ::ROOT::TGenericClassInfo 
         instance("wat::Time", ::wat::Time::Class_Version(), "./time.hh", 64,
                  typeid(::wat::Time), DefineBehavior(ptr, ptr),
                  &::wat::Time::Dictionary, isa_proxy, 0,
                  sizeof(::wat::Time) );
      instance.SetNew(&new_watcLcLTime);
      instance.SetNewArray(&newArray_watcLcLTime);
      instance.SetDelete(&delete_watcLcLTime);
      instance.SetDeleteArray(&deleteArray_watcLcLTime);
      instance.SetDestructor(&destruct_watcLcLTime);
      instance.SetStreamerFunc(&streamer_watcLcLTime);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wat::Time*)
   {
      return GenerateInitInstanceLocal((::wat::Time*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wat::Time*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace watconstants {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void watconstants_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("watconstants", 0 /*version*/, "./constants.hh", 90,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &watconstants_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void watconstants_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void wavearraylELong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void wavearraylELong64_tgR_Dictionary();
   static void *new_wavearraylELong64_tgR(void *p = 0);
   static void *newArray_wavearraylELong64_tgR(Long_t size, void *p);
   static void delete_wavearraylELong64_tgR(void *p);
   static void deleteArray_wavearraylELong64_tgR(void *p);
   static void destruct_wavearraylELong64_tgR(void *p);
   static void streamer_wavearraylELong64_tgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wavearray<Long64_t>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::wavearray<Long64_t>) == sizeof(::ROOT::Shadow::wavearraylElongsPlonggR));
      ::wavearray<Long64_t> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::wavearray<Long64_t> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("wavearray<Long64_t>", ::wavearray<Long64_t>::Class_Version(), "./wavearray.hh", 37,
                  typeid(::wavearray<Long64_t>), DefineBehavior(ptr, ptr),
                  &wavearraylELong64_tgR_Dictionary, isa_proxy, 1,
                  sizeof(::wavearray<Long64_t>) );
      instance.SetNew(&new_wavearraylELong64_tgR);
      instance.SetNewArray(&newArray_wavearraylELong64_tgR);
      instance.SetDelete(&delete_wavearraylELong64_tgR);
      instance.SetDeleteArray(&deleteArray_wavearraylELong64_tgR);
      instance.SetDestructor(&destruct_wavearraylELong64_tgR);
      instance.SetStreamerFunc(&streamer_wavearraylELong64_tgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wavearray<Long64_t>*)
   {
      return GenerateInitInstanceLocal((::wavearray<Long64_t>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wavearray<Long64_t>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void wavearraylELong64_tgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wavearray<Long64_t>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void wavearraylElonggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void wavearraylElonggR_Dictionary();
   static void *new_wavearraylElonggR(void *p = 0);
   static void *newArray_wavearraylElonggR(Long_t size, void *p);
   static void delete_wavearraylElonggR(void *p);
   static void deleteArray_wavearraylElonggR(void *p);
   static void destruct_wavearraylElonggR(void *p);
   static void streamer_wavearraylElonggR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::wavearray<long>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::wavearray<long>) == sizeof(::ROOT::Shadow::wavearraylElonggR));
      ::wavearray<long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::wavearray<long> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("wavearray<long>", ::wavearray<long>::Class_Version(), "./wavearray.hh", 37,
                  typeid(::wavearray<long>), DefineBehavior(ptr, ptr),
                  &wavearraylElonggR_Dictionary, isa_proxy, 1,
                  sizeof(::wavearray<long>) );
      instance.SetNew(&new_wavearraylElonggR);
      instance.SetNewArray(&newArray_wavearraylElonggR);
      instance.SetDelete(&delete_wavearraylElonggR);
      instance.SetDeleteArray(&deleteArray_wavearraylElonggR);
      instance.SetDestructor(&destruct_wavearraylElonggR);
      instance.SetStreamerFunc(&streamer_wavearraylElonggR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::wavearray<long>*)
   {
      return GenerateInitInstanceLocal((::wavearray<long>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::wavearray<long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void wavearraylElonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::wavearray<long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HaarlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HaarlEfloatgR_Dictionary();
   static void *new_HaarlEfloatgR(void *p = 0);
   static void *newArray_HaarlEfloatgR(Long_t size, void *p);
   static void delete_HaarlEfloatgR(void *p);
   static void deleteArray_HaarlEfloatgR(void *p);
   static void destruct_HaarlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Haar<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Haar<float>) == sizeof(::ROOT::Shadow::HaarlEfloatgR));
      ::Haar<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Haar<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Haar<float>", ::Haar<float>::Class_Version(), "./Haar.hh", 21,
                  typeid(::Haar<float>), DefineBehavior(ptr, ptr),
                  &HaarlEfloatgR_Dictionary, isa_proxy, 4,
                  sizeof(::Haar<float>) );
      instance.SetNew(&new_HaarlEfloatgR);
      instance.SetNewArray(&newArray_HaarlEfloatgR);
      instance.SetDelete(&delete_HaarlEfloatgR);
      instance.SetDeleteArray(&deleteArray_HaarlEfloatgR);
      instance.SetDestructor(&destruct_HaarlEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Haar<float>*)
   {
      return GenerateInitInstanceLocal((::Haar<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Haar<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HaarlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Haar<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void HaarlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HaarlEdoublegR_Dictionary();
   static void *new_HaarlEdoublegR(void *p = 0);
   static void *newArray_HaarlEdoublegR(Long_t size, void *p);
   static void delete_HaarlEdoublegR(void *p);
   static void deleteArray_HaarlEdoublegR(void *p);
   static void destruct_HaarlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Haar<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Haar<double>) == sizeof(::ROOT::Shadow::HaarlEdoublegR));
      ::Haar<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Haar<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Haar<double>", ::Haar<double>::Class_Version(), "./Haar.hh", 21,
                  typeid(::Haar<double>), DefineBehavior(ptr, ptr),
                  &HaarlEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::Haar<double>) );
      instance.SetNew(&new_HaarlEdoublegR);
      instance.SetNewArray(&newArray_HaarlEdoublegR);
      instance.SetDelete(&delete_HaarlEdoublegR);
      instance.SetDeleteArray(&deleteArray_HaarlEdoublegR);
      instance.SetDestructor(&destruct_HaarlEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Haar<double>*)
   {
      return GenerateInitInstanceLocal((::Haar<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Haar<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HaarlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Haar<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void BiorthogonallEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void BiorthogonallEfloatgR_Dictionary();
   static void *new_BiorthogonallEfloatgR(void *p = 0);
   static void *newArray_BiorthogonallEfloatgR(Long_t size, void *p);
   static void delete_BiorthogonallEfloatgR(void *p);
   static void deleteArray_BiorthogonallEfloatgR(void *p);
   static void destruct_BiorthogonallEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Biorthogonal<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Biorthogonal<float>) == sizeof(::ROOT::Shadow::BiorthogonallEfloatgR));
      ::Biorthogonal<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Biorthogonal<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Biorthogonal<float>", ::Biorthogonal<float>::Class_Version(), "./Biorthogonal.hh", 21,
                  typeid(::Biorthogonal<float>), DefineBehavior(ptr, ptr),
                  &BiorthogonallEfloatgR_Dictionary, isa_proxy, 4,
                  sizeof(::Biorthogonal<float>) );
      instance.SetNew(&new_BiorthogonallEfloatgR);
      instance.SetNewArray(&newArray_BiorthogonallEfloatgR);
      instance.SetDelete(&delete_BiorthogonallEfloatgR);
      instance.SetDeleteArray(&deleteArray_BiorthogonallEfloatgR);
      instance.SetDestructor(&destruct_BiorthogonallEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Biorthogonal<float>*)
   {
      return GenerateInitInstanceLocal((::Biorthogonal<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Biorthogonal<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void BiorthogonallEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void BiorthogonallEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void BiorthogonallEdoublegR_Dictionary();
   static void *new_BiorthogonallEdoublegR(void *p = 0);
   static void *newArray_BiorthogonallEdoublegR(Long_t size, void *p);
   static void delete_BiorthogonallEdoublegR(void *p);
   static void deleteArray_BiorthogonallEdoublegR(void *p);
   static void destruct_BiorthogonallEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Biorthogonal<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Biorthogonal<double>) == sizeof(::ROOT::Shadow::BiorthogonallEdoublegR));
      ::Biorthogonal<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Biorthogonal<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Biorthogonal<double>", ::Biorthogonal<double>::Class_Version(), "./Biorthogonal.hh", 21,
                  typeid(::Biorthogonal<double>), DefineBehavior(ptr, ptr),
                  &BiorthogonallEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::Biorthogonal<double>) );
      instance.SetNew(&new_BiorthogonallEdoublegR);
      instance.SetNewArray(&newArray_BiorthogonallEdoublegR);
      instance.SetDelete(&delete_BiorthogonallEdoublegR);
      instance.SetDeleteArray(&deleteArray_BiorthogonallEdoublegR);
      instance.SetDestructor(&destruct_BiorthogonallEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Biorthogonal<double>*)
   {
      return GenerateInitInstanceLocal((::Biorthogonal<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Biorthogonal<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void BiorthogonallEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void DaubechieslEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DaubechieslEfloatgR_Dictionary();
   static void *new_DaubechieslEfloatgR(void *p = 0);
   static void *newArray_DaubechieslEfloatgR(Long_t size, void *p);
   static void delete_DaubechieslEfloatgR(void *p);
   static void deleteArray_DaubechieslEfloatgR(void *p);
   static void destruct_DaubechieslEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Daubechies<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Daubechies<float>) == sizeof(::ROOT::Shadow::DaubechieslEfloatgR));
      ::Daubechies<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Daubechies<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Daubechies<float>", ::Daubechies<float>::Class_Version(), "./Daubechies.hh", 21,
                  typeid(::Daubechies<float>), DefineBehavior(ptr, ptr),
                  &DaubechieslEfloatgR_Dictionary, isa_proxy, 4,
                  sizeof(::Daubechies<float>) );
      instance.SetNew(&new_DaubechieslEfloatgR);
      instance.SetNewArray(&newArray_DaubechieslEfloatgR);
      instance.SetDelete(&delete_DaubechieslEfloatgR);
      instance.SetDeleteArray(&deleteArray_DaubechieslEfloatgR);
      instance.SetDestructor(&destruct_DaubechieslEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Daubechies<float>*)
   {
      return GenerateInitInstanceLocal((::Daubechies<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Daubechies<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DaubechieslEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void DaubechieslEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void DaubechieslEdoublegR_Dictionary();
   static void *new_DaubechieslEdoublegR(void *p = 0);
   static void *newArray_DaubechieslEdoublegR(Long_t size, void *p);
   static void delete_DaubechieslEdoublegR(void *p);
   static void deleteArray_DaubechieslEdoublegR(void *p);
   static void destruct_DaubechieslEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Daubechies<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Daubechies<double>) == sizeof(::ROOT::Shadow::DaubechieslEdoublegR));
      ::Daubechies<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Daubechies<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Daubechies<double>", ::Daubechies<double>::Class_Version(), "./Daubechies.hh", 21,
                  typeid(::Daubechies<double>), DefineBehavior(ptr, ptr),
                  &DaubechieslEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::Daubechies<double>) );
      instance.SetNew(&new_DaubechieslEdoublegR);
      instance.SetNewArray(&newArray_DaubechieslEdoublegR);
      instance.SetDelete(&delete_DaubechieslEdoublegR);
      instance.SetDeleteArray(&deleteArray_DaubechieslEdoublegR);
      instance.SetDestructor(&destruct_DaubechieslEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Daubechies<double>*)
   {
      return GenerateInitInstanceLocal((::Daubechies<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Daubechies<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void DaubechieslEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymletlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymletlEfloatgR_Dictionary();
   static void *new_SymletlEfloatgR(void *p = 0);
   static void *newArray_SymletlEfloatgR(Long_t size, void *p);
   static void delete_SymletlEfloatgR(void *p);
   static void deleteArray_SymletlEfloatgR(void *p);
   static void destruct_SymletlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Symlet<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Symlet<float>) == sizeof(::ROOT::Shadow::SymletlEfloatgR));
      ::Symlet<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Symlet<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Symlet<float>", ::Symlet<float>::Class_Version(), "./Symlet.hh", 21,
                  typeid(::Symlet<float>), DefineBehavior(ptr, ptr),
                  &SymletlEfloatgR_Dictionary, isa_proxy, 4,
                  sizeof(::Symlet<float>) );
      instance.SetNew(&new_SymletlEfloatgR);
      instance.SetNewArray(&newArray_SymletlEfloatgR);
      instance.SetDelete(&delete_SymletlEfloatgR);
      instance.SetDeleteArray(&deleteArray_SymletlEfloatgR);
      instance.SetDestructor(&destruct_SymletlEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Symlet<float>*)
   {
      return GenerateInitInstanceLocal((::Symlet<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Symlet<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymletlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Symlet<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymletlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymletlEdoublegR_Dictionary();
   static void *new_SymletlEdoublegR(void *p = 0);
   static void *newArray_SymletlEdoublegR(Long_t size, void *p);
   static void delete_SymletlEdoublegR(void *p);
   static void deleteArray_SymletlEdoublegR(void *p);
   static void destruct_SymletlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Symlet<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Symlet<double>) == sizeof(::ROOT::Shadow::SymletlEdoublegR));
      ::Symlet<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Symlet<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Symlet<double>", ::Symlet<double>::Class_Version(), "./Symlet.hh", 21,
                  typeid(::Symlet<double>), DefineBehavior(ptr, ptr),
                  &SymletlEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::Symlet<double>) );
      instance.SetNew(&new_SymletlEdoublegR);
      instance.SetNewArray(&newArray_SymletlEdoublegR);
      instance.SetDelete(&delete_SymletlEdoublegR);
      instance.SetDeleteArray(&deleteArray_SymletlEdoublegR);
      instance.SetDestructor(&destruct_SymletlEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Symlet<double>*)
   {
      return GenerateInitInstanceLocal((::Symlet<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Symlet<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymletlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Symlet<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void MeyerlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void MeyerlEfloatgR_Dictionary();
   static void *new_MeyerlEfloatgR(void *p = 0);
   static void *newArray_MeyerlEfloatgR(Long_t size, void *p);
   static void delete_MeyerlEfloatgR(void *p);
   static void deleteArray_MeyerlEfloatgR(void *p);
   static void destruct_MeyerlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Meyer<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Meyer<float>) == sizeof(::ROOT::Shadow::MeyerlEfloatgR));
      ::Meyer<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Meyer<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Meyer<float>", ::Meyer<float>::Class_Version(), "./Meyer.hh", 19,
                  typeid(::Meyer<float>), DefineBehavior(ptr, ptr),
                  &MeyerlEfloatgR_Dictionary, isa_proxy, 4,
                  sizeof(::Meyer<float>) );
      instance.SetNew(&new_MeyerlEfloatgR);
      instance.SetNewArray(&newArray_MeyerlEfloatgR);
      instance.SetDelete(&delete_MeyerlEfloatgR);
      instance.SetDeleteArray(&deleteArray_MeyerlEfloatgR);
      instance.SetDestructor(&destruct_MeyerlEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Meyer<float>*)
   {
      return GenerateInitInstanceLocal((::Meyer<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Meyer<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void MeyerlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Meyer<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void MeyerlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void MeyerlEdoublegR_Dictionary();
   static void *new_MeyerlEdoublegR(void *p = 0);
   static void *newArray_MeyerlEdoublegR(Long_t size, void *p);
   static void delete_MeyerlEdoublegR(void *p);
   static void deleteArray_MeyerlEdoublegR(void *p);
   static void destruct_MeyerlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Meyer<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Meyer<double>) == sizeof(::ROOT::Shadow::MeyerlEdoublegR));
      ::Meyer<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Meyer<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Meyer<double>", ::Meyer<double>::Class_Version(), "./Meyer.hh", 19,
                  typeid(::Meyer<double>), DefineBehavior(ptr, ptr),
                  &MeyerlEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::Meyer<double>) );
      instance.SetNew(&new_MeyerlEdoublegR);
      instance.SetNewArray(&newArray_MeyerlEdoublegR);
      instance.SetDelete(&delete_MeyerlEdoublegR);
      instance.SetDeleteArray(&deleteArray_MeyerlEdoublegR);
      instance.SetDestructor(&destruct_MeyerlEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Meyer<double>*)
   {
      return GenerateInitInstanceLocal((::Meyer<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Meyer<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void MeyerlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Meyer<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void WDMlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void WDMlEfloatgR_Dictionary();
   static void *new_WDMlEfloatgR(void *p = 0);
   static void *newArray_WDMlEfloatgR(Long_t size, void *p);
   static void delete_WDMlEfloatgR(void *p);
   static void deleteArray_WDMlEfloatgR(void *p);
   static void destruct_WDMlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::WDM<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::WDM<float>) == sizeof(::ROOT::Shadow::WDMlEfloatgR));
      ::WDM<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::WDM<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("WDM<float>", ::WDM<float>::Class_Version(), "./WDM.hh", 24,
                  typeid(::WDM<float>), DefineBehavior(ptr, ptr),
                  &WDMlEfloatgR_Dictionary, isa_proxy, 4,
                  sizeof(::WDM<float>) );
      instance.SetNew(&new_WDMlEfloatgR);
      instance.SetNewArray(&newArray_WDMlEfloatgR);
      instance.SetDelete(&delete_WDMlEfloatgR);
      instance.SetDeleteArray(&deleteArray_WDMlEfloatgR);
      instance.SetDestructor(&destruct_WDMlEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::WDM<float>*)
   {
      return GenerateInitInstanceLocal((::WDM<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::WDM<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void WDMlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::WDM<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmArraylEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmArraylEintgR_Dictionary();
   static void *new_SymmArraylEintgR(void *p = 0);
   static void *newArray_SymmArraylEintgR(Long_t size, void *p);
   static void delete_SymmArraylEintgR(void *p);
   static void deleteArray_SymmArraylEintgR(void *p);
   static void destruct_SymmArraylEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmArray<int>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmArray<int>) == sizeof(::ROOT::Shadow::SymmArraylEintgR));
      ::SymmArray<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmArray<int> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmArray<int>", ::SymmArray<int>::Class_Version(), "./SymmArray.hh", 12,
                  typeid(::SymmArray<int>), DefineBehavior(ptr, ptr),
                  &SymmArraylEintgR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmArray<int>) );
      instance.SetNew(&new_SymmArraylEintgR);
      instance.SetNewArray(&newArray_SymmArraylEintgR);
      instance.SetDelete(&delete_SymmArraylEintgR);
      instance.SetDeleteArray(&deleteArray_SymmArraylEintgR);
      instance.SetDestructor(&destruct_SymmArraylEintgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmArray<int>*)
   {
      return GenerateInitInstanceLocal((::SymmArray<int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmArray<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmArraylEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmArraylEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmArraylEfloatgR_Dictionary();
   static void *new_SymmArraylEfloatgR(void *p = 0);
   static void *newArray_SymmArraylEfloatgR(Long_t size, void *p);
   static void delete_SymmArraylEfloatgR(void *p);
   static void deleteArray_SymmArraylEfloatgR(void *p);
   static void destruct_SymmArraylEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmArray<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmArray<float>) == sizeof(::ROOT::Shadow::SymmArraylEfloatgR));
      ::SymmArray<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmArray<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmArray<float>", ::SymmArray<float>::Class_Version(), "./SymmArray.hh", 12,
                  typeid(::SymmArray<float>), DefineBehavior(ptr, ptr),
                  &SymmArraylEfloatgR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmArray<float>) );
      instance.SetNew(&new_SymmArraylEfloatgR);
      instance.SetNewArray(&newArray_SymmArraylEfloatgR);
      instance.SetDelete(&delete_SymmArraylEfloatgR);
      instance.SetDeleteArray(&deleteArray_SymmArraylEfloatgR);
      instance.SetDestructor(&destruct_SymmArraylEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmArray<float>*)
   {
      return GenerateInitInstanceLocal((::SymmArray<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmArray<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmArraylEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmArraySSElEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmArraySSElEintgR_Dictionary();
   static void *new_SymmArraySSElEintgR(void *p = 0);
   static void *newArray_SymmArraySSElEintgR(Long_t size, void *p);
   static void delete_SymmArraySSElEintgR(void *p);
   static void deleteArray_SymmArraySSElEintgR(void *p);
   static void destruct_SymmArraySSElEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmArraySSE<int>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmArraySSE<int>) == sizeof(::ROOT::Shadow::SymmArraySSElEintgR));
      ::SymmArraySSE<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmArraySSE<int> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmArraySSE<int>", ::SymmArraySSE<int>::Class_Version(), "./SymmArraySSE.hh", 12,
                  typeid(::SymmArraySSE<int>), DefineBehavior(ptr, ptr),
                  &SymmArraySSElEintgR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmArraySSE<int>) );
      instance.SetNew(&new_SymmArraySSElEintgR);
      instance.SetNewArray(&newArray_SymmArraySSElEintgR);
      instance.SetDelete(&delete_SymmArraySSElEintgR);
      instance.SetDeleteArray(&deleteArray_SymmArraySSElEintgR);
      instance.SetDestructor(&destruct_SymmArraySSElEintgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmArraySSE<int>*)
   {
      return GenerateInitInstanceLocal((::SymmArraySSE<int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmArraySSE<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmArraySSElEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmArraySSElEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmArraySSElEdoublegR_Dictionary();
   static void *new_SymmArraySSElEdoublegR(void *p = 0);
   static void *newArray_SymmArraySSElEdoublegR(Long_t size, void *p);
   static void delete_SymmArraySSElEdoublegR(void *p);
   static void deleteArray_SymmArraySSElEdoublegR(void *p);
   static void destruct_SymmArraySSElEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmArraySSE<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmArraySSE<double>) == sizeof(::ROOT::Shadow::SymmArraySSElEdoublegR));
      ::SymmArraySSE<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmArraySSE<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmArraySSE<double>", ::SymmArraySSE<double>::Class_Version(), "./SymmArraySSE.hh", 12,
                  typeid(::SymmArraySSE<double>), DefineBehavior(ptr, ptr),
                  &SymmArraySSElEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmArraySSE<double>) );
      instance.SetNew(&new_SymmArraySSElEdoublegR);
      instance.SetNewArray(&newArray_SymmArraySSElEdoublegR);
      instance.SetDelete(&delete_SymmArraySSElEdoublegR);
      instance.SetDeleteArray(&deleteArray_SymmArraySSElEdoublegR);
      instance.SetDestructor(&destruct_SymmArraySSElEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmArraySSE<double>*)
   {
      return GenerateInitInstanceLocal((::SymmArraySSE<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmArraySSE<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmArraySSElEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmObjArraylESymmArraylEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmObjArraylESymmArraylEintgRsPgR_Dictionary();
   static void *new_SymmObjArraylESymmArraylEintgRsPgR(void *p = 0);
   static void *newArray_SymmObjArraylESymmArraylEintgRsPgR(Long_t size, void *p);
   static void delete_SymmObjArraylESymmArraylEintgRsPgR(void *p);
   static void deleteArray_SymmObjArraylESymmArraylEintgRsPgR(void *p);
   static void destruct_SymmObjArraylESymmArraylEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmObjArray<SymmArray<int> >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmObjArray<SymmArray<int> >) == sizeof(::ROOT::Shadow::SymmObjArraylESymmArraylEintgRsPgR));
      ::SymmObjArray<SymmArray<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmObjArray<SymmArray<int> > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmObjArray<SymmArray<int> >", ::SymmObjArray<SymmArray<int> >::Class_Version(), "./SymmObjArray.hh", 12,
                  typeid(::SymmObjArray<SymmArray<int> >), DefineBehavior(ptr, ptr),
                  &SymmObjArraylESymmArraylEintgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmObjArray<SymmArray<int> >) );
      instance.SetNew(&new_SymmObjArraylESymmArraylEintgRsPgR);
      instance.SetNewArray(&newArray_SymmObjArraylESymmArraylEintgRsPgR);
      instance.SetDelete(&delete_SymmObjArraylESymmArraylEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_SymmObjArraylESymmArraylEintgRsPgR);
      instance.SetDestructor(&destruct_SymmObjArraylESymmArraylEintgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmObjArray<SymmArray<int> >*)
   {
      return GenerateInitInstanceLocal((::SymmObjArray<SymmArray<int> >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmObjArraylESymmArraylEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmObjArraylESymmArraylEfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmObjArraylESymmArraylEfloatgRsPgR_Dictionary();
   static void *new_SymmObjArraylESymmArraylEfloatgRsPgR(void *p = 0);
   static void *newArray_SymmObjArraylESymmArraylEfloatgRsPgR(Long_t size, void *p);
   static void delete_SymmObjArraylESymmArraylEfloatgRsPgR(void *p);
   static void deleteArray_SymmObjArraylESymmArraylEfloatgRsPgR(void *p);
   static void destruct_SymmObjArraylESymmArraylEfloatgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmObjArray<SymmArray<float> >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmObjArray<SymmArray<float> >) == sizeof(::ROOT::Shadow::SymmObjArraylESymmArraylEfloatgRsPgR));
      ::SymmObjArray<SymmArray<float> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmObjArray<SymmArray<float> > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmObjArray<SymmArray<float> >", ::SymmObjArray<SymmArray<float> >::Class_Version(), "./SymmObjArray.hh", 12,
                  typeid(::SymmObjArray<SymmArray<float> >), DefineBehavior(ptr, ptr),
                  &SymmObjArraylESymmArraylEfloatgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmObjArray<SymmArray<float> >) );
      instance.SetNew(&new_SymmObjArraylESymmArraylEfloatgRsPgR);
      instance.SetNewArray(&newArray_SymmObjArraylESymmArraylEfloatgRsPgR);
      instance.SetDelete(&delete_SymmObjArraylESymmArraylEfloatgRsPgR);
      instance.SetDeleteArray(&deleteArray_SymmObjArraylESymmArraylEfloatgRsPgR);
      instance.SetDestructor(&destruct_SymmObjArraylESymmArraylEfloatgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmObjArray<SymmArray<float> >*)
   {
      return GenerateInitInstanceLocal((::SymmObjArray<SymmArray<float> >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<float> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmObjArraylESymmArraylEfloatgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<float> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmObjArraylESymmArraylEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmObjArraylESymmArraylEdoublegRsPgR_Dictionary();
   static void *new_SymmObjArraylESymmArraylEdoublegRsPgR(void *p = 0);
   static void *newArray_SymmObjArraylESymmArraylEdoublegRsPgR(Long_t size, void *p);
   static void delete_SymmObjArraylESymmArraylEdoublegRsPgR(void *p);
   static void deleteArray_SymmObjArraylESymmArraylEdoublegRsPgR(void *p);
   static void destruct_SymmObjArraylESymmArraylEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmObjArray<SymmArray<double> >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmObjArray<SymmArray<double> >) == sizeof(::ROOT::Shadow::SymmObjArraylESymmArraylEdoublegRsPgR));
      ::SymmObjArray<SymmArray<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmObjArray<SymmArray<double> > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmObjArray<SymmArray<double> >", ::SymmObjArray<SymmArray<double> >::Class_Version(), "./SymmObjArray.hh", 12,
                  typeid(::SymmObjArray<SymmArray<double> >), DefineBehavior(ptr, ptr),
                  &SymmObjArraylESymmArraylEdoublegRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmObjArray<SymmArray<double> >) );
      instance.SetNew(&new_SymmObjArraylESymmArraylEdoublegRsPgR);
      instance.SetNewArray(&newArray_SymmObjArraylESymmArraylEdoublegRsPgR);
      instance.SetDelete(&delete_SymmObjArraylESymmArraylEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_SymmObjArraylESymmArraylEdoublegRsPgR);
      instance.SetDestructor(&destruct_SymmObjArraylESymmArraylEdoublegRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmObjArray<SymmArray<double> >*)
   {
      return GenerateInitInstanceLocal((::SymmObjArray<SymmArray<double> >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmObjArraylESymmArraylEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmObjArraylESymmArraySSElEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmObjArraylESymmArraySSElEintgRsPgR_Dictionary();
   static void *new_SymmObjArraylESymmArraySSElEintgRsPgR(void *p = 0);
   static void *newArray_SymmObjArraylESymmArraySSElEintgRsPgR(Long_t size, void *p);
   static void delete_SymmObjArraylESymmArraySSElEintgRsPgR(void *p);
   static void deleteArray_SymmObjArraylESymmArraySSElEintgRsPgR(void *p);
   static void destruct_SymmObjArraylESymmArraySSElEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmObjArray<SymmArraySSE<int> >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmObjArray<SymmArraySSE<int> >) == sizeof(::ROOT::Shadow::SymmObjArraylESymmArraySSElEintgRsPgR));
      ::SymmObjArray<SymmArraySSE<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmObjArray<SymmArraySSE<int> > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmObjArray<SymmArraySSE<int> >", ::SymmObjArray<SymmArraySSE<int> >::Class_Version(), "./SymmObjArray.hh", 12,
                  typeid(::SymmObjArray<SymmArraySSE<int> >), DefineBehavior(ptr, ptr),
                  &SymmObjArraylESymmArraySSElEintgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmObjArray<SymmArraySSE<int> >) );
      instance.SetNew(&new_SymmObjArraylESymmArraySSElEintgRsPgR);
      instance.SetNewArray(&newArray_SymmObjArraylESymmArraySSElEintgRsPgR);
      instance.SetDelete(&delete_SymmObjArraylESymmArraySSElEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_SymmObjArraylESymmArraySSElEintgRsPgR);
      instance.SetDestructor(&destruct_SymmObjArraylESymmArraySSElEintgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmObjArray<SymmArraySSE<int> >*)
   {
      return GenerateInitInstanceLocal((::SymmObjArray<SymmArraySSE<int> >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmObjArraylESymmArraySSElEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SymmObjArraylESymmArraySSElEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SymmObjArraylESymmArraySSElEdoublegRsPgR_Dictionary();
   static void *new_SymmObjArraylESymmArraySSElEdoublegRsPgR(void *p = 0);
   static void *newArray_SymmObjArraylESymmArraySSElEdoublegRsPgR(Long_t size, void *p);
   static void delete_SymmObjArraylESymmArraySSElEdoublegRsPgR(void *p);
   static void deleteArray_SymmObjArraylESymmArraySSElEdoublegRsPgR(void *p);
   static void destruct_SymmObjArraylESymmArraySSElEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SymmObjArray<SymmArraySSE<double> >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SymmObjArray<SymmArraySSE<double> >) == sizeof(::ROOT::Shadow::SymmObjArraylESymmArraySSElEdoublegRsPgR));
      ::SymmObjArray<SymmArraySSE<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SymmObjArray<SymmArraySSE<double> > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SymmObjArray<SymmArraySSE<double> >", ::SymmObjArray<SymmArraySSE<double> >::Class_Version(), "./SymmObjArray.hh", 12,
                  typeid(::SymmObjArray<SymmArraySSE<double> >), DefineBehavior(ptr, ptr),
                  &SymmObjArraylESymmArraySSElEdoublegRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::SymmObjArray<SymmArraySSE<double> >) );
      instance.SetNew(&new_SymmObjArraylESymmArraySSElEdoublegRsPgR);
      instance.SetNewArray(&newArray_SymmObjArraylESymmArraySSElEdoublegRsPgR);
      instance.SetDelete(&delete_SymmObjArraylESymmArraySSElEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_SymmObjArraylESymmArraySSElEdoublegRsPgR);
      instance.SetDestructor(&destruct_SymmObjArraylESymmArraySSElEdoublegRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SymmObjArray<SymmArraySSE<double> >*)
   {
      return GenerateInitInstanceLocal((::SymmObjArray<SymmArraySSE<double> >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SymmObjArraylESymmArraySSElEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SSerieslEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SSerieslEfloatgR_Dictionary();
   static void *new_SSerieslEfloatgR(void *p = 0);
   static void *newArray_SSerieslEfloatgR(Long_t size, void *p);
   static void delete_SSerieslEfloatgR(void *p);
   static void deleteArray_SSerieslEfloatgR(void *p);
   static void destruct_SSerieslEfloatgR(void *p);
   static void streamer_SSerieslEfloatgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SSeries<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SSeries<float>) == sizeof(::ROOT::Shadow::SSerieslEfloatgR));
      ::SSeries<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SSeries<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SSeries<float>", ::SSeries<float>::Class_Version(), "./sseries.hh", 20,
                  typeid(::SSeries<float>), DefineBehavior(ptr, ptr),
                  &SSerieslEfloatgR_Dictionary, isa_proxy, 1,
                  sizeof(::SSeries<float>) );
      instance.SetNew(&new_SSerieslEfloatgR);
      instance.SetNewArray(&newArray_SSerieslEfloatgR);
      instance.SetDelete(&delete_SSerieslEfloatgR);
      instance.SetDeleteArray(&deleteArray_SSerieslEfloatgR);
      instance.SetDestructor(&destruct_SSerieslEfloatgR);
      instance.SetStreamerFunc(&streamer_SSerieslEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SSeries<float>*)
   {
      return GenerateInitInstanceLocal((::SSeries<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SSeries<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SSerieslEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SSeries<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
TClass *Wavelet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Wavelet::Class_Name()
{
   return "Wavelet";
}

//______________________________________________________________________________
const char *Wavelet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Wavelet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Wavelet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Wavelet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Wavelet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Wavelet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Wavelet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Wavelet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *wavecomplex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *wavecomplex::Class_Name()
{
   return "wavecomplex";
}

//______________________________________________________________________________
const char *wavecomplex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavecomplex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int wavecomplex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavecomplex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void wavecomplex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavecomplex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *wavecomplex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavecomplex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *netpixel::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *netpixel::Class_Name()
{
   return "netpixel";
}

//______________________________________________________________________________
const char *netpixel::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::netpixel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int netpixel::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::netpixel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void netpixel::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::netpixel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *netpixel::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::netpixel*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *wavearray<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *wavearray<float>::Class_Name()
{
   return "wavearray<float>";
}

//______________________________________________________________________________
template <> const char *wavearray<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int wavearray<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void wavearray<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *wavearray<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *wavearray<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *wavearray<double>::Class_Name()
{
   return "wavearray<double>";
}

//______________________________________________________________________________
template <> const char *wavearray<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int wavearray<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void wavearray<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *wavearray<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *network::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *network::Class_Name()
{
   return "network";
}

//______________________________________________________________________________
const char *network::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::network*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int network::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::network*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void network::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::network*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *network::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::network*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *clusterdata::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *clusterdata::Class_Name()
{
   return "clusterdata";
}

//______________________________________________________________________________
const char *clusterdata::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::clusterdata*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int clusterdata::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::clusterdata*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void clusterdata::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::clusterdata*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *clusterdata::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::clusterdata*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *netcluster::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *netcluster::Class_Name()
{
   return "netcluster";
}

//______________________________________________________________________________
const char *netcluster::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::netcluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int netcluster::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::netcluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void netcluster::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::netcluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *netcluster::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::netcluster*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *WSeries<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *WSeries<double>::Class_Name()
{
   return "WSeries<double>";
}

//______________________________________________________________________________
template <> const char *WSeries<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WSeries<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int WSeries<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WSeries<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void WSeries<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WSeries<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *WSeries<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WSeries<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *WSeries<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *WSeries<float>::Class_Name()
{
   return "WSeries<float>";
}

//______________________________________________________________________________
template <> const char *WSeries<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WSeries<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int WSeries<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WSeries<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void WSeries<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WSeries<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *WSeries<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WSeries<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *WaveDWT<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *WaveDWT<float>::Class_Name()
{
   return "WaveDWT<float>";
}

//______________________________________________________________________________
template <> const char *WaveDWT<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int WaveDWT<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void WaveDWT<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *WaveDWT<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SSeries<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SSeries<double>::Class_Name()
{
   return "SSeries<double>";
}

//______________________________________________________________________________
template <> const char *SSeries<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SSeries<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SSeries<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SSeries<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SSeries<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SSeries<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SSeries<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SSeries<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *WaveDWT<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *WaveDWT<double>::Class_Name()
{
   return "WaveDWT<double>";
}

//______________________________________________________________________________
template <> const char *WaveDWT<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int WaveDWT<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void WaveDWT<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *WaveDWT<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *skymap::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *skymap::Class_Name()
{
   return "skymap";
}

//______________________________________________________________________________
const char *skymap::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::skymap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int skymap::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::skymap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void skymap::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::skymap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *skymap::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::skymap*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *wavearray<short>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *wavearray<short>::Class_Name()
{
   return "wavearray<short>";
}

//______________________________________________________________________________
template <> const char *wavearray<short>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<short>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int wavearray<short>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<short>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void wavearray<short>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<short>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *wavearray<short>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<short>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *wavearray<int>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *wavearray<int>::Class_Name()
{
   return "wavearray<int>";
}

//______________________________________________________________________________
template <> const char *wavearray<int>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<int>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int wavearray<int>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<int>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void wavearray<int>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<int>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *wavearray<int>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<int>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmArraySSE<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmArraySSE<float>::Class_Name()
{
   return "SymmArraySSE<float>";
}

//______________________________________________________________________________
template <> const char *SymmArraySSE<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmArraySSE<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmArraySSE<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmArraySSE<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *detector::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *detector::Class_Name()
{
   return "detector";
}

//______________________________________________________________________________
const char *detector::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::detector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int detector::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::detector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void detector::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::detector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *detector::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::detector*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *monster::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *monster::Class_Name()
{
   return "monster";
}

//______________________________________________________________________________
const char *monster::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::monster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int monster::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::monster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void monster::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::monster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *monster::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::monster*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *WDM<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *WDM<double>::Class_Name()
{
   return "WDM<double>";
}

//______________________________________________________________________________
template <> const char *WDM<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WDM<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int WDM<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WDM<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void WDM<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WDM<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *WDM<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WDM<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmArray<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmArray<double>::Class_Name()
{
   return "SymmArray<double>";
}

//______________________________________________________________________________
template <> const char *SymmArray<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmArray<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmArray<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmArray<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArraySSE<float> >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArraySSE<float> >::Class_Name()
{
   return "SymmObjArray<SymmArraySSE<float> >";
}

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArraySSE<float> >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<float> >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmObjArray<SymmArraySSE<float> >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<float> >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmObjArray<SymmArraySSE<float> >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<float> >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArraySSE<float> >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<float> >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *injection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *injection::Class_Name()
{
   return "injection";
}

//______________________________________________________________________________
const char *injection::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::injection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int injection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::injection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void injection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::injection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *injection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::injection*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *watplot::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *watplot::Class_Name()
{
   return "watplot";
}

//______________________________________________________________________________
const char *watplot::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::watplot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int watplot::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::watplot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void watplot::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::watplot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *watplot::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::watplot*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *wavecor::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *wavecor::Class_Name()
{
   return "wavecor";
}

//______________________________________________________________________________
const char *wavecor::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavecor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int wavecor::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavecor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void wavecor::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavecor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *wavecor::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavecor*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *WaveRDC::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *WaveRDC::Class_Name()
{
   return "WaveRDC";
}

//______________________________________________________________________________
const char *WaveRDC::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WaveRDC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int WaveRDC::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WaveRDC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void WaveRDC::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WaveRDC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *WaveRDC::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WaveRDC*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *wavearray<unsigned int>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *wavearray<unsigned int>::Class_Name()
{
   return "wavearray<unsigned int>";
}

//______________________________________________________________________________
template <> const char *wavearray<unsigned int>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<unsigned int>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int wavearray<unsigned int>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<unsigned int>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void wavearray<unsigned int>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<unsigned int>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *wavearray<unsigned int>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<unsigned int>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *netevent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *netevent::Class_Name()
{
   return "netevent";
}

//______________________________________________________________________________
const char *netevent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::netevent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int netevent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::netevent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void netevent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::netevent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *netevent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::netevent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *regression::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *regression::Class_Name()
{
   return "regression";
}

//______________________________________________________________________________
const char *regression::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::regression*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int regression::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::regression*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void regression::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::regression*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *regression::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::regression*)0x0)->GetClass();
   return fgIsA;
}

      namespace wat {
//______________________________________________________________________________
TClass *Time::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Time::Class_Name()
{
   return "wat::Time";
}

//______________________________________________________________________________
const char *Time::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wat::Time*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Time::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wat::Time*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Time::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wat::Time*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Time::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wat::Time*)0x0)->GetClass();
   return fgIsA;
}

} // namespace wat
//______________________________________________________________________________
template <> TClass *wavearray<long long>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *wavearray<long long>::Class_Name()
{
   return "wavearray<long long>";
}

//______________________________________________________________________________
template <> const char *wavearray<long long>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<long long>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int wavearray<long long>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<long long>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void wavearray<long long>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<long long>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *wavearray<long long>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<long long>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *wavearray<long>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *wavearray<long>::Class_Name()
{
   return "wavearray<long>";
}

//______________________________________________________________________________
template <> const char *wavearray<long>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<long>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int wavearray<long>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::wavearray<long>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void wavearray<long>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<long>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *wavearray<long>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<long>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Haar<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Haar<float>::Class_Name()
{
   return "Haar<float>";
}

//______________________________________________________________________________
template <> const char *Haar<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Haar<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Haar<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Haar<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Haar<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Haar<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Haar<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Haar<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Haar<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Haar<double>::Class_Name()
{
   return "Haar<double>";
}

//______________________________________________________________________________
template <> const char *Haar<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Haar<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Haar<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Haar<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Haar<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Haar<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Haar<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Haar<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Biorthogonal<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Biorthogonal<float>::Class_Name()
{
   return "Biorthogonal<float>";
}

//______________________________________________________________________________
template <> const char *Biorthogonal<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Biorthogonal<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Biorthogonal<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Biorthogonal<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Biorthogonal<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Biorthogonal<double>::Class_Name()
{
   return "Biorthogonal<double>";
}

//______________________________________________________________________________
template <> const char *Biorthogonal<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Biorthogonal<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Biorthogonal<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Biorthogonal<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Daubechies<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Daubechies<float>::Class_Name()
{
   return "Daubechies<float>";
}

//______________________________________________________________________________
template <> const char *Daubechies<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Daubechies<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Daubechies<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Daubechies<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Daubechies<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Daubechies<double>::Class_Name()
{
   return "Daubechies<double>";
}

//______________________________________________________________________________
template <> const char *Daubechies<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Daubechies<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Daubechies<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Daubechies<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Symlet<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Symlet<float>::Class_Name()
{
   return "Symlet<float>";
}

//______________________________________________________________________________
template <> const char *Symlet<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Symlet<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Symlet<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Symlet<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Symlet<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Symlet<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Symlet<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Symlet<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Symlet<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Symlet<double>::Class_Name()
{
   return "Symlet<double>";
}

//______________________________________________________________________________
template <> const char *Symlet<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Symlet<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Symlet<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Symlet<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Symlet<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Symlet<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Symlet<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Symlet<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Meyer<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Meyer<float>::Class_Name()
{
   return "Meyer<float>";
}

//______________________________________________________________________________
template <> const char *Meyer<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Meyer<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Meyer<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Meyer<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Meyer<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Meyer<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Meyer<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Meyer<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Meyer<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Meyer<double>::Class_Name()
{
   return "Meyer<double>";
}

//______________________________________________________________________________
template <> const char *Meyer<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Meyer<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Meyer<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Meyer<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Meyer<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Meyer<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Meyer<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Meyer<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *WDM<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *WDM<float>::Class_Name()
{
   return "WDM<float>";
}

//______________________________________________________________________________
template <> const char *WDM<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WDM<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int WDM<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::WDM<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void WDM<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WDM<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *WDM<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::WDM<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmArray<int>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmArray<int>::Class_Name()
{
   return "SymmArray<int>";
}

//______________________________________________________________________________
template <> const char *SymmArray<int>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<int>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmArray<int>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<int>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmArray<int>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<int>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmArray<int>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<int>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmArray<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmArray<float>::Class_Name()
{
   return "SymmArray<float>";
}

//______________________________________________________________________________
template <> const char *SymmArray<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmArray<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmArray<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmArray<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmArraySSE<int>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmArraySSE<int>::Class_Name()
{
   return "SymmArraySSE<int>";
}

//______________________________________________________________________________
template <> const char *SymmArraySSE<int>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<int>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmArraySSE<int>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<int>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmArraySSE<int>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<int>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmArraySSE<int>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<int>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmArraySSE<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmArraySSE<double>::Class_Name()
{
   return "SymmArraySSE<double>";
}

//______________________________________________________________________________
template <> const char *SymmArraySSE<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmArraySSE<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmArraySSE<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmArraySSE<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArray<int> >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArray<int> >::Class_Name()
{
   return "SymmObjArray<SymmArray<int> >";
}

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArray<int> >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<int> >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmObjArray<SymmArray<int> >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<int> >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmObjArray<SymmArray<int> >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<int> >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArray<int> >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<int> >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArray<float> >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArray<float> >::Class_Name()
{
   return "SymmObjArray<SymmArray<float> >";
}

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArray<float> >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<float> >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmObjArray<SymmArray<float> >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<float> >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmObjArray<SymmArray<float> >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<float> >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArray<float> >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<float> >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArray<double> >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArray<double> >::Class_Name()
{
   return "SymmObjArray<SymmArray<double> >";
}

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArray<double> >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<double> >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmObjArray<SymmArray<double> >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<double> >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmObjArray<SymmArray<double> >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<double> >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArray<double> >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<double> >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArraySSE<int> >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArraySSE<int> >::Class_Name()
{
   return "SymmObjArray<SymmArraySSE<int> >";
}

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArraySSE<int> >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<int> >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmObjArray<SymmArraySSE<int> >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<int> >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmObjArray<SymmArraySSE<int> >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<int> >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArraySSE<int> >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<int> >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArraySSE<double> >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArraySSE<double> >::Class_Name()
{
   return "SymmObjArray<SymmArraySSE<double> >";
}

//______________________________________________________________________________
template <> const char *SymmObjArray<SymmArraySSE<double> >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<double> >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SymmObjArray<SymmArraySSE<double> >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<double> >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SymmObjArray<SymmArraySSE<double> >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<double> >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SymmObjArray<SymmArraySSE<double> >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<double> >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SSeries<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SSeries<float>::Class_Name()
{
   return "SSeries<float>";
}

//______________________________________________________________________________
template <> const char *SSeries<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SSeries<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SSeries<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SSeries<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SSeries<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SSeries<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SSeries<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SSeries<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
namespace ROOT {
   void slice_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class slice.
      typedef ::ROOT::Shadow::slice ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::slice*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_M_off", &sobj->_M_off);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_M_sz", &sobj->_M_sz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_M_st", &sobj->_M_st);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_slice(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::slice : new ::slice;
   }
   static void *newArray_slice(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::slice[nElements] : new ::slice[nElements];
   }
   // Wrapper around operator delete
   static void delete_slice(void *p) {
      delete ((::slice*)p);
   }
   static void deleteArray_slice(void *p) {
      delete [] ((::slice*)p);
   }
   static void destruct_slice(void *p) {
      typedef ::slice current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::slice

namespace ROOT {
   // Wrappers around operator new
   static void *new_wavepixel(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wavepixel : new ::wavepixel;
   }
   static void *newArray_wavepixel(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wavepixel[nElements] : new ::wavepixel[nElements];
   }
   // Wrapper around operator delete
   static void delete_wavepixel(void *p) {
      delete ((::wavepixel*)p);
   }
   static void deleteArray_wavepixel(void *p) {
      delete [] ((::wavepixel*)p);
   }
   static void destruct_wavepixel(void *p) {
      typedef ::wavepixel current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::wavepixel

//______________________________________________________________________________
void netpixel::Streamer(TBuffer &R__b)
{
   // Stream an object of class netpixel.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(netpixel::Class(),this);
   } else {
      R__b.WriteClassBuffer(netpixel::Class(),this);
   }
}

//______________________________________________________________________________
void netpixel::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class netpixel.
      TClass *R__cl = ::netpixel::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusterID", &clusterID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frequency", &frequency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layers", &layers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rate", &rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likelihood", &likelihood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ellipticity", &ellipticity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "polarisation", &polarisation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "core", &core);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", (void*)&data);
      R__insp.InspectMember("vector<pixdata>", (void*)&data, "data.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdAmp", (void*)&tdAmp);
      R__insp.InspectMember("vector<wavearray<float> >", (void*)&tdAmp, "tdAmp.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "neighbors", (void*)&neighbors);
      R__insp.InspectMember("vector<int>", (void*)&neighbors, "neighbors.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_netpixel(void *p) {
      return  p ? new(p) ::netpixel : new ::netpixel;
   }
   static void *newArray_netpixel(Long_t nElements, void *p) {
      return p ? new(p) ::netpixel[nElements] : new ::netpixel[nElements];
   }
   // Wrapper around operator delete
   static void delete_netpixel(void *p) {
      delete ((::netpixel*)p);
   }
   static void deleteArray_netpixel(void *p) {
      delete [] ((::netpixel*)p);
   }
   static void destruct_netpixel(void *p) {
      typedef ::netpixel current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::netpixel

//______________________________________________________________________________
void wavecomplex::Streamer(TBuffer &R__b)
{
   // Stream an object of class wavecomplex.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> re;
      R__b >> im;
      R__b.CheckByteCount(R__s, R__c, wavecomplex::IsA());
   } else {
      R__c = R__b.WriteVersion(wavecomplex::IsA(), kTRUE);
      R__b << re;
      R__b << im;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void wavecomplex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class wavecomplex.
      TClass *R__cl = ::wavecomplex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "re", &re);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "im", &im);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_wavecomplex(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wavecomplex : new ::wavecomplex;
   }
   static void *newArray_wavecomplex(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wavecomplex[nElements] : new ::wavecomplex[nElements];
   }
   // Wrapper around operator delete
   static void delete_wavecomplex(void *p) {
      delete ((::wavecomplex*)p);
   }
   static void deleteArray_wavecomplex(void *p) {
      delete [] ((::wavecomplex*)p);
   }
   static void destruct_wavecomplex(void *p) {
      typedef ::wavecomplex current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_wavecomplex(TBuffer &buf, void *obj) {
      ((::wavecomplex*)obj)->::wavecomplex::Streamer(buf);
   }
} // end of namespace ROOT for class ::wavecomplex

namespace ROOT {
   // Wrappers around operator new
   static void *new_watcLcLAlm_Base(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wat::Alm_Base : new ::wat::Alm_Base;
   }
   static void *newArray_watcLcLAlm_Base(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wat::Alm_Base[nElements] : new ::wat::Alm_Base[nElements];
   }
   // Wrapper around operator delete
   static void delete_watcLcLAlm_Base(void *p) {
      delete ((::wat::Alm_Base*)p);
   }
   static void deleteArray_watcLcLAlm_Base(void *p) {
      delete [] ((::wat::Alm_Base*)p);
   }
   static void destruct_watcLcLAlm_Base(void *p) {
      typedef ::wat::Alm_Base current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::wat::Alm_Base

namespace ROOT {
   // Wrappers around operator new
   static void *new_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wat::Alm_Template<complex<double> > : new ::wat::Alm_Template<complex<double> >;
   }
   static void *newArray_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wat::Alm_Template<complex<double> >[nElements] : new ::wat::Alm_Template<complex<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(void *p) {
      delete ((::wat::Alm_Template<complex<double> >*)p);
   }
   static void deleteArray_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(void *p) {
      delete [] ((::wat::Alm_Template<complex<double> >*)p);
   }
   static void destruct_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(void *p) {
      typedef ::wat::Alm_Template<complex<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::wat::Alm_Template<complex<double> >

namespace ROOT {
   // Wrappers around operator new
   static void *new_watcLcLAlm(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wat::Alm : new ::wat::Alm;
   }
   static void *newArray_watcLcLAlm(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wat::Alm[nElements] : new ::wat::Alm[nElements];
   }
   // Wrapper around operator delete
   static void delete_watcLcLAlm(void *p) {
      delete ((::wat::Alm*)p);
   }
   static void deleteArray_watcLcLAlm(void *p) {
      delete [] ((::wat::Alm*)p);
   }
   static void destruct_watcLcLAlm(void *p) {
      typedef ::wat::Alm current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::wat::Alm

//______________________________________________________________________________
void Wavelet::Streamer(TBuffer &R__b)
{
   // Stream an object of class Wavelet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Wavelet::Class(),this);
   } else {
      R__b.WriteClassBuffer(Wavelet::Class(),this);
   }
}

//______________________________________________________________________________
void Wavelet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Wavelet.
      TClass *R__cl = ::Wavelet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_WaveType", &m_WaveType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_Border", &m_Border);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_TreeType", &m_TreeType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_Level", &m_Level);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_Layer", &m_Layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_H", &m_H);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_L", &m_L);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_Heterodine", &m_Heterodine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_Parity", &m_Parity);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Wavelet(void *p) {
      return  p ? new(p) ::Wavelet : new ::Wavelet;
   }
   static void *newArray_Wavelet(Long_t nElements, void *p) {
      return p ? new(p) ::Wavelet[nElements] : new ::Wavelet[nElements];
   }
   // Wrapper around operator delete
   static void delete_Wavelet(void *p) {
      delete ((::Wavelet*)p);
   }
   static void deleteArray_Wavelet(void *p) {
      delete [] ((::Wavelet*)p);
   }
   static void destruct_Wavelet(void *p) {
      typedef ::Wavelet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Wavelet

//______________________________________________________________________________
namespace ROOT {
   void wavearraylELong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class wavearray<long long>.
      typedef ::ROOT::Shadow::wavearraylElongsPlonggR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<long long>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &sobj->data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rate", &sobj->Rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Start", &sobj->Start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Stop", &sobj->Stop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edge", &sobj->Edge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Slice", (void*)&sobj->Slice);
      R__insp.InspectMember("slice", (void*)&sobj->Slice, "Slice.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fftw", &sobj->fftw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ifftw", &sobj->ifftw);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void wavearray<long long>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::wavearraylELong64_tgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_wavearraylELong64_tgR(void *p) {
      return  p ? new(p) ::wavearray<Long64_t> : new ::wavearray<Long64_t>;
   }
   static void *newArray_wavearraylELong64_tgR(Long_t nElements, void *p) {
      return p ? new(p) ::wavearray<Long64_t>[nElements] : new ::wavearray<Long64_t>[nElements];
   }
   // Wrapper around operator delete
   static void delete_wavearraylELong64_tgR(void *p) {
      delete ((::wavearray<Long64_t>*)p);
   }
   static void deleteArray_wavearraylELong64_tgR(void *p) {
      delete [] ((::wavearray<Long64_t>*)p);
   }
   static void destruct_wavearraylELong64_tgR(void *p) {
      typedef ::wavearray<Long64_t> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_wavearraylELong64_tgR(TBuffer &buf, void *obj) {
      ((::wavearray<Long64_t>*)obj)->::wavearray<Long64_t>::Streamer(buf);
   }
} // end of namespace ROOT for class ::wavearray<Long64_t>

//______________________________________________________________________________
namespace ROOT {
   void wavearraylEintgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class wavearray<int>.
      typedef ::ROOT::Shadow::wavearraylEintgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<int>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &sobj->data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rate", &sobj->Rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Start", &sobj->Start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Stop", &sobj->Stop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edge", &sobj->Edge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Slice", (void*)&sobj->Slice);
      R__insp.InspectMember("slice", (void*)&sobj->Slice, "Slice.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fftw", &sobj->fftw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ifftw", &sobj->ifftw);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void wavearray<int>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::wavearraylEintgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_wavearraylEintgR(void *p) {
      return  p ? new(p) ::wavearray<int> : new ::wavearray<int>;
   }
   static void *newArray_wavearraylEintgR(Long_t nElements, void *p) {
      return p ? new(p) ::wavearray<int>[nElements] : new ::wavearray<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_wavearraylEintgR(void *p) {
      delete ((::wavearray<int>*)p);
   }
   static void deleteArray_wavearraylEintgR(void *p) {
      delete [] ((::wavearray<int>*)p);
   }
   static void destruct_wavearraylEintgR(void *p) {
      typedef ::wavearray<int> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_wavearraylEintgR(TBuffer &buf, void *obj) {
      ((::wavearray<int>*)obj)->::wavearray<int>::Streamer(buf);
   }
} // end of namespace ROOT for class ::wavearray<int>

//______________________________________________________________________________
namespace ROOT {
   void wavearraylEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class wavearray<unsigned int>.
      typedef ::ROOT::Shadow::wavearraylEunsignedsPintgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<unsigned int>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &sobj->data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rate", &sobj->Rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Start", &sobj->Start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Stop", &sobj->Stop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edge", &sobj->Edge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Slice", (void*)&sobj->Slice);
      R__insp.InspectMember("slice", (void*)&sobj->Slice, "Slice.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fftw", &sobj->fftw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ifftw", &sobj->ifftw);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void wavearray<unsigned int>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::wavearraylEunsignedsPintgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_wavearraylEunsignedsPintgR(void *p) {
      return  p ? new(p) ::wavearray<unsigned int> : new ::wavearray<unsigned int>;
   }
   static void *newArray_wavearraylEunsignedsPintgR(Long_t nElements, void *p) {
      return p ? new(p) ::wavearray<unsigned int>[nElements] : new ::wavearray<unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_wavearraylEunsignedsPintgR(void *p) {
      delete ((::wavearray<unsigned int>*)p);
   }
   static void deleteArray_wavearraylEunsignedsPintgR(void *p) {
      delete [] ((::wavearray<unsigned int>*)p);
   }
   static void destruct_wavearraylEunsignedsPintgR(void *p) {
      typedef ::wavearray<unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_wavearraylEunsignedsPintgR(TBuffer &buf, void *obj) {
      ((::wavearray<unsigned int>*)obj)->::wavearray<unsigned int>::Streamer(buf);
   }
} // end of namespace ROOT for class ::wavearray<unsigned int>

//______________________________________________________________________________
namespace ROOT {
   void wavearraylEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class wavearray<short>.
      typedef ::ROOT::Shadow::wavearraylEshortgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<short>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &sobj->data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rate", &sobj->Rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Start", &sobj->Start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Stop", &sobj->Stop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edge", &sobj->Edge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Slice", (void*)&sobj->Slice);
      R__insp.InspectMember("slice", (void*)&sobj->Slice, "Slice.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fftw", &sobj->fftw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ifftw", &sobj->ifftw);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void wavearray<short>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::wavearraylEshortgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_wavearraylEshortgR(void *p) {
      return  p ? new(p) ::wavearray<short> : new ::wavearray<short>;
   }
   static void *newArray_wavearraylEshortgR(Long_t nElements, void *p) {
      return p ? new(p) ::wavearray<short>[nElements] : new ::wavearray<short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_wavearraylEshortgR(void *p) {
      delete ((::wavearray<short>*)p);
   }
   static void deleteArray_wavearraylEshortgR(void *p) {
      delete [] ((::wavearray<short>*)p);
   }
   static void destruct_wavearraylEshortgR(void *p) {
      typedef ::wavearray<short> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_wavearraylEshortgR(TBuffer &buf, void *obj) {
      ((::wavearray<short>*)obj)->::wavearray<short>::Streamer(buf);
   }
} // end of namespace ROOT for class ::wavearray<short>

//______________________________________________________________________________
namespace ROOT {
   void wavearraylElonggR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class wavearray<long>.
      typedef ::ROOT::Shadow::wavearraylElonggR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<long>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &sobj->data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rate", &sobj->Rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Start", &sobj->Start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Stop", &sobj->Stop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edge", &sobj->Edge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Slice", (void*)&sobj->Slice);
      R__insp.InspectMember("slice", (void*)&sobj->Slice, "Slice.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fftw", &sobj->fftw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ifftw", &sobj->ifftw);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void wavearray<long>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::wavearraylElonggR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_wavearraylElonggR(void *p) {
      return  p ? new(p) ::wavearray<long> : new ::wavearray<long>;
   }
   static void *newArray_wavearraylElonggR(Long_t nElements, void *p) {
      return p ? new(p) ::wavearray<long>[nElements] : new ::wavearray<long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_wavearraylElonggR(void *p) {
      delete ((::wavearray<long>*)p);
   }
   static void deleteArray_wavearraylElonggR(void *p) {
      delete [] ((::wavearray<long>*)p);
   }
   static void destruct_wavearraylElonggR(void *p) {
      typedef ::wavearray<long> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_wavearraylElonggR(TBuffer &buf, void *obj) {
      ((::wavearray<long>*)obj)->::wavearray<long>::Streamer(buf);
   }
} // end of namespace ROOT for class ::wavearray<long>

//______________________________________________________________________________
namespace ROOT {
   void wavearraylEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class wavearray<float>.
      typedef ::ROOT::Shadow::wavearraylEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &sobj->data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rate", &sobj->Rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Start", &sobj->Start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Stop", &sobj->Stop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edge", &sobj->Edge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Slice", (void*)&sobj->Slice);
      R__insp.InspectMember("slice", (void*)&sobj->Slice, "Slice.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fftw", &sobj->fftw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ifftw", &sobj->ifftw);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void wavearray<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::wavearraylEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_wavearraylEfloatgR(void *p) {
      return  p ? new(p) ::wavearray<float> : new ::wavearray<float>;
   }
   static void *newArray_wavearraylEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::wavearray<float>[nElements] : new ::wavearray<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_wavearraylEfloatgR(void *p) {
      delete ((::wavearray<float>*)p);
   }
   static void deleteArray_wavearraylEfloatgR(void *p) {
      delete [] ((::wavearray<float>*)p);
   }
   static void destruct_wavearraylEfloatgR(void *p) {
      typedef ::wavearray<float> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_wavearraylEfloatgR(TBuffer &buf, void *obj) {
      ((::wavearray<float>*)obj)->::wavearray<float>::Streamer(buf);
   }
} // end of namespace ROOT for class ::wavearray<float>

//______________________________________________________________________________
namespace ROOT {
   void wavearraylEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class wavearray<double>.
      typedef ::ROOT::Shadow::wavearraylEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::wavearray<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &sobj->data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rate", &sobj->Rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Start", &sobj->Start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Stop", &sobj->Stop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edge", &sobj->Edge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Slice", (void*)&sobj->Slice);
      R__insp.InspectMember("slice", (void*)&sobj->Slice, "Slice.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fftw", &sobj->fftw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ifftw", &sobj->ifftw);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void wavearray<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::wavearraylEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_wavearraylEdoublegR(void *p) {
      return  p ? new(p) ::wavearray<double> : new ::wavearray<double>;
   }
   static void *newArray_wavearraylEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::wavearray<double>[nElements] : new ::wavearray<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_wavearraylEdoublegR(void *p) {
      delete ((::wavearray<double>*)p);
   }
   static void deleteArray_wavearraylEdoublegR(void *p) {
      delete [] ((::wavearray<double>*)p);
   }
   static void destruct_wavearraylEdoublegR(void *p) {
      typedef ::wavearray<double> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_wavearraylEdoublegR(TBuffer &buf, void *obj) {
      ((::wavearray<double>*)obj)->::wavearray<double>::Streamer(buf);
   }
} // end of namespace ROOT for class ::wavearray<double>

//______________________________________________________________________________
namespace ROOT {
   void WaveDWTlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class WaveDWT<float>.
      typedef ::ROOT::Shadow::WaveDWTlEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWWS", &sobj->pWWS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWWS", &sobj->nWWS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSTS", &sobj->nSTS);
      sobj->Wavelet::ShowMembers(R__insp);
   }

}

template <> void WaveDWT<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::WaveDWTlEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_WaveDWTlEfloatgR(void *p) {
      return  p ? new(p) ::WaveDWT<float> : new ::WaveDWT<float>;
   }
   static void *newArray_WaveDWTlEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::WaveDWT<float>[nElements] : new ::WaveDWT<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_WaveDWTlEfloatgR(void *p) {
      delete ((::WaveDWT<float>*)p);
   }
   static void deleteArray_WaveDWTlEfloatgR(void *p) {
      delete [] ((::WaveDWT<float>*)p);
   }
   static void destruct_WaveDWTlEfloatgR(void *p) {
      typedef ::WaveDWT<float> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_WaveDWTlEfloatgR(TBuffer &buf, void *obj) {
      ((::WaveDWT<float>*)obj)->::WaveDWT<float>::Streamer(buf);
   }
} // end of namespace ROOT for class ::WaveDWT<float>

//______________________________________________________________________________
namespace ROOT {
   void WaveDWTlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class WaveDWT<double>.
      typedef ::ROOT::Shadow::WaveDWTlEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::WaveDWT<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWWS", &sobj->pWWS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWWS", &sobj->nWWS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSTS", &sobj->nSTS);
      sobj->Wavelet::ShowMembers(R__insp);
   }

}

template <> void WaveDWT<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::WaveDWTlEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_WaveDWTlEdoublegR(void *p) {
      return  p ? new(p) ::WaveDWT<double> : new ::WaveDWT<double>;
   }
   static void *newArray_WaveDWTlEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::WaveDWT<double>[nElements] : new ::WaveDWT<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_WaveDWTlEdoublegR(void *p) {
      delete ((::WaveDWT<double>*)p);
   }
   static void deleteArray_WaveDWTlEdoublegR(void *p) {
      delete [] ((::WaveDWT<double>*)p);
   }
   static void destruct_WaveDWTlEdoublegR(void *p) {
      typedef ::WaveDWT<double> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_WaveDWTlEdoublegR(TBuffer &buf, void *obj) {
      ((::WaveDWT<double>*)obj)->::WaveDWT<double>::Streamer(buf);
   }
} // end of namespace ROOT for class ::WaveDWT<double>

//______________________________________________________________________________
template <> void Haar<float>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Haar<float>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Haar<float>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Haar<float>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void HaarlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Haar<float>.
      typedef ::ROOT::Shadow::HaarlEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Haar<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      sobj->WaveDWT<float>::ShowMembers(R__insp);
   }

}

template <> void Haar<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::HaarlEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HaarlEfloatgR(void *p) {
      return  p ? new(p) ::Haar<float> : new ::Haar<float>;
   }
   static void *newArray_HaarlEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::Haar<float>[nElements] : new ::Haar<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_HaarlEfloatgR(void *p) {
      delete ((::Haar<float>*)p);
   }
   static void deleteArray_HaarlEfloatgR(void *p) {
      delete [] ((::Haar<float>*)p);
   }
   static void destruct_HaarlEfloatgR(void *p) {
      typedef ::Haar<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Haar<float>

//______________________________________________________________________________
template <> void Haar<double>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Haar<double>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Haar<double>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Haar<double>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void HaarlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Haar<double>.
      typedef ::ROOT::Shadow::HaarlEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Haar<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      sobj->WaveDWT<double>::ShowMembers(R__insp);
   }

}

template <> void Haar<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::HaarlEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HaarlEdoublegR(void *p) {
      return  p ? new(p) ::Haar<double> : new ::Haar<double>;
   }
   static void *newArray_HaarlEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::Haar<double>[nElements] : new ::Haar<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_HaarlEdoublegR(void *p) {
      delete ((::Haar<double>*)p);
   }
   static void deleteArray_HaarlEdoublegR(void *p) {
      delete [] ((::Haar<double>*)p);
   }
   static void destruct_HaarlEdoublegR(void *p) {
      typedef ::Haar<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Haar<double>

//______________________________________________________________________________
template <> void Biorthogonal<float>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Biorthogonal<float>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Biorthogonal<float>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Biorthogonal<float>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void BiorthogonallEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Biorthogonal<float>.
      typedef ::ROOT::Shadow::BiorthogonallEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PForward", &sobj->PForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PInverse", &sobj->PInverse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*UForward", &sobj->UForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*UInverse", &sobj->UInverse);
      sobj->WaveDWT<float>::ShowMembers(R__insp);
   }

}

template <> void Biorthogonal<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::BiorthogonallEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_BiorthogonallEfloatgR(void *p) {
      return  p ? new(p) ::Biorthogonal<float> : new ::Biorthogonal<float>;
   }
   static void *newArray_BiorthogonallEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::Biorthogonal<float>[nElements] : new ::Biorthogonal<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_BiorthogonallEfloatgR(void *p) {
      delete ((::Biorthogonal<float>*)p);
   }
   static void deleteArray_BiorthogonallEfloatgR(void *p) {
      delete [] ((::Biorthogonal<float>*)p);
   }
   static void destruct_BiorthogonallEfloatgR(void *p) {
      typedef ::Biorthogonal<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Biorthogonal<float>

//______________________________________________________________________________
template <> void Biorthogonal<double>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Biorthogonal<double>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Biorthogonal<double>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Biorthogonal<double>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void BiorthogonallEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Biorthogonal<double>.
      typedef ::ROOT::Shadow::BiorthogonallEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Biorthogonal<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PForward", &sobj->PForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*PInverse", &sobj->PInverse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*UForward", &sobj->UForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*UInverse", &sobj->UInverse);
      sobj->WaveDWT<double>::ShowMembers(R__insp);
   }

}

template <> void Biorthogonal<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::BiorthogonallEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_BiorthogonallEdoublegR(void *p) {
      return  p ? new(p) ::Biorthogonal<double> : new ::Biorthogonal<double>;
   }
   static void *newArray_BiorthogonallEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::Biorthogonal<double>[nElements] : new ::Biorthogonal<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_BiorthogonallEdoublegR(void *p) {
      delete ((::Biorthogonal<double>*)p);
   }
   static void deleteArray_BiorthogonallEdoublegR(void *p) {
      delete [] ((::Biorthogonal<double>*)p);
   }
   static void destruct_BiorthogonallEdoublegR(void *p) {
      typedef ::Biorthogonal<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Biorthogonal<double>

//______________________________________________________________________________
template <> void Daubechies<float>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Daubechies<float>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Daubechies<float>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Daubechies<float>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void DaubechieslEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Daubechies<float>.
      typedef ::ROOT::Shadow::DaubechieslEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLForward", &sobj->pLForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLInverse", &sobj->pLInverse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHForward", &sobj->pHForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHInverse", &sobj->pHInverse);
      sobj->WaveDWT<float>::ShowMembers(R__insp);
   }

}

template <> void Daubechies<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::DaubechieslEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DaubechieslEfloatgR(void *p) {
      return  p ? new(p) ::Daubechies<float> : new ::Daubechies<float>;
   }
   static void *newArray_DaubechieslEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::Daubechies<float>[nElements] : new ::Daubechies<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_DaubechieslEfloatgR(void *p) {
      delete ((::Daubechies<float>*)p);
   }
   static void deleteArray_DaubechieslEfloatgR(void *p) {
      delete [] ((::Daubechies<float>*)p);
   }
   static void destruct_DaubechieslEfloatgR(void *p) {
      typedef ::Daubechies<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Daubechies<float>

//______________________________________________________________________________
template <> void Daubechies<double>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Daubechies<double>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Daubechies<double>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Daubechies<double>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void DaubechieslEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Daubechies<double>.
      typedef ::ROOT::Shadow::DaubechieslEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Daubechies<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLForward", &sobj->pLForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLInverse", &sobj->pLInverse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHForward", &sobj->pHForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHInverse", &sobj->pHInverse);
      sobj->WaveDWT<double>::ShowMembers(R__insp);
   }

}

template <> void Daubechies<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::DaubechieslEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DaubechieslEdoublegR(void *p) {
      return  p ? new(p) ::Daubechies<double> : new ::Daubechies<double>;
   }
   static void *newArray_DaubechieslEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::Daubechies<double>[nElements] : new ::Daubechies<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_DaubechieslEdoublegR(void *p) {
      delete ((::Daubechies<double>*)p);
   }
   static void deleteArray_DaubechieslEdoublegR(void *p) {
      delete [] ((::Daubechies<double>*)p);
   }
   static void destruct_DaubechieslEdoublegR(void *p) {
      typedef ::Daubechies<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Daubechies<double>

//______________________________________________________________________________
template <> void Symlet<float>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Symlet<float>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Symlet<float>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Symlet<float>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymletlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Symlet<float>.
      typedef ::ROOT::Shadow::SymletlEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Symlet<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLForward", &sobj->pLForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLInverse", &sobj->pLInverse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHForward", &sobj->pHForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHInverse", &sobj->pHInverse);
      sobj->WaveDWT<float>::ShowMembers(R__insp);
   }

}

template <> void Symlet<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymletlEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymletlEfloatgR(void *p) {
      return  p ? new(p) ::Symlet<float> : new ::Symlet<float>;
   }
   static void *newArray_SymletlEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::Symlet<float>[nElements] : new ::Symlet<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymletlEfloatgR(void *p) {
      delete ((::Symlet<float>*)p);
   }
   static void deleteArray_SymletlEfloatgR(void *p) {
      delete [] ((::Symlet<float>*)p);
   }
   static void destruct_SymletlEfloatgR(void *p) {
      typedef ::Symlet<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Symlet<float>

//______________________________________________________________________________
template <> void Symlet<double>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Symlet<double>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Symlet<double>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Symlet<double>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymletlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Symlet<double>.
      typedef ::ROOT::Shadow::SymletlEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Symlet<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLForward", &sobj->pLForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLInverse", &sobj->pLInverse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHForward", &sobj->pHForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHInverse", &sobj->pHInverse);
      sobj->WaveDWT<double>::ShowMembers(R__insp);
   }

}

template <> void Symlet<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymletlEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymletlEdoublegR(void *p) {
      return  p ? new(p) ::Symlet<double> : new ::Symlet<double>;
   }
   static void *newArray_SymletlEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::Symlet<double>[nElements] : new ::Symlet<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymletlEdoublegR(void *p) {
      delete ((::Symlet<double>*)p);
   }
   static void deleteArray_SymletlEdoublegR(void *p) {
      delete [] ((::Symlet<double>*)p);
   }
   static void destruct_SymletlEdoublegR(void *p) {
      typedef ::Symlet<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Symlet<double>

//______________________________________________________________________________
template <> void Meyer<float>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Meyer<float>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Meyer<float>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Meyer<float>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void MeyerlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Meyer<float>.
      typedef ::ROOT::Shadow::MeyerlEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Meyer<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLForward", &sobj->pLForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLInverse", &sobj->pLInverse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHForward", &sobj->pHForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHInverse", &sobj->pHInverse);
      sobj->WaveDWT<float>::ShowMembers(R__insp);
   }

}

template <> void Meyer<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::MeyerlEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MeyerlEfloatgR(void *p) {
      return  p ? new(p) ::Meyer<float> : new ::Meyer<float>;
   }
   static void *newArray_MeyerlEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::Meyer<float>[nElements] : new ::Meyer<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_MeyerlEfloatgR(void *p) {
      delete ((::Meyer<float>*)p);
   }
   static void deleteArray_MeyerlEfloatgR(void *p) {
      delete [] ((::Meyer<float>*)p);
   }
   static void destruct_MeyerlEfloatgR(void *p) {
      typedef ::Meyer<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Meyer<float>

//______________________________________________________________________________
template <> void Meyer<double>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Meyer<double>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Meyer<double>::Class(),this);
   } else {
      R__b.WriteClassBuffer(Meyer<double>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void MeyerlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Meyer<double>.
      typedef ::ROOT::Shadow::MeyerlEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Meyer<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLForward", &sobj->pLForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLInverse", &sobj->pLInverse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHForward", &sobj->pHForward);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHInverse", &sobj->pHInverse);
      sobj->WaveDWT<double>::ShowMembers(R__insp);
   }

}

template <> void Meyer<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::MeyerlEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MeyerlEdoublegR(void *p) {
      return  p ? new(p) ::Meyer<double> : new ::Meyer<double>;
   }
   static void *newArray_MeyerlEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::Meyer<double>[nElements] : new ::Meyer<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_MeyerlEdoublegR(void *p) {
      delete ((::Meyer<double>*)p);
   }
   static void deleteArray_MeyerlEdoublegR(void *p) {
      delete [] ((::Meyer<double>*)p);
   }
   static void destruct_MeyerlEdoublegR(void *p) {
      typedef ::Meyer<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Meyer<double>

//______________________________________________________________________________
template <> void WDM<float>::Streamer(TBuffer &R__b)
{
   // Stream an object of class WDM<float>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(WDM<float>::Class(),this);
   } else {
      R__b.WriteClassBuffer(WDM<float>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void WDMlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class WDM<float>.
      typedef ::ROOT::Shadow::WDMlEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::WDM<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BetaOrder", &sobj->BetaOrder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "precision", &sobj->precision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "KWDM", &sobj->KWDM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LWDM", &sobj->LWDM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdmFilter", &sobj->wdmFilter);
      R__insp.InspectMember(sobj->wdmFilter, "wdmFilter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T0", &sobj->T0);
      R__insp.InspectMember(sobj->T0, "T0.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tx", &sobj->Tx);
      R__insp.InspectMember(sobj->Tx, "Tx.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sinTD", &sobj->sinTD);
      R__insp.InspectMember(sobj->sinTD, "sinTD.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosTD", &sobj->cosTD);
      R__insp.InspectMember(sobj->cosTD, "cosTD.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sinTDx", &sobj->sinTDx);
      R__insp.InspectMember(sobj->sinTDx, "sinTDx.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TFMap00", &sobj->TFMap00);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TFMap90", &sobj->TFMap90);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SSE_TDF", &sobj->SSE_TDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*td_buffer", &sobj->td_buffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*td_data", &sobj->td_data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "td_halo[6]", sobj->td_halo);
      sobj->WaveDWT<float>::ShowMembers(R__insp);
   }

}

template <> void WDM<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::WDMlEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_WDMlEfloatgR(void *p) {
      return  p ? new(p) ::WDM<float> : new ::WDM<float>;
   }
   static void *newArray_WDMlEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::WDM<float>[nElements] : new ::WDM<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_WDMlEfloatgR(void *p) {
      delete ((::WDM<float>*)p);
   }
   static void deleteArray_WDMlEfloatgR(void *p) {
      delete [] ((::WDM<float>*)p);
   }
   static void destruct_WDMlEfloatgR(void *p) {
      typedef ::WDM<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::WDM<float>

//______________________________________________________________________________
template <> void WDM<double>::Streamer(TBuffer &R__b)
{
   // Stream an object of class WDM<double>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(WDM<double>::Class(),this);
   } else {
      R__b.WriteClassBuffer(WDM<double>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void WDMlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class WDM<double>.
      typedef ::ROOT::Shadow::WDMlEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::WDM<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BetaOrder", &sobj->BetaOrder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "precision", &sobj->precision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "KWDM", &sobj->KWDM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LWDM", &sobj->LWDM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdmFilter", &sobj->wdmFilter);
      R__insp.InspectMember(sobj->wdmFilter, "wdmFilter.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T0", &sobj->T0);
      R__insp.InspectMember(sobj->T0, "T0.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tx", &sobj->Tx);
      R__insp.InspectMember(sobj->Tx, "Tx.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sinTD", &sobj->sinTD);
      R__insp.InspectMember(sobj->sinTD, "sinTD.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cosTD", &sobj->cosTD);
      R__insp.InspectMember(sobj->cosTD, "cosTD.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sinTDx", &sobj->sinTDx);
      R__insp.InspectMember(sobj->sinTDx, "sinTDx.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TFMap00", &sobj->TFMap00);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*TFMap90", &sobj->TFMap90);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SSE_TDF", &sobj->SSE_TDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*td_buffer", &sobj->td_buffer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*td_data", &sobj->td_data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "td_halo[6]", sobj->td_halo);
      sobj->WaveDWT<double>::ShowMembers(R__insp);
   }

}

template <> void WDM<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::WDMlEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_WDMlEdoublegR(void *p) {
      return  p ? new(p) ::WDM<double> : new ::WDM<double>;
   }
   static void *newArray_WDMlEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::WDM<double>[nElements] : new ::WDM<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_WDMlEdoublegR(void *p) {
      delete ((::WDM<double>*)p);
   }
   static void deleteArray_WDMlEdoublegR(void *p) {
      delete [] ((::WDM<double>*)p);
   }
   static void destruct_WDMlEdoublegR(void *p) {
      typedef ::WDM<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::WDM<double>

//______________________________________________________________________________
void monster::Streamer(TBuffer &R__b)
{
   // Stream an object of class monster.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      int R__i;
      for (R__i = 0; R__i < 2147483646; R__i++)
         R__b >> catalog[0][R__i];
      R__b >> nRes;
      {
         vector<wavearray<float> > &R__stl =  clusterCC;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            wavearray<float> R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, monster::IsA());
   } else {
      R__c = R__b.WriteVersion(monster::IsA(), kTRUE);
      int R__i;
      for (R__i = 0; R__i < 2147483646; R__i++)
         R__b << catalog[0][R__i];
      R__b << nRes;
      {
         vector<wavearray<float> > &R__stl =  clusterCC;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<wavearray<float> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((wavearray<float>&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void monster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class monster.
      TClass *R__cl = ::monster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catalog[1073741823][2]", &catalog);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRes", &nRes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*layers", &layers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusterCC", (void*)&clusterCC);
      R__insp.InspectMember("vector<wavearray<float> >", (void*)&clusterCC, "clusterCC.", false);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_monster(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::monster : new ::monster;
   }
   static void *newArray_monster(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::monster[nElements] : new ::monster[nElements];
   }
   // Wrapper around operator delete
   static void delete_monster(void *p) {
      delete ((::monster*)p);
   }
   static void deleteArray_monster(void *p) {
      delete [] ((::monster*)p);
   }
   static void destruct_monster(void *p) {
      typedef ::monster current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_monster(TBuffer &buf, void *obj) {
      ((::monster*)obj)->::monster::Streamer(buf);
   }
} // end of namespace ROOT for class ::monster

//______________________________________________________________________________
template <> void SymmArray<int>::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmArray<int>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmArray<int>::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmArray<int>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmArraylEintgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmArray<int>.
      typedef ::ROOT::Shadow::SymmArraylEintgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<int>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recSize", &sobj->recSize);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmArray<int>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmArraylEintgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmArraylEintgR(void *p) {
      return  p ? new(p) ::SymmArray<int> : new ::SymmArray<int>;
   }
   static void *newArray_SymmArraylEintgR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmArray<int>[nElements] : new ::SymmArray<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmArraylEintgR(void *p) {
      delete ((::SymmArray<int>*)p);
   }
   static void deleteArray_SymmArraylEintgR(void *p) {
      delete [] ((::SymmArray<int>*)p);
   }
   static void destruct_SymmArraylEintgR(void *p) {
      typedef ::SymmArray<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmArray<int>

//______________________________________________________________________________
template <> void SymmArray<float>::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmArray<float>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmArray<float>::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmArray<float>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmArraylEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmArray<float>.
      typedef ::ROOT::Shadow::SymmArraylEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recSize", &sobj->recSize);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmArray<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmArraylEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmArraylEfloatgR(void *p) {
      return  p ? new(p) ::SymmArray<float> : new ::SymmArray<float>;
   }
   static void *newArray_SymmArraylEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmArray<float>[nElements] : new ::SymmArray<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmArraylEfloatgR(void *p) {
      delete ((::SymmArray<float>*)p);
   }
   static void deleteArray_SymmArraylEfloatgR(void *p) {
      delete [] ((::SymmArray<float>*)p);
   }
   static void destruct_SymmArraylEfloatgR(void *p) {
      typedef ::SymmArray<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmArray<float>

//______________________________________________________________________________
template <> void SymmArray<double>::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmArray<double>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmArray<double>::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmArray<double>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmArraylEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmArray<double>.
      typedef ::ROOT::Shadow::SymmArraylEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmArray<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recSize", &sobj->recSize);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmArray<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmArraylEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmArraylEdoublegR(void *p) {
      return  p ? new(p) ::SymmArray<double> : new ::SymmArray<double>;
   }
   static void *newArray_SymmArraylEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmArray<double>[nElements] : new ::SymmArray<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmArraylEdoublegR(void *p) {
      delete ((::SymmArray<double>*)p);
   }
   static void deleteArray_SymmArraylEdoublegR(void *p) {
      delete [] ((::SymmArray<double>*)p);
   }
   static void destruct_SymmArraylEdoublegR(void *p) {
      typedef ::SymmArray<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmArray<double>

//______________________________________________________________________________
template <> void SymmArraySSE<int>::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmArraySSE<int>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmArraySSE<int>::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmArraySSE<int>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmArraySSElEintgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmArraySSE<int>.
      typedef ::ROOT::Shadow::SymmArraySSElEintgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<int>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "last", &sobj->last);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SizeSSE", &sobj->SizeSSE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recSize", &sobj->recSize);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmArraySSE<int>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmArraySSElEintgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmArraySSElEintgR(void *p) {
      return  p ? new(p) ::SymmArraySSE<int> : new ::SymmArraySSE<int>;
   }
   static void *newArray_SymmArraySSElEintgR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmArraySSE<int>[nElements] : new ::SymmArraySSE<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmArraySSElEintgR(void *p) {
      delete ((::SymmArraySSE<int>*)p);
   }
   static void deleteArray_SymmArraySSElEintgR(void *p) {
      delete [] ((::SymmArraySSE<int>*)p);
   }
   static void destruct_SymmArraySSElEintgR(void *p) {
      typedef ::SymmArraySSE<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmArraySSE<int>

//______________________________________________________________________________
template <> void SymmArraySSE<float>::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmArraySSE<float>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmArraySSE<float>::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmArraySSE<float>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmArraySSElEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmArraySSE<float>.
      typedef ::ROOT::Shadow::SymmArraySSElEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "last", &sobj->last);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SizeSSE", &sobj->SizeSSE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recSize", &sobj->recSize);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmArraySSE<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmArraySSElEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmArraySSElEfloatgR(void *p) {
      return  p ? new(p) ::SymmArraySSE<float> : new ::SymmArraySSE<float>;
   }
   static void *newArray_SymmArraySSElEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmArraySSE<float>[nElements] : new ::SymmArraySSE<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmArraySSElEfloatgR(void *p) {
      delete ((::SymmArraySSE<float>*)p);
   }
   static void deleteArray_SymmArraySSElEfloatgR(void *p) {
      delete [] ((::SymmArraySSE<float>*)p);
   }
   static void destruct_SymmArraySSElEfloatgR(void *p) {
      typedef ::SymmArraySSE<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmArraySSE<float>

//______________________________________________________________________________
template <> void SymmArraySSE<double>::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmArraySSE<double>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmArraySSE<double>::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmArraySSE<double>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmArraySSElEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmArraySSE<double>.
      typedef ::ROOT::Shadow::SymmArraySSElEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmArraySSE<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "last", &sobj->last);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SizeSSE", &sobj->SizeSSE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "recSize", &sobj->recSize);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmArraySSE<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmArraySSElEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmArraySSElEdoublegR(void *p) {
      return  p ? new(p) ::SymmArraySSE<double> : new ::SymmArraySSE<double>;
   }
   static void *newArray_SymmArraySSElEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmArraySSE<double>[nElements] : new ::SymmArraySSE<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmArraySSElEdoublegR(void *p) {
      delete ((::SymmArraySSE<double>*)p);
   }
   static void deleteArray_SymmArraySSElEdoublegR(void *p) {
      delete [] ((::SymmArraySSE<double>*)p);
   }
   static void destruct_SymmArraySSElEdoublegR(void *p) {
      typedef ::SymmArraySSE<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmArraySSE<double>

//______________________________________________________________________________
template <> void SymmObjArray<SymmArray<int> >::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmObjArray<SymmArray<int> >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmObjArray<SymmArray<int> >::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmObjArray<SymmArray<int> >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmObjArraylESymmArraylEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmObjArray<SymmArray<int> >.
      typedef ::ROOT::Shadow::SymmObjArraylESymmArraylEintgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<int> >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmObjArray<SymmArray<int> >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmObjArraylESymmArraylEintgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmObjArraylESymmArraylEintgRsPgR(void *p) {
      return  p ? new(p) ::SymmObjArray<SymmArray<int> > : new ::SymmObjArray<SymmArray<int> >;
   }
   static void *newArray_SymmObjArraylESymmArraylEintgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmObjArray<SymmArray<int> >[nElements] : new ::SymmObjArray<SymmArray<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmObjArraylESymmArraylEintgRsPgR(void *p) {
      delete ((::SymmObjArray<SymmArray<int> >*)p);
   }
   static void deleteArray_SymmObjArraylESymmArraylEintgRsPgR(void *p) {
      delete [] ((::SymmObjArray<SymmArray<int> >*)p);
   }
   static void destruct_SymmObjArraylESymmArraylEintgRsPgR(void *p) {
      typedef ::SymmObjArray<SymmArray<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmObjArray<SymmArray<int> >

//______________________________________________________________________________
template <> void SymmObjArray<SymmArray<float> >::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmObjArray<SymmArray<float> >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmObjArray<SymmArray<float> >::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmObjArray<SymmArray<float> >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmObjArraylESymmArraylEfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmObjArray<SymmArray<float> >.
      typedef ::ROOT::Shadow::SymmObjArraylESymmArraylEfloatgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<float> >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmObjArray<SymmArray<float> >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmObjArraylESymmArraylEfloatgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmObjArraylESymmArraylEfloatgRsPgR(void *p) {
      return  p ? new(p) ::SymmObjArray<SymmArray<float> > : new ::SymmObjArray<SymmArray<float> >;
   }
   static void *newArray_SymmObjArraylESymmArraylEfloatgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmObjArray<SymmArray<float> >[nElements] : new ::SymmObjArray<SymmArray<float> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmObjArraylESymmArraylEfloatgRsPgR(void *p) {
      delete ((::SymmObjArray<SymmArray<float> >*)p);
   }
   static void deleteArray_SymmObjArraylESymmArraylEfloatgRsPgR(void *p) {
      delete [] ((::SymmObjArray<SymmArray<float> >*)p);
   }
   static void destruct_SymmObjArraylESymmArraylEfloatgRsPgR(void *p) {
      typedef ::SymmObjArray<SymmArray<float> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmObjArray<SymmArray<float> >

//______________________________________________________________________________
template <> void SymmObjArray<SymmArray<double> >::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmObjArray<SymmArray<double> >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmObjArray<SymmArray<double> >::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmObjArray<SymmArray<double> >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmObjArraylESymmArraylEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmObjArray<SymmArray<double> >.
      typedef ::ROOT::Shadow::SymmObjArraylESymmArraylEdoublegRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArray<double> >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmObjArray<SymmArray<double> >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmObjArraylESymmArraylEdoublegRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmObjArraylESymmArraylEdoublegRsPgR(void *p) {
      return  p ? new(p) ::SymmObjArray<SymmArray<double> > : new ::SymmObjArray<SymmArray<double> >;
   }
   static void *newArray_SymmObjArraylESymmArraylEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmObjArray<SymmArray<double> >[nElements] : new ::SymmObjArray<SymmArray<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmObjArraylESymmArraylEdoublegRsPgR(void *p) {
      delete ((::SymmObjArray<SymmArray<double> >*)p);
   }
   static void deleteArray_SymmObjArraylESymmArraylEdoublegRsPgR(void *p) {
      delete [] ((::SymmObjArray<SymmArray<double> >*)p);
   }
   static void destruct_SymmObjArraylESymmArraylEdoublegRsPgR(void *p) {
      typedef ::SymmObjArray<SymmArray<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmObjArray<SymmArray<double> >

//______________________________________________________________________________
template <> void SymmObjArray<SymmArraySSE<int> >::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmObjArray<SymmArraySSE<int> >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmObjArray<SymmArraySSE<int> >::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmObjArray<SymmArraySSE<int> >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmObjArraylESymmArraySSElEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmObjArray<SymmArraySSE<int> >.
      typedef ::ROOT::Shadow::SymmObjArraylESymmArraySSElEintgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<int> >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmObjArray<SymmArraySSE<int> >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmObjArraylESymmArraySSElEintgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmObjArraylESymmArraySSElEintgRsPgR(void *p) {
      return  p ? new(p) ::SymmObjArray<SymmArraySSE<int> > : new ::SymmObjArray<SymmArraySSE<int> >;
   }
   static void *newArray_SymmObjArraylESymmArraySSElEintgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmObjArray<SymmArraySSE<int> >[nElements] : new ::SymmObjArray<SymmArraySSE<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmObjArraylESymmArraySSElEintgRsPgR(void *p) {
      delete ((::SymmObjArray<SymmArraySSE<int> >*)p);
   }
   static void deleteArray_SymmObjArraylESymmArraySSElEintgRsPgR(void *p) {
      delete [] ((::SymmObjArray<SymmArraySSE<int> >*)p);
   }
   static void destruct_SymmObjArraylESymmArraySSElEintgRsPgR(void *p) {
      typedef ::SymmObjArray<SymmArraySSE<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmObjArray<SymmArraySSE<int> >

//______________________________________________________________________________
template <> void SymmObjArray<SymmArraySSE<float> >::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmObjArray<SymmArraySSE<float> >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmObjArray<SymmArraySSE<float> >::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmObjArray<SymmArraySSE<float> >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmObjArraylESymmArraySSElEfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmObjArray<SymmArraySSE<float> >.
      typedef ::ROOT::Shadow::SymmObjArraylESymmArraySSElEfloatgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<float> >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmObjArray<SymmArraySSE<float> >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmObjArraylESymmArraySSElEfloatgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmObjArraylESymmArraySSElEfloatgRsPgR(void *p) {
      return  p ? new(p) ::SymmObjArray<SymmArraySSE<float> > : new ::SymmObjArray<SymmArraySSE<float> >;
   }
   static void *newArray_SymmObjArraylESymmArraySSElEfloatgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmObjArray<SymmArraySSE<float> >[nElements] : new ::SymmObjArray<SymmArraySSE<float> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmObjArraylESymmArraySSElEfloatgRsPgR(void *p) {
      delete ((::SymmObjArray<SymmArraySSE<float> >*)p);
   }
   static void deleteArray_SymmObjArraylESymmArraySSElEfloatgRsPgR(void *p) {
      delete [] ((::SymmObjArray<SymmArraySSE<float> >*)p);
   }
   static void destruct_SymmObjArraylESymmArraySSElEfloatgRsPgR(void *p) {
      typedef ::SymmObjArray<SymmArraySSE<float> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmObjArray<SymmArraySSE<float> >

//______________________________________________________________________________
template <> void SymmObjArray<SymmArraySSE<double> >::Streamer(TBuffer &R__b)
{
   // Stream an object of class SymmObjArray<SymmArraySSE<double> >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SymmObjArray<SymmArraySSE<double> >::Class(),this);
   } else {
      R__b.WriteClassBuffer(SymmObjArray<SymmArraySSE<double> >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SymmObjArraylESymmArraySSElEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SymmObjArray<SymmArraySSE<double> >.
      typedef ::ROOT::Shadow::SymmObjArraylESymmArraySSElEdoublegRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SymmObjArray<SymmArraySSE<double> >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Size", &sobj->Size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rec", &sobj->rec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zero", &sobj->zero);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SymmObjArray<SymmArraySSE<double> >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SymmObjArraylESymmArraySSElEdoublegRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SymmObjArraylESymmArraySSElEdoublegRsPgR(void *p) {
      return  p ? new(p) ::SymmObjArray<SymmArraySSE<double> > : new ::SymmObjArray<SymmArraySSE<double> >;
   }
   static void *newArray_SymmObjArraylESymmArraySSElEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::SymmObjArray<SymmArraySSE<double> >[nElements] : new ::SymmObjArray<SymmArraySSE<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_SymmObjArraylESymmArraySSElEdoublegRsPgR(void *p) {
      delete ((::SymmObjArray<SymmArraySSE<double> >*)p);
   }
   static void deleteArray_SymmObjArraylESymmArraySSElEdoublegRsPgR(void *p) {
      delete [] ((::SymmObjArray<SymmArraySSE<double> >*)p);
   }
   static void destruct_SymmObjArraylESymmArraySSElEdoublegRsPgR(void *p) {
      typedef ::SymmObjArray<SymmArraySSE<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SymmObjArray<SymmArraySSE<double> >

//______________________________________________________________________________
namespace ROOT {
   void WSerieslEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class WSeries<float>.
      typedef ::ROOT::Shadow::WSerieslEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::WSeries<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWavelet", &sobj->pWavelet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "w_mode", &sobj->w_mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bpp", &sobj->bpp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wRate", &sobj->wRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f_low", &sobj->f_low);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f_high", &sobj->f_high);
      sobj->wavearray<float>::ShowMembers(R__insp);
   }

}

template <> void WSeries<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::WSerieslEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_WSerieslEfloatgR(void *p) {
      return  p ? new(p) ::WSeries<float> : new ::WSeries<float>;
   }
   static void *newArray_WSerieslEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::WSeries<float>[nElements] : new ::WSeries<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_WSerieslEfloatgR(void *p) {
      delete ((::WSeries<float>*)p);
   }
   static void deleteArray_WSerieslEfloatgR(void *p) {
      delete [] ((::WSeries<float>*)p);
   }
   static void destruct_WSerieslEfloatgR(void *p) {
      typedef ::WSeries<float> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_WSerieslEfloatgR(TBuffer &buf, void *obj) {
      ((::WSeries<float>*)obj)->::WSeries<float>::Streamer(buf);
   }
} // end of namespace ROOT for class ::WSeries<float>

//______________________________________________________________________________
namespace ROOT {
   void WSerieslEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class WSeries<double>.
      typedef ::ROOT::Shadow::WSerieslEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::WSeries<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWavelet", &sobj->pWavelet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "w_mode", &sobj->w_mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bpp", &sobj->bpp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wRate", &sobj->wRate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f_low", &sobj->f_low);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f_high", &sobj->f_high);
      sobj->wavearray<double>::ShowMembers(R__insp);
   }

}

template <> void WSeries<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::WSerieslEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_WSerieslEdoublegR(void *p) {
      return  p ? new(p) ::WSeries<double> : new ::WSeries<double>;
   }
   static void *newArray_WSerieslEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::WSeries<double>[nElements] : new ::WSeries<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_WSerieslEdoublegR(void *p) {
      delete ((::WSeries<double>*)p);
   }
   static void deleteArray_WSerieslEdoublegR(void *p) {
      delete [] ((::WSeries<double>*)p);
   }
   static void destruct_WSerieslEdoublegR(void *p) {
      typedef ::WSeries<double> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_WSerieslEdoublegR(TBuffer &buf, void *obj) {
      ((::WSeries<double>*)obj)->::WSeries<double>::Streamer(buf);
   }
} // end of namespace ROOT for class ::WSeries<double>

//______________________________________________________________________________
void WaveRDC::Streamer(TBuffer &R__b)
{
   // Stream an object of class WaveRDC.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(WaveRDC::Class(),this);
   } else {
      R__b.WriteClassBuffer(WaveRDC::Class(),this);
   }
}

//______________________________________________________________________________
void WaveRDC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class WaveRDC.
      TClass *R__cl = ::WaveRDC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSample", &nSample);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLayer", &nLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "optz", &optz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "freebits", &freebits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kLong", &kLong);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kShort", &kShort);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kBSW", &kBSW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bias", &Bias);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zero", &Zero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Scale", &Scale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rmsLimit", &rmsLimit);
      wavearray<unsigned int>::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_WaveRDC(void *p) {
      return  p ? new(p) ::WaveRDC : new ::WaveRDC;
   }
   static void *newArray_WaveRDC(Long_t nElements, void *p) {
      return p ? new(p) ::WaveRDC[nElements] : new ::WaveRDC[nElements];
   }
   // Wrapper around operator delete
   static void delete_WaveRDC(void *p) {
      delete ((::WaveRDC*)p);
   }
   static void deleteArray_WaveRDC(void *p) {
      delete [] ((::WaveRDC*)p);
   }
   static void destruct_WaveRDC(void *p) {
      typedef ::WaveRDC current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::WaveRDC

namespace ROOT {
   // Wrappers around operator new
   static void *new_wavecluster(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wavecluster : new ::wavecluster;
   }
   static void *newArray_wavecluster(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wavecluster[nElements] : new ::wavecluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_wavecluster(void *p) {
      delete ((::wavecluster*)p);
   }
   static void deleteArray_wavecluster(void *p) {
      delete [] ((::wavecluster*)p);
   }
   static void destruct_wavecluster(void *p) {
      typedef ::wavecluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::wavecluster

//______________________________________________________________________________
void netcluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class netcluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(netcluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(netcluster::Class(),this);
   }
}

//______________________________________________________________________________
void netcluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class netcluster.
      TClass *R__cl = ::netcluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rate", &rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start", &start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stop", &stop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bpp", &bpp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shift", &shift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flow", &flow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhigh", &fhigh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPIX", &nPIX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pair", &pair);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pList", (void*)&pList);
      R__insp.InspectMember("vector<netpixel>", (void*)&pList, "pList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cData", (void*)&cData);
      R__insp.InspectMember("vector<clusterdata>", (void*)&cData, "cData.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sCuts", (void*)&sCuts);
      R__insp.InspectMember("vector<int>", (void*)&sCuts, "sCuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cList", (void*)&cList);
      R__insp.InspectMember("vector<vector_int>", (void*)&cList, "cList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cRate", (void*)&cRate);
      R__insp.InspectMember("vector<vector_int>", (void*)&cRate, "cRate.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cTime", (void*)&cTime);
      R__insp.InspectMember("vector<float>", (void*)&cTime, "cTime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cFreq", (void*)&cFreq);
      R__insp.InspectMember("vector<float>", (void*)&cFreq, "cFreq.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sArea", (void*)&sArea);
      R__insp.InspectMember("vector<vector_float>", (void*)&sArea, "sArea.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p_Map", (void*)&p_Map);
      R__insp.InspectMember("vector<vector_float>", (void*)&p_Map, "p_Map.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "p_Ind", (void*)&p_Ind);
      R__insp.InspectMember("vector<vector_int>", (void*)&p_Ind, "p_Ind.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTofF", (void*)&nTofF);
      R__insp.InspectMember("vector<vector_int>", (void*)&nTofF, "nTofF.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_netcluster(void *p) {
      return  p ? new(p) ::netcluster : new ::netcluster;
   }
   static void *newArray_netcluster(Long_t nElements, void *p) {
      return p ? new(p) ::netcluster[nElements] : new ::netcluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_netcluster(void *p) {
      delete ((::netcluster*)p);
   }
   static void deleteArray_netcluster(void *p) {
      delete [] ((::netcluster*)p);
   }
   static void destruct_netcluster(void *p) {
      typedef ::netcluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::netcluster

//______________________________________________________________________________
void clusterdata::Streamer(TBuffer &R__b)
{
   // Stream an object of class clusterdata.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(clusterdata::Class(),this);
   } else {
      R__b.WriteClassBuffer(clusterdata::Class(),this);
   }
}

//______________________________________________________________________________
void clusterdata::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class clusterdata.
      TClass *R__cl = ::clusterdata::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eallres", &Eallres);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likenet", &likenet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "netecor", &netecor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "netnull", &netnull);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "netED", &netED);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isoED", &isoED);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skycc", &skycc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isocc", &isocc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subnet", &subnet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SUBNET", &SUBNET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skyStat", &skyStat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "netRHO", &netRHO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "netrho", &netrho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iota", &iota);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "polarisation", &polarisation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ellipticity", &ellipticity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cTime", &cTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cFreq", &cFreq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gNET", &gNET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aNET", &aNET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iNET", &iNET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tmrgr", &tmrgr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tmrgrerr", &tmrgrerr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mchirp", &mchirp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mchirperr", &mchirperr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2chirp", &chi2chirp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skySize", &skySize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skyIndex", &skyIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fit", &fit);
      R__insp.InspectMember(fit, "fit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chirp", &chirp);
      R__insp.InspectMember(chirp, "chirp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mchpdf", &mchpdf);
      R__insp.InspectMember(mchpdf, "mchpdf.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_clusterdata(void *p) {
      return  p ? new(p) ::clusterdata : new ::clusterdata;
   }
   static void *newArray_clusterdata(Long_t nElements, void *p) {
      return p ? new(p) ::clusterdata[nElements] : new ::clusterdata[nElements];
   }
   // Wrapper around operator delete
   static void delete_clusterdata(void *p) {
      delete ((::clusterdata*)p);
   }
   static void deleteArray_clusterdata(void *p) {
      delete [] ((::clusterdata*)p);
   }
   static void destruct_clusterdata(void *p) {
      typedef ::clusterdata current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::clusterdata

//______________________________________________________________________________
void wavecor::Streamer(TBuffer &R__b)
{
   // Stream an object of class wavecor.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> shift;
      R__b >> ifo;
      R__b >> run;
      R__b >> window;
      R__b >> lagint;
      xcor.Streamer(R__b);
      xlag.Streamer(R__b);
      {
         list<vector_int> &R__stl =  cList;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("cList streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            vector<int,allocator<int> > R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, wavecor::IsA());
   } else {
      R__c = R__b.WriteVersion(wavecor::IsA(), kTRUE);
      R__b << shift;
      R__b << ifo;
      R__b << run;
      R__b << window;
      R__b << lagint;
      xcor.Streamer(R__b);
      xlag.Streamer(R__b);
      {
         list<vector_int> &R__stl =  cList;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(vector<int,allocator<int> >));
         if (R__tcl1==0) {
            Error("cList streamer","Missing the TClass object for vector<int,allocator<int> >!");
            return;
         }
            list<vector_int>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((vector<int,allocator<int> >*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void wavecor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class wavecor.
      TClass *R__cl = ::wavecor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "shift", &shift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ifo", &ifo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "window", &window);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lagint", &lagint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xcor", &xcor);
      R__insp.InspectMember(xcor, "xcor.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xlag", &xlag);
      R__insp.InspectMember(xlag, "xlag.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cList", (void*)&cList);
      R__insp.InspectMember("list<vector_int>", (void*)&cList, "cList.", false);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_wavecor(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wavecor : new ::wavecor;
   }
   static void *newArray_wavecor(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wavecor[nElements] : new ::wavecor[nElements];
   }
   // Wrapper around operator delete
   static void delete_wavecor(void *p) {
      delete ((::wavecor*)p);
   }
   static void deleteArray_wavecor(void *p) {
      delete [] ((::wavecor*)p);
   }
   static void destruct_wavecor(void *p) {
      typedef ::wavecor current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_wavecor(TBuffer &buf, void *obj) {
      ((::wavecor*)obj)->::wavecor::Streamer(buf);
   }
} // end of namespace ROOT for class ::wavecor

namespace ROOT {
   // Wrappers around operator new
   static void *new_linefilter(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::linefilter : new ::linefilter;
   }
   static void *newArray_linefilter(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::linefilter[nElements] : new ::linefilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_linefilter(void *p) {
      delete ((::linefilter*)p);
   }
   static void deleteArray_linefilter(void *p) {
      delete [] ((::linefilter*)p);
   }
   static void destruct_linefilter(void *p) {
      typedef ::linefilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::linefilter

//______________________________________________________________________________
void skymap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class skymap.
      TClass *R__cl = ::skymap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value", (void*)&value);
      R__insp.InspectMember("vector<vectorD>", (void*)&value, "value.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", (void*)&index);
      R__insp.InspectMember("vector<int>", (void*)&index, "index.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sms", &sms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta_1", &theta_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta_2", &theta_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_1", &phi_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi_2", &phi_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gps", &gps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mTheta", &mTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mPhi", &mPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mIndex", &mIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "healpix_order", &healpix_order);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_skymap(void *p) {
      return  p ? new(p) ::skymap : new ::skymap;
   }
   static void *newArray_skymap(Long_t nElements, void *p) {
      return p ? new(p) ::skymap[nElements] : new ::skymap[nElements];
   }
   // Wrapper around operator delete
   static void delete_skymap(void *p) {
      delete ((::skymap*)p);
   }
   static void deleteArray_skymap(void *p) {
      delete [] ((::skymap*)p);
   }
   static void destruct_skymap(void *p) {
      typedef ::skymap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_skymap(TBuffer &buf, void *obj) {
      ((::skymap*)obj)->::skymap::Streamer(buf);
   }
} // end of namespace ROOT for class ::skymap

//______________________________________________________________________________
void detector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class detector.
      TClass *R__cl = ::detector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Name[16]", Name);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ifoID", &ifoID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dP", (void*)&dP);
      R__insp.InspectMember("detectorParams", (void*)&dP, "dP.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rv[3]", Rv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ex[3]", Ex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ey[3]", Ey);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DT[9]", DT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ED[5]", ED);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sHIFt", &sHIFt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "null", &null);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "enrg", &enrg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sSNR", &sSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xSNR", &xSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ekXk", &ekXk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rate", &rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDFS", &nDFS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDFL", &nDFL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wfSAVE", &wfSAVE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tau", &tau);
      R__insp.InspectMember(tau, "tau.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mFp", &mFp);
      R__insp.InspectMember(mFp, "mFp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mFx", &mFx);
      R__insp.InspectMember(mFx, "mFx.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HoT", &HoT);
      R__insp.InspectMember(HoT, "HoT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vSS", (void*)&vSS);
      R__insp.InspectMember("vector<SSeries<double> >", (void*)&vSS, "vSS.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TFmap", &TFmap);
      R__insp.InspectMember(TFmap, "TFmap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "waveForm", &waveForm);
      R__insp.InspectMember(waveForm, "waveForm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "waveBand", &waveBand);
      R__insp.InspectMember(waveBand, "waveBand.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "waveNull", &waveNull);
      R__insp.InspectMember(waveNull, "waveNull.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRMS", &nRMS);
      R__insp.InspectMember(nRMS, "nRMS.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nVAR", &nVAR);
      R__insp.InspectMember(nVAR, "nVAR.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filter", (void*)&filter);
      R__insp.InspectMember("vector<delayFilter>", (void*)&filter, "filter.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fp", &fp);
      R__insp.InspectMember(fp, "fp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fx", &fx);
      R__insp.InspectMember(fx, "fx.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ffp", &ffp);
      R__insp.InspectMember(ffp, "ffp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ffm", &ffm);
      R__insp.InspectMember(ffm, "ffm.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpx", &fpx);
      R__insp.InspectMember(fpx, "fpx.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      R__insp.InspectMember(index, "index.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lagShift", &lagShift);
      R__insp.InspectMember(lagShift, "lagShift.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HRSS", &HRSS);
      R__insp.InspectMember(HRSS, "HRSS.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ISNR", &ISNR);
      R__insp.InspectMember(ISNR, "ISNR.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FREQ", &FREQ);
      R__insp.InspectMember(FREQ, "FREQ.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BAND", &BAND);
      R__insp.InspectMember(BAND, "BAND.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TIME", &TIME);
      R__insp.InspectMember(TIME, "TIME.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TDUR", &TDUR);
      R__insp.InspectMember(TDUR, "TDUR.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IWFID", (void*)&IWFID);
      R__insp.InspectMember("vector<int>", (void*)&IWFID, "IWFID.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IWFP", (void*)&IWFP);
      R__insp.InspectMember("vector<wavearray<double>*>", (void*)&IWFP, "IWFP.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RWFID", (void*)&RWFID);
      R__insp.InspectMember("vector<int>", (void*)&RWFID, "RWFID.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RWFP", (void*)&RWFP);
      R__insp.InspectMember("vector<wavearray<double>*>", (void*)&RWFP, "RWFP.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "polarization", &polarization);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_detector(void *p) {
      return  p ? new(p) ::detector : new ::detector;
   }
   static void *newArray_detector(Long_t nElements, void *p) {
      return p ? new(p) ::detector[nElements] : new ::detector[nElements];
   }
   // Wrapper around operator delete
   static void delete_detector(void *p) {
      delete ((::detector*)p);
   }
   static void deleteArray_detector(void *p) {
      delete [] ((::detector*)p);
   }
   static void destruct_detector(void *p) {
      typedef ::detector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_detector(TBuffer &buf, void *obj) {
      ((::detector*)obj)->::detector::Streamer(buf);
   }
} // end of namespace ROOT for class ::detector

//______________________________________________________________________________
void network::Streamer(TBuffer &R__b)
{
   // Stream an object of class network.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(network::Class(),this);
   } else {
      R__b.WriteClassBuffer(network::Class(),this);
   }
}

//______________________________________________________________________________
void network::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class network.
      TClass *R__cl = ::network::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRun", &nRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLag", &nLag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSky", &nSky);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mIFO", &mIFO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rTDF", &rTDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Step", &Step);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edge", &Edge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gNET", &gNET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aNET", &aNET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iNET", &iNET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eCOR", &eCOR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "norm", &norm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e2or", &e2or);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "acor", &acor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pOUT", &pOUT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EFEC", &EFEC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tYPe", &tYPe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "local", &local);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "optim", &optim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "delta", &delta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gamma", &gamma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "precision", &precision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pSigma", &pSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "penalty", &penalty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "netCC", &netCC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "netRHO", &netRHO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eDisbalance", &eDisbalance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MRA", &MRA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NDM", (void*)&NDM);
      R__insp.InspectMember("vector<vectorD>", (void*)&NDM, "NDM.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "whp", &whp);
      R__insp.InspectMember(whp, "whp.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "whx", &whx);
      R__insp.InspectMember(whx, "whx.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ifoList", (void*)&ifoList);
      R__insp.InspectMember("vector<detector*>", (void*)&ifoList, "ifoList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ifoName", (void*)&ifoName);
      R__insp.InspectMember("vector<char*>", (void*)&ifoName, "ifoName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wc_List", (void*)&wc_List);
      R__insp.InspectMember("vector<netcluster>", (void*)&wc_List, "wc_List.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "livTime", (void*)&livTime);
      R__insp.InspectMember("vector<double>", (void*)&livTime, "livTime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcList", (void*)&mdcList);
      R__insp.InspectMember("vector<std::string>", (void*)&mdcList, "mdcList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcType", (void*)&mdcType);
      R__insp.InspectMember("vector<std::string>", (void*)&mdcType, "mdcType.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdcTime", (void*)&mdcTime);
      R__insp.InspectMember("vector<double>", (void*)&mdcTime, "mdcTime.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mdc__ID", (void*)&mdc__ID);
      R__insp.InspectMember("vector<size_t>", (void*)&mdc__ID, "mdc__ID.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "segList", (void*)&segList);
      R__insp.InspectMember("vector<waveSegment>", (void*)&segList, "segList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdmList", (void*)&wdmList);
      R__insp.InspectMember("vector<WDM<double>*>", (void*)&wdmList, "wdmList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSensitivity", &nSensitivity);
      R__insp.InspectMember(nSensitivity, "nSensitivity.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nAlignment", &nAlignment);
      R__insp.InspectMember(nAlignment, "nAlignment.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCorrelation", &nCorrelation);
      R__insp.InspectMember(nCorrelation, "nCorrelation.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nLikelihood", &nLikelihood);
      R__insp.InspectMember(nLikelihood, "nLikelihood.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nNullEnergy", &nNullEnergy);
      R__insp.InspectMember(nNullEnergy, "nNullEnergy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPenalty", &nPenalty);
      R__insp.InspectMember(nPenalty, "nPenalty.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCorrEnergy", &nCorrEnergy);
      R__insp.InspectMember(nCorrEnergy, "nCorrEnergy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nNetIndex", &nNetIndex);
      R__insp.InspectMember(nNetIndex, "nNetIndex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDisbalance", &nDisbalance);
      R__insp.InspectMember(nDisbalance, "nDisbalance.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSkyStat", &nSkyStat);
      R__insp.InspectMember(nSkyStat, "nSkyStat.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEllipticity", &nEllipticity);
      R__insp.InspectMember(nEllipticity, "nEllipticity.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPolarisation", &nPolarisation);
      R__insp.InspectMember(nPolarisation, "nPolarisation.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nProbability", &nProbability);
      R__insp.InspectMember(nProbability, "nProbability.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pixeLHood", &pixeLHood);
      R__insp.InspectMember(pixeLHood, "pixeLHood.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pixeLNull", &pixeLNull);
      R__insp.InspectMember(pixeLNull, "pixeLNull.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filter", (void*)&filter);
      R__insp.InspectMember("vector<delayFilter>", (void*)&filter, "filter.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filter90", (void*)&filter90);
      R__insp.InspectMember("vector<delayFilter>", (void*)&filter90, "filter90.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      R__insp.InspectMember(index, "index.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skyMask", &skyMask);
      R__insp.InspectMember(skyMask, "skyMask.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skyMaskCC", &skyMaskCC);
      R__insp.InspectMember(skyMaskCC, "skyMaskCC.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skyHole", &skyHole);
      R__insp.InspectMember(skyHole, "skyHole.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "veto", &veto);
      R__insp.InspectMember(veto, "veto.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skyProb", &skyProb);
      R__insp.InspectMember(skyProb, "skyProb.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skyENRG", &skyENRG);
      R__insp.InspectMember(skyENRG, "skyENRG.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pList", (void*)&pList);
      R__insp.InspectMember("vector<netpixel*>", (void*)&pList, "pList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdmMRA", &wdmMRA);
      R__insp.InspectMember(wdmMRA, "wdmMRA.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a_00", &a_00);
      R__insp.InspectMember(a_00, "a_00.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a_90", &a_90);
      R__insp.InspectMember(a_90, "a_90.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rNRG", &rNRG);
      R__insp.InspectMember(rNRG, "rNRG.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pNRG", &pNRG);
      R__insp.InspectMember(pNRG, "pNRG.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_WDM", &_WDM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_LIKE", &_LIKE);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_network(void *p) {
      return  p ? new(p) ::network : new ::network;
   }
   static void *newArray_network(Long_t nElements, void *p) {
      return p ? new(p) ::network[nElements] : new ::network[nElements];
   }
   // Wrapper around operator delete
   static void delete_network(void *p) {
      delete ((::network*)p);
   }
   static void deleteArray_network(void *p) {
      delete [] ((::network*)p);
   }
   static void destruct_network(void *p) {
      typedef ::network current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::network

//______________________________________________________________________________
void netevent::Streamer(TBuffer &R__b)
{
   // Stream an object of class netevent.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> gnet;
      R__b >> anet;
      R__b >> inet;
      R__b >> ecor;
      R__b >> norm;
      R__b >> ECOR;
      R__b >> penalty;
      R__b >> likelihood;
      R__b >> factor;
      {
         vector<detector*> &R__stl =  ifoList;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(detector));
         if (R__tcl1==0) {
            Error("ifoList streamer","Missing the TClass object for detector!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            detector* R__t;
            R__t = (detector*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, netevent::IsA());
   } else {
      R__c = R__b.WriteVersion(netevent::IsA(), kTRUE);
      R__b << gnet;
      R__b << anet;
      R__b << inet;
      R__b << ecor;
      R__b << norm;
      R__b << ECOR;
      R__b << penalty;
      R__b << likelihood;
      R__b << factor;
      {
         vector<detector*> &R__stl =  ifoList;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<detector*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void netevent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class netevent.
      TClass *R__cl = ::netevent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iFile", &iFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChain", &fChain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrent", &fCurrent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndim", &ndim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Psave", &Psave);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nevent", &nevent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eventID", &eventID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*type", &type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*name", &name);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rate", &rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*volume", &volume);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*size", &size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "usize", &usize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gap", &gap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lag", &lag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*slag", &slag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*strain", &strain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*psi", &psi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iota", &iota);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bp", &bp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bx", &bx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*gps", &gps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*right", &right);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*left", &left);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*duration", &duration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*start", &start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*stop", &stop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*frequency", &frequency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*low", &low);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*high", &high);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bandwidth", &bandwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hrss", &hrss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*noise", &noise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*erA", &erA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Psm", &Psm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*null", &null);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nill", &nill);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rho", &rho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*netcc", &netcc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*neted", &neted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gnet", &gnet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "anet", &anet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inet", &inet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ecor", &ecor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "norm", &norm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ECOR", &ECOR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "penalty", &penalty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "likelihood", &likelihood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "factor", &factor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*range", &range);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*chirp", &chirp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*eBBH", &eBBH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Deff", &Deff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*spin", &spin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*snr", &snr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xSNR", &xSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sSNR", &sSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iSNR", &iSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*oSNR", &oSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ioSNR", &ioSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fP", &fP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ifoList", (void*)&ifoList);
      R__insp.InspectMember("vector<detector*>", (void*)&ifoList, "ifoList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_ndim", &b_ndim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_run", &b_run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_nevent", &b_nevent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_eventID", &b_eventID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_type", &b_type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_name", &b_name);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_rate", &b_rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_volume", &b_volume);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_size", &b_size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_usize", &b_usize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_gap", &b_gap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_lag", &b_lag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_slag", &b_slag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_strain", &b_strain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_phi", &b_phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_theta", &b_theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_psi", &b_psi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_iota", &b_iota);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_bp", &b_bp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_bx", &b_bx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_time", &b_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_gps", &b_gps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_right", &b_right);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_left", &b_left);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_duration", &b_duration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_start", &b_start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_stop", &b_stop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_frequency", &b_frequency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_low", &b_low);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_high", &b_high);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_bandwidth", &b_bandwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_hrss", &b_hrss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_noise", &b_noise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_erA", &b_erA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_Psm", &b_Psm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_null", &b_null);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_nill", &b_nill);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_netcc", &b_netcc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_neted", &b_neted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_rho", &b_rho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_gnet", &b_gnet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_anet", &b_anet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_inet", &b_inet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_ecor", &b_ecor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_norm", &b_norm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_ECOR", &b_ECOR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_penalty", &b_penalty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_likelihood", &b_likelihood);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_factor", &b_factor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_range", &b_range);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_chirp", &b_chirp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_eBBH", &b_eBBH);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_Deff", &b_Deff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_mass", &b_mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_spin", &b_spin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_snr", &b_snr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_xSNR", &b_xSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_sSNR", &b_sSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_iSNR", &b_iSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_oSNR", &b_oSNR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_ioSNR", &b_ioSNR);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_netevent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::netevent : new ::netevent;
   }
   static void *newArray_netevent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::netevent[nElements] : new ::netevent[nElements];
   }
   // Wrapper around operator delete
   static void delete_netevent(void *p) {
      delete ((::netevent*)p);
   }
   static void deleteArray_netevent(void *p) {
      delete [] ((::netevent*)p);
   }
   static void destruct_netevent(void *p) {
      typedef ::netevent current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_netevent(TBuffer &buf, void *obj) {
      ((::netevent*)obj)->::netevent::Streamer(buf);
   }
} // end of namespace ROOT for class ::netevent

//______________________________________________________________________________
void injection::Streamer(TBuffer &R__b)
{
   // Stream an object of class injection.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> run;
      R__b >> nevent;
      R__b >> eventID;
      R__b >> type;
      R__b >> factor;
      R__b >> distance;
      R__b >> mchirp;
      R__b >> rp0;
      R__b >> e0;
      R__b >> gps;
      R__b >> strain;
      R__b.CheckByteCount(R__s, R__c, injection::IsA());
   } else {
      R__c = R__b.WriteVersion(injection::IsA(), kTRUE);
      R__b << run;
      R__b << nevent;
      R__b << eventID;
      R__b << type;
      R__b << factor;
      R__b << distance;
      R__b << mchirp;
      R__b << rp0;
      R__b << e0;
      R__b << gps;
      R__b << strain;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void injection::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class injection.
      TClass *R__cl = ::injection::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iFile", &iFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChain", &fChain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrent", &fCurrent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndim", &ndim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nevent", &nevent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventID", &eventID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*name", &name);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "factor", &factor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distance", &distance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mchirp", &mchirp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rp0", &rp0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "e0", &e0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gps", &gps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "strain", &strain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*psi", &psi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iota", &iota);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bp", &bp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bx", &bx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*duration", &duration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*frequency", &frequency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*bandwidth", &bandwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hrss", &hrss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*snr", &snr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Deff", &Deff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mass", &mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*spin", &spin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pwf", &pwf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_ndim", &b_ndim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_run", &b_run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_nevent", &b_nevent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_eventID", &b_eventID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_type", &b_type);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_name", &b_name);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_factor", &b_factor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_distance", &b_distance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_mchirp", &b_mchirp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_rp0", &b_rp0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_e0", &b_e0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_gps", &b_gps);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_strain", &b_strain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_psi", &b_psi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_iota", &b_iota);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_phi", &b_phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_theta", &b_theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_bp", &b_bp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_bx", &b_bx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_time", &b_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_duration", &b_duration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_frequency", &b_frequency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_bandwidth", &b_bandwidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_hrss", &b_hrss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_snr", &b_snr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_Deff", &b_Deff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_mass", &b_mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*b_spin", &b_spin);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_injection(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::injection : new ::injection;
   }
   static void *newArray_injection(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::injection[nElements] : new ::injection[nElements];
   }
   // Wrapper around operator delete
   static void delete_injection(void *p) {
      delete ((::injection*)p);
   }
   static void deleteArray_injection(void *p) {
      delete [] ((::injection*)p);
   }
   static void destruct_injection(void *p) {
      typedef ::injection current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_injection(TBuffer &buf, void *obj) {
      ((::injection*)obj)->::injection::Streamer(buf);
   }
} // end of namespace ROOT for class ::injection

//______________________________________________________________________________
void watplot::Streamer(TBuffer &R__b)
{
   // Stream an object of class watplot.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> canvas;
      R__b >> hist2D;
      {
         vector<TGraph*> &R__stl =  graph;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TGraph));
         if (R__tcl1==0) {
            Error("graph streamer","Missing the TClass object for TGraph!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TGraph* R__t;
            R__t = (TGraph*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TH1F*> &R__stl =  hist1D;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(TH1F));
         if (R__tcl1==0) {
            Error("hist1D streamer","Missing the TClass object for TH1F!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TH1F* R__t;
            R__t = (TH1F*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      data.Streamer(R__b);
      title.Streamer(R__b);
      xtitle.Streamer(R__b);
      ytitle.Streamer(R__b);
      R__b >> ncol;
      opt.Streamer(R__b);
      R__b >> col;
      R__b >> t1;
      R__b >> t2;
      R__b >> fft;
      R__b >> f1;
      R__b >> f2;
      R__b >> psd;
      R__b >> t3;
      R__b.CheckByteCount(R__s, R__c, watplot::IsA());
   } else {
      R__c = R__b.WriteVersion(watplot::IsA(), kTRUE);
      R__b << canvas;
      R__b << (TObject*)hist2D;
      {
         vector<TGraph*> &R__stl =  graph;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TGraph*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<TH1F*> &R__stl =  hist1D;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TH1F*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      data.Streamer(R__b);
      title.Streamer(R__b);
      xtitle.Streamer(R__b);
      ytitle.Streamer(R__b);
      R__b << ncol;
      opt.Streamer(R__b);
      R__b << col;
      R__b << t1;
      R__b << t2;
      R__b << fft;
      R__b << f1;
      R__b << f2;
      R__b << psd;
      R__b << t3;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void watplot::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class watplot.
      TClass *R__cl = ::watplot::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*canvas", &canvas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hist2D", &hist2D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "graph", (void*)&graph);
      R__insp.InspectMember("vector<TGraph*>", (void*)&graph, "graph.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hist1D", (void*)&hist1D);
      R__insp.InspectMember("vector<TH1F*>", (void*)&hist1D, "hist1D.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", &data);
      R__insp.InspectMember(data, "data.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "title", &title);
      R__insp.InspectMember(title, "title.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xtitle", &xtitle);
      R__insp.InspectMember(xtitle, "xtitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ytitle", &ytitle);
      R__insp.InspectMember(ytitle, "ytitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncol", &ncol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "opt", &opt);
      R__insp.InspectMember(opt, "opt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "col", &col);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t1", &t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t2", &t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fft", &fft);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f1", &f1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f2", &f2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "psd", &psd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t3", &t3);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_watplot(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::watplot : new ::watplot;
   }
   static void *newArray_watplot(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::watplot[nElements] : new ::watplot[nElements];
   }
   // Wrapper around operator delete
   static void delete_watplot(void *p) {
      delete ((::watplot*)p);
   }
   static void deleteArray_watplot(void *p) {
      delete [] ((::watplot*)p);
   }
   static void destruct_watplot(void *p) {
      typedef ::watplot current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_watplot(TBuffer &buf, void *obj) {
      ((::watplot*)obj)->::watplot::Streamer(buf);
   }
} // end of namespace ROOT for class ::watplot

//______________________________________________________________________________
void regression::Streamer(TBuffer &R__b)
{
   // Stream an object of class regression.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> kSIZE;
      R__b >> Edge;
      R__b >> pOUT;
      {
         vector<WSeries<double> > &R__stl =  chList;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            WSeries<double> R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<char*> &R__stl =  chName;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(char*));
         if (R__tcl1==0) {
            Error("chName streamer","Missing the TClass object for char*!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            char* R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<wavearray<int> > &R__stl =  chMask;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            wavearray<int> R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Wiener> &R__stl =  FILTER;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(Wiener));
         if (R__tcl1==0) {
            Error("FILTER streamer","Missing the TClass object for Wiener!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            Wiener R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<TMatrixDSym> &R__stl =  matrix;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TMatrixTSym<double> R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<wavearray<double> > &R__stl =  vCROSS;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            wavearray<double> R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<wavearray<double> > &R__stl =  vEIGEN;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            wavearray<double> R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      target.Streamer(R__b);
      rnoise.Streamer(R__b);
      WNoise.Streamer(R__b);
      {
         vector<wavearray<double> > &R__stl =  vrank;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            wavearray<double> R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      vfreq.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, regression::IsA());
   } else {
      R__c = R__b.WriteVersion(regression::IsA(), kTRUE);
      R__b << kSIZE;
      R__b << Edge;
      R__b << pOUT;
      {
         vector<WSeries<double> > &R__stl =  chList;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<WSeries<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((WSeries<double>&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<char*> &R__stl =  chName;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(char*));
         if (R__tcl1==0) {
            Error("chName streamer","Missing the TClass object for char*!");
            return;
         }
            vector<char*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((char*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<wavearray<int> > &R__stl =  chMask;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<wavearray<int> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((wavearray<int>&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<Wiener> &R__stl =  FILTER;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(Wiener));
         if (R__tcl1==0) {
            Error("FILTER streamer","Missing the TClass object for Wiener!");
            return;
         }
            vector<Wiener>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((Wiener*)&(*R__k),R__tcl1);
            }
         }
      }
      {
         vector<TMatrixDSym> &R__stl =  matrix;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TMatrixDSym>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TMatrixTSym<double>&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<wavearray<double> > &R__stl =  vCROSS;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<wavearray<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((wavearray<double>&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<wavearray<double> > &R__stl =  vEIGEN;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<wavearray<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((wavearray<double>&)(*R__k)).Streamer(R__b);
            }
         }
      }
      target.Streamer(R__b);
      rnoise.Streamer(R__b);
      WNoise.Streamer(R__b);
      {
         vector<wavearray<double> > &R__stl =  vrank;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<wavearray<double> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((wavearray<double>&)(*R__k)).Streamer(R__b);
            }
         }
      }
      vfreq.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void regression::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class regression.
      TClass *R__cl = ::regression::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kSIZE", &kSIZE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edge", &Edge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pOUT", &pOUT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chList", (void*)&chList);
      R__insp.InspectMember("vector<WSeries<double> >", (void*)&chList, "chList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chName", (void*)&chName);
      R__insp.InspectMember("vector<char*>", (void*)&chName, "chName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chMask", (void*)&chMask);
      R__insp.InspectMember("vector<wavearray<int> >", (void*)&chMask, "chMask.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FILTER", (void*)&FILTER);
      R__insp.InspectMember("vector<Wiener>", (void*)&FILTER, "FILTER.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "matrix", (void*)&matrix);
      R__insp.InspectMember("vector<TMatrixDSym>", (void*)&matrix, "matrix.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vCROSS", (void*)&vCROSS);
      R__insp.InspectMember("vector<wavearray<double> >", (void*)&vCROSS, "vCROSS.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vEIGEN", (void*)&vEIGEN);
      R__insp.InspectMember("vector<wavearray<double> >", (void*)&vEIGEN, "vEIGEN.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "target", &target);
      R__insp.InspectMember(target, "target.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rnoise", &rnoise);
      R__insp.InspectMember(rnoise, "rnoise.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WNoise", &WNoise);
      R__insp.InspectMember(WNoise, "WNoise.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vrank", (void*)&vrank);
      R__insp.InspectMember("vector<wavearray<double> >", (void*)&vrank, "vrank.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vfreq", &vfreq);
      R__insp.InspectMember(vfreq, "vfreq.");
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_regression(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::regression : new ::regression;
   }
   static void *newArray_regression(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::regression[nElements] : new ::regression[nElements];
   }
   // Wrapper around operator delete
   static void delete_regression(void *p) {
      delete ((::regression*)p);
   }
   static void deleteArray_regression(void *p) {
      delete [] ((::regression*)p);
   }
   static void destruct_regression(void *p) {
      typedef ::regression current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_regression(TBuffer &buf, void *obj) {
      ((::regression*)obj)->::regression::Streamer(buf);
   }
} // end of namespace ROOT for class ::regression

//______________________________________________________________________________
namespace ROOT {
   void SSerieslEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SSeries<float>.
      typedef ::ROOT::Shadow::SSerieslEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SSeries<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "core", &sobj->core);
      R__insp.InspectMember(sobj->core, "core.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sparseLookup", &sobj->sparseLookup);
      R__insp.InspectMember(sobj->sparseLookup, "sparseLookup.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sparseType", &sobj->sparseType);
      R__insp.InspectMember(sobj->sparseType, "sparseType.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sparseIndex", &sobj->sparseIndex);
      R__insp.InspectMember(sobj->sparseIndex, "sparseIndex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sparseMap00", &sobj->sparseMap00);
      R__insp.InspectMember(sobj->sparseMap00, "sparseMap00.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sparseMap90", &sobj->sparseMap90);
      R__insp.InspectMember(sobj->sparseMap90, "sparseMap90.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layerHalo", &sobj->layerHalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_Halo", &sobj->time_Halo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "extraHalo", &sobj->extraHalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "net_Delay", &sobj->net_Delay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_BetaOrder", &sobj->wdm_BetaOrder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_m_Layer", &sobj->wdm_m_Layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_KWDM", &sobj->wdm_KWDM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_precision", &sobj->wdm_precision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_rate", &sobj->wdm_rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_start", &sobj->wdm_start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_nSTS", &sobj->wdm_nSTS);
      sobj->WSeries<float>::ShowMembers(R__insp);
   }

}

template <> void SSeries<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SSerieslEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SSerieslEfloatgR(void *p) {
      return  p ? new(p) ::SSeries<float> : new ::SSeries<float>;
   }
   static void *newArray_SSerieslEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::SSeries<float>[nElements] : new ::SSeries<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SSerieslEfloatgR(void *p) {
      delete ((::SSeries<float>*)p);
   }
   static void deleteArray_SSerieslEfloatgR(void *p) {
      delete [] ((::SSeries<float>*)p);
   }
   static void destruct_SSerieslEfloatgR(void *p) {
      typedef ::SSeries<float> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_SSerieslEfloatgR(TBuffer &buf, void *obj) {
      ((::SSeries<float>*)obj)->::SSeries<float>::Streamer(buf);
   }
} // end of namespace ROOT for class ::SSeries<float>

//______________________________________________________________________________
namespace ROOT {
   void SSerieslEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SSeries<double>.
      typedef ::ROOT::Shadow::SSerieslEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SSeries<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "core", &sobj->core);
      R__insp.InspectMember(sobj->core, "core.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sparseLookup", &sobj->sparseLookup);
      R__insp.InspectMember(sobj->sparseLookup, "sparseLookup.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sparseType", &sobj->sparseType);
      R__insp.InspectMember(sobj->sparseType, "sparseType.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sparseIndex", &sobj->sparseIndex);
      R__insp.InspectMember(sobj->sparseIndex, "sparseIndex.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sparseMap00", &sobj->sparseMap00);
      R__insp.InspectMember(sobj->sparseMap00, "sparseMap00.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sparseMap90", &sobj->sparseMap90);
      R__insp.InspectMember(sobj->sparseMap90, "sparseMap90.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layerHalo", &sobj->layerHalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_Halo", &sobj->time_Halo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "extraHalo", &sobj->extraHalo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "net_Delay", &sobj->net_Delay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_BetaOrder", &sobj->wdm_BetaOrder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_m_Layer", &sobj->wdm_m_Layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_KWDM", &sobj->wdm_KWDM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_precision", &sobj->wdm_precision);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_rate", &sobj->wdm_rate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_start", &sobj->wdm_start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wdm_nSTS", &sobj->wdm_nSTS);
      sobj->WSeries<double>::ShowMembers(R__insp);
   }

}

template <> void SSeries<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SSerieslEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SSerieslEdoublegR(void *p) {
      return  p ? new(p) ::SSeries<double> : new ::SSeries<double>;
   }
   static void *newArray_SSerieslEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::SSeries<double>[nElements] : new ::SSeries<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SSerieslEdoublegR(void *p) {
      delete ((::SSeries<double>*)p);
   }
   static void deleteArray_SSerieslEdoublegR(void *p) {
      delete [] ((::SSeries<double>*)p);
   }
   static void destruct_SSerieslEdoublegR(void *p) {
      typedef ::SSeries<double> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_SSerieslEdoublegR(TBuffer &buf, void *obj) {
      ((::SSeries<double>*)obj)->::SSeries<double>::Streamer(buf);
   }
} // end of namespace ROOT for class ::SSeries<double>

      namespace wat {
//______________________________________________________________________________
void Time::Streamer(TBuffer &R__b)
{
   // Stream an object of class wat::Time.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::wat::Time thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> mSec;
      R__b >> mNSec;
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      R__b << mSec;
      R__b << mNSec;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace wat
//______________________________________________________________________________
      namespace wat {
void Time::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class wat::Time.
      TClass *R__cl = ::wat::Time::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mSec", &mSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mNSec", &mNSec);
}

} // namespace wat
namespace ROOT {
   // Wrappers around operator new
   static void *new_watcLcLTime(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wat::Time : new ::wat::Time;
   }
   static void *newArray_watcLcLTime(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::wat::Time[nElements] : new ::wat::Time[nElements];
   }
   // Wrapper around operator delete
   static void delete_watcLcLTime(void *p) {
      delete ((::wat::Time*)p);
   }
   static void deleteArray_watcLcLTime(void *p) {
      delete [] ((::wat::Time*)p);
   }
   static void destruct_watcLcLTime(void *p) {
      typedef ::wat::Time current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_watcLcLTime(TBuffer &buf, void *obj) {
      ((::wat::Time*)obj)->::wat::Time::Streamer(buf);
   }
} // end of namespace ROOT for class ::wat::Time

//______________________________________________________________________________
namespace ROOT {
   void pixdata_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class pixdata.
      typedef ::ROOT::Shadow::pixdata ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::pixdata*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noiserms", &sobj->noiserms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wave", &sobj->wave);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "w_90", &sobj->w_90);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "asnr", &sobj->asnr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "a_90", &sobj->a_90);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rank", &sobj->rank);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &sobj->index);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pixdata(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::pixdata : new ::pixdata;
   }
   static void *newArray_pixdata(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::pixdata[nElements] : new ::pixdata[nElements];
   }
   // Wrapper around operator delete
   static void delete_pixdata(void *p) {
      delete ((::pixdata*)p);
   }
   static void deleteArray_pixdata(void *p) {
      delete [] ((::pixdata*)p);
   }
   static void destruct_pixdata(void *p) {
      typedef ::pixdata current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::pixdata

//______________________________________________________________________________
namespace ROOT {
   void delayFilter_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class delayFilter.
      typedef ::ROOT::Shadow::delayFilter ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::delayFilter*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", (void*)&sobj->index);
      R__insp.InspectMember("vector<short>", (void*)&sobj->index, "index.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "value", (void*)&sobj->value);
      R__insp.InspectMember("vector<float>", (void*)&sobj->value, "value.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_delayFilter(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::delayFilter : new ::delayFilter;
   }
   static void *newArray_delayFilter(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::delayFilter[nElements] : new ::delayFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_delayFilter(void *p) {
      delete ((::delayFilter*)p);
   }
   static void deleteArray_delayFilter(void *p) {
      delete [] ((::delayFilter*)p);
   }
   static void destruct_delayFilter(void *p) {
      typedef ::delayFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::delayFilter

//______________________________________________________________________________
namespace ROOT {
   void detectorParams_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class detectorParams.
      typedef ::ROOT::Shadow::detectorParams ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::detectorParams*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name[32]", sobj->name);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "latitude", &sobj->latitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "longitude", &sobj->longitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "elevation", &sobj->elevation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AltX", &sobj->AltX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AzX", &sobj->AzX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AltY", &sobj->AltY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AzY", &sobj->AzY);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_detectorParams(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::detectorParams : new ::detectorParams;
   }
   static void *newArray_detectorParams(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::detectorParams[nElements] : new ::detectorParams[nElements];
   }
   // Wrapper around operator delete
   static void delete_detectorParams(void *p) {
      delete ((::detectorParams*)p);
   }
   static void deleteArray_detectorParams(void *p) {
      delete [] ((::detectorParams*)p);
   }
   static void destruct_detectorParams(void *p) {
      typedef ::detectorParams current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::detectorParams

//______________________________________________________________________________
namespace ROOT {
   void waveSegment_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class waveSegment.
      typedef ::ROOT::Shadow::waveSegment ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::waveSegment*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &sobj->index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start", &sobj->start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stop", &sobj->stop);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_waveSegment(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::waveSegment : new ::waveSegment;
   }
   static void *newArray_waveSegment(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::waveSegment[nElements] : new ::waveSegment[nElements];
   }
   // Wrapper around operator delete
   static void delete_waveSegment(void *p) {
      delete ((::waveSegment*)p);
   }
   static void deleteArray_waveSegment(void *p) {
      delete [] ((::waveSegment*)p);
   }
   static void destruct_waveSegment(void *p) {
      typedef ::waveSegment current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::waveSegment

namespace ROOT {
   void listlEvectorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void listlEvectorlEintgRsPgR_Dictionary();
   static void *new_listlEvectorlEintgRsPgR(void *p = 0);
   static void *newArray_listlEvectorlEintgRsPgR(Long_t size, void *p);
   static void delete_listlEvectorlEintgRsPgR(void *p);
   static void deleteArray_listlEvectorlEintgRsPgR(void *p);
   static void destruct_listlEvectorlEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const list<vector<int> >*)
   {
      list<vector<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(list<vector<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("list<vector<int> >", -2, "prec_stl/list", 44,
                  typeid(list<vector<int> >), DefineBehavior(ptr, ptr),
                  0, &listlEvectorlEintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(list<vector<int> >) );
      instance.SetNew(&new_listlEvectorlEintgRsPgR);
      instance.SetNewArray(&newArray_listlEvectorlEintgRsPgR);
      instance.SetDelete(&delete_listlEvectorlEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_listlEvectorlEintgRsPgR);
      instance.SetDestructor(&destruct_listlEvectorlEintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< list<vector<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const list<vector<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void listlEvectorlEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const list<vector<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_listlEvectorlEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) list<vector<int> > : new list<vector<int> >;
   }
   static void *newArray_listlEvectorlEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) list<vector<int> >[nElements] : new list<vector<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_listlEvectorlEintgRsPgR(void *p) {
      delete ((list<vector<int> >*)p);
   }
   static void deleteArray_listlEvectorlEintgRsPgR(void *p) {
      delete [] ((list<vector<int> >*)p);
   }
   static void destruct_listlEvectorlEintgRsPgR(void *p) {
      typedef list<vector<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class list<vector<int> >

namespace ROOT {
   void vectorlESSerieslEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESSerieslEdoublegRsPgR_Dictionary();
   static void *new_vectorlESSerieslEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlESSerieslEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlESSerieslEdoublegRsPgR(void *p);
   static void deleteArray_vectorlESSerieslEdoublegRsPgR(void *p);
   static void destruct_vectorlESSerieslEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SSeries<double> >*)
   {
      vector<SSeries<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SSeries<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SSeries<double> >", -2, "prec_stl/vector", 49,
                  typeid(vector<SSeries<double> >), DefineBehavior(ptr, ptr),
                  0, &vectorlESSerieslEdoublegRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<SSeries<double> >) );
      instance.SetNew(&new_vectorlESSerieslEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlESSerieslEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlESSerieslEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlESSerieslEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlESSerieslEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SSeries<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SSeries<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESSerieslEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SSeries<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESSerieslEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SSeries<double> > : new vector<SSeries<double> >;
   }
   static void *newArray_vectorlESSerieslEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SSeries<double> >[nElements] : new vector<SSeries<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESSerieslEdoublegRsPgR(void *p) {
      delete ((vector<SSeries<double> >*)p);
   }
   static void deleteArray_vectorlESSerieslEdoublegRsPgR(void *p) {
      delete [] ((vector<SSeries<double> >*)p);
   }
   static void destruct_vectorlESSerieslEdoublegRsPgR(void *p) {
      typedef vector<SSeries<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SSeries<double> >

namespace ROOT {
   void vectorlESymmArraySSElEfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESymmArraySSElEfloatgRsPgR_Dictionary();
   static void *new_vectorlESymmArraySSElEfloatgRsPgR(void *p = 0);
   static void *newArray_vectorlESymmArraySSElEfloatgRsPgR(Long_t size, void *p);
   static void delete_vectorlESymmArraySSElEfloatgRsPgR(void *p);
   static void deleteArray_vectorlESymmArraySSElEfloatgRsPgR(void *p);
   static void destruct_vectorlESymmArraySSElEfloatgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SymmArraySSE<float> >*)
   {
      vector<SymmArraySSE<float> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SymmArraySSE<float> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SymmArraySSE<float> >", -2, "prec_stl/vector", 49,
                  typeid(vector<SymmArraySSE<float> >), DefineBehavior(ptr, ptr),
                  0, &vectorlESymmArraySSElEfloatgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<SymmArraySSE<float> >) );
      instance.SetNew(&new_vectorlESymmArraySSElEfloatgRsPgR);
      instance.SetNewArray(&newArray_vectorlESymmArraySSElEfloatgRsPgR);
      instance.SetDelete(&delete_vectorlESymmArraySSElEfloatgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlESymmArraySSElEfloatgRsPgR);
      instance.SetDestructor(&destruct_vectorlESymmArraySSElEfloatgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SymmArraySSE<float> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SymmArraySSE<float> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESymmArraySSElEfloatgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SymmArraySSE<float> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESymmArraySSElEfloatgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SymmArraySSE<float> > : new vector<SymmArraySSE<float> >;
   }
   static void *newArray_vectorlESymmArraySSElEfloatgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SymmArraySSE<float> >[nElements] : new vector<SymmArraySSE<float> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESymmArraySSElEfloatgRsPgR(void *p) {
      delete ((vector<SymmArraySSE<float> >*)p);
   }
   static void deleteArray_vectorlESymmArraySSElEfloatgRsPgR(void *p) {
      delete [] ((vector<SymmArraySSE<float> >*)p);
   }
   static void destruct_vectorlESymmArraySSElEfloatgRsPgR(void *p) {
      typedef vector<SymmArraySSE<float> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SymmArraySSE<float> >

namespace ROOT {
   void vectorlETGraphmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETGraphmUgR_Dictionary();
   static void *new_vectorlETGraphmUgR(void *p = 0);
   static void *newArray_vectorlETGraphmUgR(Long_t size, void *p);
   static void delete_vectorlETGraphmUgR(void *p);
   static void deleteArray_vectorlETGraphmUgR(void *p);
   static void destruct_vectorlETGraphmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TGraph*>*)
   {
      vector<TGraph*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TGraph*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TGraph*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TGraph*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETGraphmUgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<TGraph*>) );
      instance.SetNew(&new_vectorlETGraphmUgR);
      instance.SetNewArray(&newArray_vectorlETGraphmUgR);
      instance.SetDelete(&delete_vectorlETGraphmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETGraphmUgR);
      instance.SetDestructor(&destruct_vectorlETGraphmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TGraph*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TGraph*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETGraphmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TGraph*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETGraphmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TGraph*> : new vector<TGraph*>;
   }
   static void *newArray_vectorlETGraphmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TGraph*>[nElements] : new vector<TGraph*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETGraphmUgR(void *p) {
      delete ((vector<TGraph*>*)p);
   }
   static void deleteArray_vectorlETGraphmUgR(void *p) {
      delete [] ((vector<TGraph*>*)p);
   }
   static void destruct_vectorlETGraphmUgR(void *p) {
      typedef vector<TGraph*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TGraph*>

namespace ROOT {
   void vectorlETH1FmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETH1FmUgR_Dictionary();
   static void *new_vectorlETH1FmUgR(void *p = 0);
   static void *newArray_vectorlETH1FmUgR(Long_t size, void *p);
   static void delete_vectorlETH1FmUgR(void *p);
   static void deleteArray_vectorlETH1FmUgR(void *p);
   static void destruct_vectorlETH1FmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TH1F*>*)
   {
      vector<TH1F*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TH1F*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TH1F*>", -2, "prec_stl/vector", 49,
                  typeid(vector<TH1F*>), DefineBehavior(ptr, ptr),
                  0, &vectorlETH1FmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TH1F*>) );
      instance.SetNew(&new_vectorlETH1FmUgR);
      instance.SetNewArray(&newArray_vectorlETH1FmUgR);
      instance.SetDelete(&delete_vectorlETH1FmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlETH1FmUgR);
      instance.SetDestructor(&destruct_vectorlETH1FmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TH1F*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TH1F*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETH1FmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TH1F*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETH1FmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH1F*> : new vector<TH1F*>;
   }
   static void *newArray_vectorlETH1FmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TH1F*>[nElements] : new vector<TH1F*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETH1FmUgR(void *p) {
      delete ((vector<TH1F*>*)p);
   }
   static void deleteArray_vectorlETH1FmUgR(void *p) {
      delete [] ((vector<TH1F*>*)p);
   }
   static void destruct_vectorlETH1FmUgR(void *p) {
      typedef vector<TH1F*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TH1F*>

namespace ROOT {
   void vectorlETMatrixTSymlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETMatrixTSymlEdoublegRsPgR_Dictionary();
   static void *new_vectorlETMatrixTSymlEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlETMatrixTSymlEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlETMatrixTSymlEdoublegRsPgR(void *p);
   static void deleteArray_vectorlETMatrixTSymlEdoublegRsPgR(void *p);
   static void destruct_vectorlETMatrixTSymlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TMatrixTSym<double> >*)
   {
      vector<TMatrixTSym<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TMatrixTSym<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TMatrixTSym<double> >", -2, "prec_stl/vector", 49,
                  typeid(vector<TMatrixTSym<double> >), DefineBehavior(ptr, ptr),
                  0, &vectorlETMatrixTSymlEdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TMatrixTSym<double> >) );
      instance.SetNew(&new_vectorlETMatrixTSymlEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlETMatrixTSymlEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlETMatrixTSymlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlETMatrixTSymlEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlETMatrixTSymlEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TMatrixTSym<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TMatrixTSym<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETMatrixTSymlEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TMatrixTSym<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETMatrixTSymlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TMatrixTSym<double> > : new vector<TMatrixTSym<double> >;
   }
   static void *newArray_vectorlETMatrixTSymlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TMatrixTSym<double> >[nElements] : new vector<TMatrixTSym<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETMatrixTSymlEdoublegRsPgR(void *p) {
      delete ((vector<TMatrixTSym<double> >*)p);
   }
   static void deleteArray_vectorlETMatrixTSymlEdoublegRsPgR(void *p) {
      delete [] ((vector<TMatrixTSym<double> >*)p);
   }
   static void destruct_vectorlETMatrixTSymlEdoublegRsPgR(void *p) {
      typedef vector<TMatrixTSym<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TMatrixTSym<double> >

namespace ROOT {
   void vectorlEWDMlEdoublegRmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEWDMlEdoublegRmUgR_Dictionary();
   static void *new_vectorlEWDMlEdoublegRmUgR(void *p = 0);
   static void *newArray_vectorlEWDMlEdoublegRmUgR(Long_t size, void *p);
   static void delete_vectorlEWDMlEdoublegRmUgR(void *p);
   static void deleteArray_vectorlEWDMlEdoublegRmUgR(void *p);
   static void destruct_vectorlEWDMlEdoublegRmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<WDM<double>*>*)
   {
      vector<WDM<double>*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<WDM<double>*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<WDM<double>*>", -2, "prec_stl/vector", 49,
                  typeid(vector<WDM<double>*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEWDMlEdoublegRmUgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<WDM<double>*>) );
      instance.SetNew(&new_vectorlEWDMlEdoublegRmUgR);
      instance.SetNewArray(&newArray_vectorlEWDMlEdoublegRmUgR);
      instance.SetDelete(&delete_vectorlEWDMlEdoublegRmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEWDMlEdoublegRmUgR);
      instance.SetDestructor(&destruct_vectorlEWDMlEdoublegRmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<WDM<double>*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<WDM<double>*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEWDMlEdoublegRmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<WDM<double>*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEWDMlEdoublegRmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<WDM<double>*> : new vector<WDM<double>*>;
   }
   static void *newArray_vectorlEWDMlEdoublegRmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<WDM<double>*>[nElements] : new vector<WDM<double>*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEWDMlEdoublegRmUgR(void *p) {
      delete ((vector<WDM<double>*>*)p);
   }
   static void deleteArray_vectorlEWDMlEdoublegRmUgR(void *p) {
      delete [] ((vector<WDM<double>*>*)p);
   }
   static void destruct_vectorlEWDMlEdoublegRmUgR(void *p) {
      typedef vector<WDM<double>*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<WDM<double>*>

namespace ROOT {
   void vectorlEWSerieslEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEWSerieslEdoublegRsPgR_Dictionary();
   static void *new_vectorlEWSerieslEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlEWSerieslEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlEWSerieslEdoublegRsPgR(void *p);
   static void deleteArray_vectorlEWSerieslEdoublegRsPgR(void *p);
   static void destruct_vectorlEWSerieslEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<WSeries<double> >*)
   {
      vector<WSeries<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<WSeries<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<WSeries<double> >", -2, "prec_stl/vector", 49,
                  typeid(vector<WSeries<double> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEWSerieslEdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<WSeries<double> >) );
      instance.SetNew(&new_vectorlEWSerieslEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlEWSerieslEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlEWSerieslEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEWSerieslEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlEWSerieslEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<WSeries<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<WSeries<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEWSerieslEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<WSeries<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEWSerieslEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<WSeries<double> > : new vector<WSeries<double> >;
   }
   static void *newArray_vectorlEWSerieslEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<WSeries<double> >[nElements] : new vector<WSeries<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEWSerieslEdoublegRsPgR(void *p) {
      delete ((vector<WSeries<double> >*)p);
   }
   static void deleteArray_vectorlEWSerieslEdoublegRsPgR(void *p) {
      delete [] ((vector<WSeries<double> >*)p);
   }
   static void destruct_vectorlEWSerieslEdoublegRsPgR(void *p) {
      typedef vector<WSeries<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<WSeries<double> >

namespace ROOT {
   void vectorlEWSerieslEdoublegRmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEWSerieslEdoublegRmUgR_Dictionary();
   static void *new_vectorlEWSerieslEdoublegRmUgR(void *p = 0);
   static void *newArray_vectorlEWSerieslEdoublegRmUgR(Long_t size, void *p);
   static void delete_vectorlEWSerieslEdoublegRmUgR(void *p);
   static void deleteArray_vectorlEWSerieslEdoublegRmUgR(void *p);
   static void destruct_vectorlEWSerieslEdoublegRmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<WSeries<double>*>*)
   {
      vector<WSeries<double>*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<WSeries<double>*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<WSeries<double>*>", -2, "prec_stl/vector", 49,
                  typeid(vector<WSeries<double>*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEWSerieslEdoublegRmUgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<WSeries<double>*>) );
      instance.SetNew(&new_vectorlEWSerieslEdoublegRmUgR);
      instance.SetNewArray(&newArray_vectorlEWSerieslEdoublegRmUgR);
      instance.SetDelete(&delete_vectorlEWSerieslEdoublegRmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEWSerieslEdoublegRmUgR);
      instance.SetDestructor(&destruct_vectorlEWSerieslEdoublegRmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<WSeries<double>*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<WSeries<double>*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEWSerieslEdoublegRmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<WSeries<double>*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEWSerieslEdoublegRmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<WSeries<double>*> : new vector<WSeries<double>*>;
   }
   static void *newArray_vectorlEWSerieslEdoublegRmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<WSeries<double>*>[nElements] : new vector<WSeries<double>*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEWSerieslEdoublegRmUgR(void *p) {
      delete ((vector<WSeries<double>*>*)p);
   }
   static void deleteArray_vectorlEWSerieslEdoublegRmUgR(void *p) {
      delete [] ((vector<WSeries<double>*>*)p);
   }
   static void destruct_vectorlEWSerieslEdoublegRmUgR(void *p) {
      typedef vector<WSeries<double>*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<WSeries<double>*>

namespace ROOT {
   void vectorlEWienergR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEWienergR_Dictionary();
   static void *new_vectorlEWienergR(void *p = 0);
   static void *newArray_vectorlEWienergR(Long_t size, void *p);
   static void delete_vectorlEWienergR(void *p);
   static void deleteArray_vectorlEWienergR(void *p);
   static void destruct_vectorlEWienergR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Wiener>*)
   {
      vector<Wiener> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Wiener>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Wiener>", -2, "prec_stl/vector", 49,
                  typeid(vector<Wiener>), DefineBehavior(ptr, ptr),
                  0, &vectorlEWienergR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Wiener>) );
      instance.SetNew(&new_vectorlEWienergR);
      instance.SetNewArray(&newArray_vectorlEWienergR);
      instance.SetDelete(&delete_vectorlEWienergR);
      instance.SetDeleteArray(&deleteArray_vectorlEWienergR);
      instance.SetDestructor(&destruct_vectorlEWienergR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Wiener> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Wiener>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEWienergR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Wiener>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEWienergR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Wiener> : new vector<Wiener>;
   }
   static void *newArray_vectorlEWienergR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Wiener>[nElements] : new vector<Wiener>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEWienergR(void *p) {
      delete ((vector<Wiener>*)p);
   }
   static void deleteArray_vectorlEWienergR(void *p) {
      delete [] ((vector<Wiener>*)p);
   }
   static void destruct_vectorlEWienergR(void *p) {
      typedef vector<Wiener> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Wiener>

namespace ROOT {
   void vectorlEcharmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEcharmUgR_Dictionary();
   static void *new_vectorlEcharmUgR(void *p = 0);
   static void *newArray_vectorlEcharmUgR(Long_t size, void *p);
   static void delete_vectorlEcharmUgR(void *p);
   static void deleteArray_vectorlEcharmUgR(void *p);
   static void destruct_vectorlEcharmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<char*>*)
   {
      vector<char*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<char*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<char*>", -2, "vector.dll", 0,
                  typeid(vector<char*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEcharmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<char*>) );
      instance.SetNew(&new_vectorlEcharmUgR);
      instance.SetNewArray(&newArray_vectorlEcharmUgR);
      instance.SetDelete(&delete_vectorlEcharmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEcharmUgR);
      instance.SetDestructor(&destruct_vectorlEcharmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<char*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<char*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEcharmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<char*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEcharmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<char*> : new vector<char*>;
   }
   static void *newArray_vectorlEcharmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<char*>[nElements] : new vector<char*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEcharmUgR(void *p) {
      delete ((vector<char*>*)p);
   }
   static void deleteArray_vectorlEcharmUgR(void *p) {
      delete [] ((vector<char*>*)p);
   }
   static void destruct_vectorlEcharmUgR(void *p) {
      typedef vector<char*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<char*>

namespace ROOT {
   void vectorlEclusterdatagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEclusterdatagR_Dictionary();
   static void *new_vectorlEclusterdatagR(void *p = 0);
   static void *newArray_vectorlEclusterdatagR(Long_t size, void *p);
   static void delete_vectorlEclusterdatagR(void *p);
   static void deleteArray_vectorlEclusterdatagR(void *p);
   static void destruct_vectorlEclusterdatagR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<clusterdata>*)
   {
      vector<clusterdata> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<clusterdata>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<clusterdata>", -2, "prec_stl/vector", 49,
                  typeid(vector<clusterdata>), DefineBehavior(ptr, ptr),
                  0, &vectorlEclusterdatagR_Dictionary, isa_proxy, 4,
                  sizeof(vector<clusterdata>) );
      instance.SetNew(&new_vectorlEclusterdatagR);
      instance.SetNewArray(&newArray_vectorlEclusterdatagR);
      instance.SetDelete(&delete_vectorlEclusterdatagR);
      instance.SetDeleteArray(&deleteArray_vectorlEclusterdatagR);
      instance.SetDestructor(&destruct_vectorlEclusterdatagR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<clusterdata> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<clusterdata>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEclusterdatagR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<clusterdata>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEclusterdatagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<clusterdata> : new vector<clusterdata>;
   }
   static void *newArray_vectorlEclusterdatagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<clusterdata>[nElements] : new vector<clusterdata>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEclusterdatagR(void *p) {
      delete ((vector<clusterdata>*)p);
   }
   static void deleteArray_vectorlEclusterdatagR(void *p) {
      delete [] ((vector<clusterdata>*)p);
   }
   static void destruct_vectorlEclusterdatagR(void *p) {
      typedef vector<clusterdata> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<clusterdata>

namespace ROOT {
   void vectorlEdelayFiltergR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdelayFiltergR_Dictionary();
   static void *new_vectorlEdelayFiltergR(void *p = 0);
   static void *newArray_vectorlEdelayFiltergR(Long_t size, void *p);
   static void delete_vectorlEdelayFiltergR(void *p);
   static void deleteArray_vectorlEdelayFiltergR(void *p);
   static void destruct_vectorlEdelayFiltergR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<delayFilter>*)
   {
      vector<delayFilter> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<delayFilter>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<delayFilter>", -2, "prec_stl/vector", 49,
                  typeid(vector<delayFilter>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdelayFiltergR_Dictionary, isa_proxy, 4,
                  sizeof(vector<delayFilter>) );
      instance.SetNew(&new_vectorlEdelayFiltergR);
      instance.SetNewArray(&newArray_vectorlEdelayFiltergR);
      instance.SetDelete(&delete_vectorlEdelayFiltergR);
      instance.SetDeleteArray(&deleteArray_vectorlEdelayFiltergR);
      instance.SetDestructor(&destruct_vectorlEdelayFiltergR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<delayFilter> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<delayFilter>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdelayFiltergR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<delayFilter>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdelayFiltergR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<delayFilter> : new vector<delayFilter>;
   }
   static void *newArray_vectorlEdelayFiltergR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<delayFilter>[nElements] : new vector<delayFilter>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdelayFiltergR(void *p) {
      delete ((vector<delayFilter>*)p);
   }
   static void deleteArray_vectorlEdelayFiltergR(void *p) {
      delete [] ((vector<delayFilter>*)p);
   }
   static void destruct_vectorlEdelayFiltergR(void *p) {
      typedef vector<delayFilter> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<delayFilter>

namespace ROOT {
   void vectorlEdetectormUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdetectormUgR_Dictionary();
   static void *new_vectorlEdetectormUgR(void *p = 0);
   static void *newArray_vectorlEdetectormUgR(Long_t size, void *p);
   static void delete_vectorlEdetectormUgR(void *p);
   static void deleteArray_vectorlEdetectormUgR(void *p);
   static void destruct_vectorlEdetectormUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<detector*>*)
   {
      vector<detector*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<detector*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<detector*>", -2, "prec_stl/vector", 49,
                  typeid(vector<detector*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdetectormUgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<detector*>) );
      instance.SetNew(&new_vectorlEdetectormUgR);
      instance.SetNewArray(&newArray_vectorlEdetectormUgR);
      instance.SetDelete(&delete_vectorlEdetectormUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEdetectormUgR);
      instance.SetDestructor(&destruct_vectorlEdetectormUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<detector*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<detector*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdetectormUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<detector*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdetectormUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<detector*> : new vector<detector*>;
   }
   static void *newArray_vectorlEdetectormUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<detector*>[nElements] : new vector<detector*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdetectormUgR(void *p) {
      delete ((vector<detector*>*)p);
   }
   static void deleteArray_vectorlEdetectormUgR(void *p) {
      delete [] ((vector<detector*>*)p);
   }
   static void destruct_vectorlEdetectormUgR(void *p) {
      typedef vector<detector*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<detector*>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEnetclustergR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEnetclustergR_Dictionary();
   static void *new_vectorlEnetclustergR(void *p = 0);
   static void *newArray_vectorlEnetclustergR(Long_t size, void *p);
   static void delete_vectorlEnetclustergR(void *p);
   static void deleteArray_vectorlEnetclustergR(void *p);
   static void destruct_vectorlEnetclustergR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<netcluster>*)
   {
      vector<netcluster> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<netcluster>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<netcluster>", -2, "prec_stl/vector", 49,
                  typeid(vector<netcluster>), DefineBehavior(ptr, ptr),
                  0, &vectorlEnetclustergR_Dictionary, isa_proxy, 4,
                  sizeof(vector<netcluster>) );
      instance.SetNew(&new_vectorlEnetclustergR);
      instance.SetNewArray(&newArray_vectorlEnetclustergR);
      instance.SetDelete(&delete_vectorlEnetclustergR);
      instance.SetDeleteArray(&deleteArray_vectorlEnetclustergR);
      instance.SetDestructor(&destruct_vectorlEnetclustergR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<netcluster> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<netcluster>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEnetclustergR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<netcluster>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEnetclustergR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<netcluster> : new vector<netcluster>;
   }
   static void *newArray_vectorlEnetclustergR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<netcluster>[nElements] : new vector<netcluster>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEnetclustergR(void *p) {
      delete ((vector<netcluster>*)p);
   }
   static void deleteArray_vectorlEnetclustergR(void *p) {
      delete [] ((vector<netcluster>*)p);
   }
   static void destruct_vectorlEnetclustergR(void *p) {
      typedef vector<netcluster> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<netcluster>

namespace ROOT {
   void vectorlEnetpixelgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEnetpixelgR_Dictionary();
   static void *new_vectorlEnetpixelgR(void *p = 0);
   static void *newArray_vectorlEnetpixelgR(Long_t size, void *p);
   static void delete_vectorlEnetpixelgR(void *p);
   static void deleteArray_vectorlEnetpixelgR(void *p);
   static void destruct_vectorlEnetpixelgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<netpixel>*)
   {
      vector<netpixel> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<netpixel>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<netpixel>", -2, "prec_stl/vector", 49,
                  typeid(vector<netpixel>), DefineBehavior(ptr, ptr),
                  0, &vectorlEnetpixelgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<netpixel>) );
      instance.SetNew(&new_vectorlEnetpixelgR);
      instance.SetNewArray(&newArray_vectorlEnetpixelgR);
      instance.SetDelete(&delete_vectorlEnetpixelgR);
      instance.SetDeleteArray(&deleteArray_vectorlEnetpixelgR);
      instance.SetDestructor(&destruct_vectorlEnetpixelgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<netpixel> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<netpixel>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEnetpixelgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<netpixel>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEnetpixelgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<netpixel> : new vector<netpixel>;
   }
   static void *newArray_vectorlEnetpixelgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<netpixel>[nElements] : new vector<netpixel>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEnetpixelgR(void *p) {
      delete ((vector<netpixel>*)p);
   }
   static void deleteArray_vectorlEnetpixelgR(void *p) {
      delete [] ((vector<netpixel>*)p);
   }
   static void destruct_vectorlEnetpixelgR(void *p) {
      typedef vector<netpixel> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<netpixel>

namespace ROOT {
   void vectorlEpixdatagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpixdatagR_Dictionary();
   static void *new_vectorlEpixdatagR(void *p = 0);
   static void *newArray_vectorlEpixdatagR(Long_t size, void *p);
   static void delete_vectorlEpixdatagR(void *p);
   static void deleteArray_vectorlEpixdatagR(void *p);
   static void destruct_vectorlEpixdatagR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<pixdata>*)
   {
      vector<pixdata> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pixdata>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pixdata>", -2, "prec_stl/vector", 49,
                  typeid(vector<pixdata>), DefineBehavior(ptr, ptr),
                  0, &vectorlEpixdatagR_Dictionary, isa_proxy, 4,
                  sizeof(vector<pixdata>) );
      instance.SetNew(&new_vectorlEpixdatagR);
      instance.SetNewArray(&newArray_vectorlEpixdatagR);
      instance.SetDelete(&delete_vectorlEpixdatagR);
      instance.SetDeleteArray(&deleteArray_vectorlEpixdatagR);
      instance.SetDestructor(&destruct_vectorlEpixdatagR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<pixdata> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pixdata>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpixdatagR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<pixdata>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEpixdatagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pixdata> : new vector<pixdata>;
   }
   static void *newArray_vectorlEpixdatagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pixdata>[nElements] : new vector<pixdata>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpixdatagR(void *p) {
      delete ((vector<pixdata>*)p);
   }
   static void deleteArray_vectorlEpixdatagR(void *p) {
      delete [] ((vector<pixdata>*)p);
   }
   static void destruct_vectorlEpixdatagR(void *p) {
      typedef vector<pixdata> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<pixdata>

namespace ROOT {
   void vectorlEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEshortgR_Dictionary();
   static void *new_vectorlEshortgR(void *p = 0);
   static void *newArray_vectorlEshortgR(Long_t size, void *p);
   static void delete_vectorlEshortgR(void *p);
   static void deleteArray_vectorlEshortgR(void *p);
   static void destruct_vectorlEshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<short>*)
   {
      vector<short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<short>", -2, "vector.dll", 0,
                  typeid(vector<short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<short>) );
      instance.SetNew(&new_vectorlEshortgR);
      instance.SetNewArray(&newArray_vectorlEshortgR);
      instance.SetDelete(&delete_vectorlEshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEshortgR);
      instance.SetDestructor(&destruct_vectorlEshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short> : new vector<short>;
   }
   static void *newArray_vectorlEshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short>[nElements] : new vector<short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEshortgR(void *p) {
      delete ((vector<short>*)p);
   }
   static void deleteArray_vectorlEshortgR(void *p) {
      delete [] ((vector<short>*)p);
   }
   static void destruct_vectorlEshortgR(void *p) {
      typedef vector<short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<short>

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

namespace ROOT {
   void vectorlEunsignedsPlonggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPlonggR_Dictionary();
   static void *new_vectorlEunsignedsPlonggR(void *p = 0);
   static void *newArray_vectorlEunsignedsPlonggR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPlonggR(void *p);
   static void deleteArray_vectorlEunsignedsPlonggR(void *p);
   static void destruct_vectorlEunsignedsPlonggR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned long>*)
   {
      vector<unsigned long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned long>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned long>", -2, "vector.dll", 0,
                  typeid(vector<unsigned long>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPlonggR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned long>) );
      instance.SetNew(&new_vectorlEunsignedsPlonggR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPlonggR);
      instance.SetDelete(&delete_vectorlEunsignedsPlonggR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPlonggR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPlonggR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned long> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPlonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPlonggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned long> : new vector<unsigned long>;
   }
   static void *newArray_vectorlEunsignedsPlonggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned long>[nElements] : new vector<unsigned long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPlonggR(void *p) {
      delete ((vector<unsigned long>*)p);
   }
   static void deleteArray_vectorlEunsignedsPlonggR(void *p) {
      delete [] ((vector<unsigned long>*)p);
   }
   static void destruct_vectorlEunsignedsPlonggR(void *p) {
      typedef vector<unsigned long> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned long>

namespace ROOT {
   void vectorlEvectorlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEdoublegRsPgR_Dictionary();
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p);
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<double> >*)
   {
      vector<vector<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<double> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<double> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEdoublegRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<vector<double> >) );
      instance.SetNew(&new_vectorlEvectorlEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> > : new vector<vector<double> >;
   }
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> >[nElements] : new vector<vector<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete ((vector<vector<double> >*)p);
   }
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete [] ((vector<vector<double> >*)p);
   }
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p) {
      typedef vector<vector<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<double> >

namespace ROOT {
   void vectorlEvectorlEfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEfloatgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEfloatgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEfloatgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEfloatgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEfloatgRsPgR(void *p);
   static void destruct_vectorlEvectorlEfloatgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<float> >*)
   {
      vector<vector<float> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<float> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<float> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<float> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEfloatgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<vector<float> >) );
      instance.SetNew(&new_vectorlEvectorlEfloatgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEfloatgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEfloatgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEfloatgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEfloatgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<float> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<float> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEfloatgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<float> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEfloatgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<float> > : new vector<vector<float> >;
   }
   static void *newArray_vectorlEvectorlEfloatgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<float> >[nElements] : new vector<vector<float> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEfloatgRsPgR(void *p) {
      delete ((vector<vector<float> >*)p);
   }
   static void deleteArray_vectorlEvectorlEfloatgRsPgR(void *p) {
      delete [] ((vector<vector<float> >*)p);
   }
   static void destruct_vectorlEvectorlEfloatgRsPgR(void *p) {
      typedef vector<vector<float> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<float> >

namespace ROOT {
   void vectorlEvectorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEintgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEintgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEintgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p);
   static void destruct_vectorlEvectorlEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<int> >*)
   {
      vector<vector<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<int> >", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<int> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEintgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<vector<int> >) );
      instance.SetNew(&new_vectorlEvectorlEintgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEintgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEintgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> > : new vector<vector<int> >;
   }
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> >[nElements] : new vector<vector<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEintgRsPgR(void *p) {
      delete ((vector<vector<int> >*)p);
   }
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p) {
      delete [] ((vector<vector<int> >*)p);
   }
   static void destruct_vectorlEvectorlEintgRsPgR(void *p) {
      typedef vector<vector<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<int> >

namespace ROOT {
   void vectorlEwaveSegmentgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEwaveSegmentgR_Dictionary();
   static void *new_vectorlEwaveSegmentgR(void *p = 0);
   static void *newArray_vectorlEwaveSegmentgR(Long_t size, void *p);
   static void delete_vectorlEwaveSegmentgR(void *p);
   static void deleteArray_vectorlEwaveSegmentgR(void *p);
   static void destruct_vectorlEwaveSegmentgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<waveSegment>*)
   {
      vector<waveSegment> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<waveSegment>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<waveSegment>", -2, "prec_stl/vector", 49,
                  typeid(vector<waveSegment>), DefineBehavior(ptr, ptr),
                  0, &vectorlEwaveSegmentgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<waveSegment>) );
      instance.SetNew(&new_vectorlEwaveSegmentgR);
      instance.SetNewArray(&newArray_vectorlEwaveSegmentgR);
      instance.SetDelete(&delete_vectorlEwaveSegmentgR);
      instance.SetDeleteArray(&deleteArray_vectorlEwaveSegmentgR);
      instance.SetDestructor(&destruct_vectorlEwaveSegmentgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<waveSegment> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<waveSegment>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEwaveSegmentgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<waveSegment>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEwaveSegmentgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<waveSegment> : new vector<waveSegment>;
   }
   static void *newArray_vectorlEwaveSegmentgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<waveSegment>[nElements] : new vector<waveSegment>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEwaveSegmentgR(void *p) {
      delete ((vector<waveSegment>*)p);
   }
   static void deleteArray_vectorlEwaveSegmentgR(void *p) {
      delete [] ((vector<waveSegment>*)p);
   }
   static void destruct_vectorlEwaveSegmentgR(void *p) {
      typedef vector<waveSegment> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<waveSegment>

namespace ROOT {
   void vectorlEwavearraylEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEwavearraylEdoublegRsPgR_Dictionary();
   static void *new_vectorlEwavearraylEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlEwavearraylEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlEwavearraylEdoublegRsPgR(void *p);
   static void deleteArray_vectorlEwavearraylEdoublegRsPgR(void *p);
   static void destruct_vectorlEwavearraylEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<wavearray<double> >*)
   {
      vector<wavearray<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<wavearray<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<wavearray<double> >", -2, "prec_stl/vector", 49,
                  typeid(vector<wavearray<double> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEwavearraylEdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<wavearray<double> >) );
      instance.SetNew(&new_vectorlEwavearraylEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlEwavearraylEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlEwavearraylEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEwavearraylEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlEwavearraylEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<wavearray<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<wavearray<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEwavearraylEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<wavearray<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEwavearraylEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wavearray<double> > : new vector<wavearray<double> >;
   }
   static void *newArray_vectorlEwavearraylEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wavearray<double> >[nElements] : new vector<wavearray<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEwavearraylEdoublegRsPgR(void *p) {
      delete ((vector<wavearray<double> >*)p);
   }
   static void deleteArray_vectorlEwavearraylEdoublegRsPgR(void *p) {
      delete [] ((vector<wavearray<double> >*)p);
   }
   static void destruct_vectorlEwavearraylEdoublegRsPgR(void *p) {
      typedef vector<wavearray<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<wavearray<double> >

namespace ROOT {
   void vectorlEwavearraylEdoublegRmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEwavearraylEdoublegRmUgR_Dictionary();
   static void *new_vectorlEwavearraylEdoublegRmUgR(void *p = 0);
   static void *newArray_vectorlEwavearraylEdoublegRmUgR(Long_t size, void *p);
   static void delete_vectorlEwavearraylEdoublegRmUgR(void *p);
   static void deleteArray_vectorlEwavearraylEdoublegRmUgR(void *p);
   static void destruct_vectorlEwavearraylEdoublegRmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<wavearray<double>*>*)
   {
      vector<wavearray<double>*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<wavearray<double>*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<wavearray<double>*>", -2, "prec_stl/vector", 49,
                  typeid(vector<wavearray<double>*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEwavearraylEdoublegRmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<wavearray<double>*>) );
      instance.SetNew(&new_vectorlEwavearraylEdoublegRmUgR);
      instance.SetNewArray(&newArray_vectorlEwavearraylEdoublegRmUgR);
      instance.SetDelete(&delete_vectorlEwavearraylEdoublegRmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEwavearraylEdoublegRmUgR);
      instance.SetDestructor(&destruct_vectorlEwavearraylEdoublegRmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<wavearray<double>*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<wavearray<double>*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEwavearraylEdoublegRmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<wavearray<double>*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEwavearraylEdoublegRmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wavearray<double>*> : new vector<wavearray<double>*>;
   }
   static void *newArray_vectorlEwavearraylEdoublegRmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wavearray<double>*>[nElements] : new vector<wavearray<double>*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEwavearraylEdoublegRmUgR(void *p) {
      delete ((vector<wavearray<double>*>*)p);
   }
   static void deleteArray_vectorlEwavearraylEdoublegRmUgR(void *p) {
      delete [] ((vector<wavearray<double>*>*)p);
   }
   static void destruct_vectorlEwavearraylEdoublegRmUgR(void *p) {
      typedef vector<wavearray<double>*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<wavearray<double>*>

namespace ROOT {
   void vectorlEwavearraylEfloatgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEwavearraylEfloatgRsPgR_Dictionary();
   static void *new_vectorlEwavearraylEfloatgRsPgR(void *p = 0);
   static void *newArray_vectorlEwavearraylEfloatgRsPgR(Long_t size, void *p);
   static void delete_vectorlEwavearraylEfloatgRsPgR(void *p);
   static void deleteArray_vectorlEwavearraylEfloatgRsPgR(void *p);
   static void destruct_vectorlEwavearraylEfloatgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<wavearray<float> >*)
   {
      vector<wavearray<float> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<wavearray<float> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<wavearray<float> >", -2, "prec_stl/vector", 49,
                  typeid(vector<wavearray<float> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEwavearraylEfloatgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<wavearray<float> >) );
      instance.SetNew(&new_vectorlEwavearraylEfloatgRsPgR);
      instance.SetNewArray(&newArray_vectorlEwavearraylEfloatgRsPgR);
      instance.SetDelete(&delete_vectorlEwavearraylEfloatgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEwavearraylEfloatgRsPgR);
      instance.SetDestructor(&destruct_vectorlEwavearraylEfloatgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<wavearray<float> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<wavearray<float> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEwavearraylEfloatgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<wavearray<float> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEwavearraylEfloatgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wavearray<float> > : new vector<wavearray<float> >;
   }
   static void *newArray_vectorlEwavearraylEfloatgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wavearray<float> >[nElements] : new vector<wavearray<float> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEwavearraylEfloatgRsPgR(void *p) {
      delete ((vector<wavearray<float> >*)p);
   }
   static void deleteArray_vectorlEwavearraylEfloatgRsPgR(void *p) {
      delete [] ((vector<wavearray<float> >*)p);
   }
   static void destruct_vectorlEwavearraylEfloatgRsPgR(void *p) {
      typedef vector<wavearray<float> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<wavearray<float> >

namespace ROOT {
   void vectorlEwavearraylEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEwavearraylEintgRsPgR_Dictionary();
   static void *new_vectorlEwavearraylEintgRsPgR(void *p = 0);
   static void *newArray_vectorlEwavearraylEintgRsPgR(Long_t size, void *p);
   static void delete_vectorlEwavearraylEintgRsPgR(void *p);
   static void deleteArray_vectorlEwavearraylEintgRsPgR(void *p);
   static void destruct_vectorlEwavearraylEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<wavearray<int> >*)
   {
      vector<wavearray<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<wavearray<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<wavearray<int> >", -2, "prec_stl/vector", 49,
                  typeid(vector<wavearray<int> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEwavearraylEintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<wavearray<int> >) );
      instance.SetNew(&new_vectorlEwavearraylEintgRsPgR);
      instance.SetNewArray(&newArray_vectorlEwavearraylEintgRsPgR);
      instance.SetDelete(&delete_vectorlEwavearraylEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEwavearraylEintgRsPgR);
      instance.SetDestructor(&destruct_vectorlEwavearraylEintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<wavearray<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<wavearray<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEwavearraylEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<wavearray<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEwavearraylEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wavearray<int> > : new vector<wavearray<int> >;
   }
   static void *newArray_vectorlEwavearraylEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<wavearray<int> >[nElements] : new vector<wavearray<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEwavearraylEintgRsPgR(void *p) {
      delete ((vector<wavearray<int> >*)p);
   }
   static void deleteArray_vectorlEwavearraylEintgRsPgR(void *p) {
      delete [] ((vector<wavearray<int> >*)p);
   }
   static void destruct_vectorlEwavearraylEintgRsPgR(void *p) {
      typedef vector<wavearray<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<wavearray<int> >

/********************************************************
* wave_dict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablewave_dict();

extern "C" void G__set_cpp_environmentwave_dict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("injection.hh");
  G__add_compiledheader("wavecomplex.hh");
  G__add_compiledheader("Wavelet.hh");
  G__add_compiledheader("WaveDWT.hh");
  G__add_compiledheader("Haar.hh");
  G__add_compiledheader("Biorthogonal.hh");
  G__add_compiledheader("Daubechies.hh");
  G__add_compiledheader("Symlet.hh");
  G__add_compiledheader("Meyer.hh");
  G__add_compiledheader("SymmArray.hh");
  G__add_compiledheader("SymmArraySSE.hh");
  G__add_compiledheader("SymmObjArray.hh");
  G__add_compiledheader("WDM.hh");
  G__add_compiledheader("wavearray.hh");
  G__add_compiledheader("wseries.hh");
  G__add_compiledheader("watplot.hh");
  G__add_compiledheader("cluster.hh");
  G__add_compiledheader("wavecor.hh");
  G__add_compiledheader("wavefft.hh");
  G__add_compiledheader("waverdc.hh");
  G__add_compiledheader("lossy.hh");
  G__add_compiledheader("wavelinefilter.hh");
  G__add_compiledheader("netpixel.hh");
  G__add_compiledheader("netcluster.hh");
  G__add_compiledheader("skymap.hh");
  G__add_compiledheader("detector.hh");
  G__add_compiledheader("network.hh");
  G__add_compiledheader("netevent.hh");
  G__add_compiledheader("regression.hh");
  G__add_compiledheader("watexception.hh");
  G__add_compiledheader("time.hh");
  G__add_compiledheader("monster.hh");
  G__add_compiledheader("sseries.hh");
  G__add_compiledheader("watversion.hh");
  G__add_compiledheader("watfun.hh");
  G__add_compiledheader("constants.hh");
  G__add_compiledheader("alm.hh");
  G__cpp_reset_tagtablewave_dict();
}
#include <new>
extern "C" int G__cpp_dllrevwave_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* slice */
static int G__wave_dict_532_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   slice* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new slice[n];
     } else {
       p = new((void*) gvp) slice[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new slice;
     } else {
       p = new((void*) gvp) slice;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_slice));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_532_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   slice* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new slice(
(size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) slice(
(size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_slice));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_532_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const slice*) G__getstructoffset())->start());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_532_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const slice*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_532_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const slice*) G__getstructoffset())->stride());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_532_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   slice* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new slice(*(slice*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_slice));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef slice G__Tslice;
static int G__wave_dict_532_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (slice*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((slice*) (soff+(sizeof(slice)*i)))->~G__Tslice();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (slice*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((slice*) (soff))->~G__Tslice();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_532_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   slice* dest = (slice*) G__getstructoffset();
   *dest = *(slice*) libp->para[0].ref;
   const slice& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Wavelet */
static int G__wave_dict_535_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Wavelet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Wavelet(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (BORDER) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) Wavelet(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (BORDER) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Wavelet(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Wavelet(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Wavelet((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Wavelet((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Wavelet((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Wavelet((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Wavelet[n];
       } else {
         p = new((void*) gvp) Wavelet[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Wavelet;
       } else {
         p = new((void*) gvp) Wavelet;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_Wavelet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Wavelet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Wavelet(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Wavelet(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_Wavelet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Wavelet*) G__getstructoffset())->Clone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Wavelet*) G__getstructoffset())->getOffset((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Wavelet*) G__getstructoffset())->convertF2O((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Wavelet*) G__getstructoffset())->convertO2F((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Wavelet*) G__getstructoffset())->convertL2F((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Wavelet*) G__getstructoffset())->convertF2L((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Wavelet*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Wavelet*) G__getstructoffset())->setLevel((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Wavelet*) G__getstructoffset())->getLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Wavelet*) G__getstructoffset())->maxLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Wavelet*) G__getstructoffset())->parity((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Wavelet*) G__getstructoffset())->heterodine((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Wavelet*) G__getstructoffset())->parity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Wavelet*) G__getstructoffset())->heterodine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Wavelet*) G__getstructoffset())->getMaxLevel((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Wavelet*) G__getstructoffset())->BinaryTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Wavelet*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Wavelet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Wavelet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Wavelet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Wavelet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Wavelet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Wavelet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Wavelet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Wavelet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_535_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Wavelet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Wavelet G__TWavelet;
static int G__wave_dict_535_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Wavelet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Wavelet*) (soff+(sizeof(Wavelet)*i)))->~G__TWavelet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Wavelet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Wavelet*) (soff))->~G__TWavelet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_535_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Wavelet* dest = (Wavelet*) G__getstructoffset();
   *dest = *(Wavelet*) libp->para[0].ref;
   const Wavelet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wavecomplex */
static int G__wave_dict_569_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavecomplex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavecomplex((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) wavecomplex((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavecomplex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavecomplex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavecomplex[n];
     } else {
       p = new((void*) gvp) wavecomplex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavecomplex;
     } else {
       p = new((void*) gvp) wavecomplex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavecomplex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavecomplex* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavecomplex(*(wavecomplex*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wavecomplex(*(wavecomplex*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavecomplex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecomplex& obj = ((wavecomplex*) G__getstructoffset())->operator=(*(wavecomplex*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecomplex& obj = ((wavecomplex*) G__getstructoffset())->operator+=(*(wavecomplex*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecomplex& obj = ((wavecomplex*) G__getstructoffset())->operator-=(*(wavecomplex*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecomplex& obj = ((wavecomplex*) G__getstructoffset())->operator*=(*(wavecomplex*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecomplex& obj = ((wavecomplex*) G__getstructoffset())->operator/=(*(wavecomplex*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavecomplex* pobj;
         wavecomplex xobj = ((wavecomplex*) G__getstructoffset())->operator+(*(wavecomplex*) libp->para[0].ref);
         pobj = new wavecomplex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavecomplex* pobj;
         wavecomplex xobj = ((wavecomplex*) G__getstructoffset())->operator-(*(wavecomplex*) libp->para[0].ref);
         pobj = new wavecomplex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavecomplex* pobj;
         wavecomplex xobj = ((wavecomplex*) G__getstructoffset())->operator*(*(wavecomplex*) libp->para[0].ref);
         pobj = new wavecomplex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavecomplex* pobj;
         wavecomplex xobj = ((wavecomplex*) G__getstructoffset())->operator/(*(wavecomplex*) libp->para[0].ref);
         pobj = new wavecomplex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecomplex& obj = ((wavecomplex*) G__getstructoffset())->operator=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecomplex& obj = ((wavecomplex*) G__getstructoffset())->operator+=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecomplex& obj = ((wavecomplex*) G__getstructoffset())->operator-=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecomplex& obj = ((wavecomplex*) G__getstructoffset())->operator*=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecomplex& obj = ((wavecomplex*) G__getstructoffset())->operator/=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavecomplex* pobj;
         wavecomplex xobj = ((wavecomplex*) G__getstructoffset())->operator+((const double) G__double(libp->para[0]));
         pobj = new wavecomplex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavecomplex* pobj;
         wavecomplex xobj = ((wavecomplex*) G__getstructoffset())->operator-((const double) G__double(libp->para[0]));
         pobj = new wavecomplex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavecomplex* pobj;
         wavecomplex xobj = ((wavecomplex*) G__getstructoffset())->operator*((const double) G__double(libp->para[0]));
         pobj = new wavecomplex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavecomplex* pobj;
         wavecomplex xobj = ((wavecomplex*) G__getstructoffset())->operator/((const double) G__double(libp->para[0]));
         pobj = new wavecomplex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavecomplex*) G__getstructoffset())->real());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavecomplex*) G__getstructoffset())->imag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavecomplex*) G__getstructoffset())->arg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavecomplex*) G__getstructoffset())->abs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavecomplex*) G__getstructoffset())->mod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecomplex*) G__getstructoffset())->set((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavecomplex* pobj;
         wavecomplex xobj = ((wavecomplex*) G__getstructoffset())->conj();
         pobj = new wavecomplex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) wavecomplex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavecomplex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) wavecomplex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      wavecomplex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const wavecomplex*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecomplex*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecomplex*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecomplex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavecomplex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavecomplex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavecomplex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_569_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavecomplex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wavecomplex G__Twavecomplex;
static int G__wave_dict_569_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wavecomplex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wavecomplex*) (soff+(sizeof(wavecomplex)*i)))->~G__Twavecomplex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wavecomplex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wavecomplex*) (soff))->~G__Twavecomplex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<int,allocator<int> > */
static int G__wave_dict_570_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >::reference obj = ((vector<int,allocator<int> >*) G__getstructoffset())->at((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::const_reference obj = ((const vector<int,allocator<int> >*) G__getstructoffset())->at((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->begin();
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->end();
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::reverse_iterator* pobj;
         vector<int,allocator<int> >::reverse_iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->rbegin();
         pobj = new vector<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::reverse_iterator* pobj;
         vector<int,allocator<int> >::reverse_iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->rend();
         pobj = new vector<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->resize((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->resize((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >::reference obj = ((vector<int,allocator<int> >*) G__getstructoffset())->operator[]((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::const_reference obj = ((const vector<int,allocator<int> >*) G__getstructoffset())->operator[]((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >[n];
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >;
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<int,allocator<int> >(*(vector<int,allocator<int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<int,allocator<int> >(*(vector<int,allocator<int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<int,allocator<int> >(*((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<int,allocator<int> >(*((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->operator=(*(vector<int,allocator<int> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->reserve((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->push_back(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->swap(*(vector<int,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *(int*) G__Intref(&libp->para[1]));
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1]))
, *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), (vector<int,allocator<int> >::size_type) G__int(libp->para[1])
, *(int*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->erase(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->erase(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_570_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<int,allocator<int> > G__TvectorlEintcOallocatorlEintgRsPgR;
static int G__wave_dict_570_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<int,allocator<int> >*) (soff+(sizeof(vector<int,allocator<int> >)*i)))->~G__TvectorlEintcOallocatorlEintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<int,allocator<int> >*) (soff))->~G__TvectorlEintcOallocatorlEintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pixdata */
// automatic default constructor
static int G__wave_dict_617_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pixdata *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pixdata[n];
     } else {
       p = new((void*) gvp) pixdata[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pixdata;
     } else {
       p = new((void*) gvp) pixdata;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_pixdata));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_617_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pixdata* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pixdata(*(pixdata*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_pixdata));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pixdata G__Tpixdata;
static int G__wave_dict_617_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pixdata*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pixdata*) (soff+(sizeof(pixdata)*i)))->~G__Tpixdata();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pixdata*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pixdata*) (soff))->~G__Tpixdata();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_617_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pixdata* dest = (pixdata*) G__getstructoffset();
   *dest = *(pixdata*) libp->para[0].ref;
   const pixdata& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* netpixel */
static int G__wave_dict_618_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   netpixel* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new netpixel[n];
     } else {
       p = new((void*) gvp) netpixel[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new netpixel;
     } else {
       p = new((void*) gvp) netpixel;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_netpixel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   netpixel* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new netpixel((size_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) netpixel((size_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_netpixel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const netpixel*) G__getstructoffset())->operator==(*(netpixel*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const netpixel*) G__getstructoffset())->operator<(*(netpixel*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const netpixel& obj = ((netpixel*) G__getstructoffset())->operator=(*(netpixel*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((netpixel*) G__getstructoffset())->setdata((double) G__double(libp->para[0]), (char) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((netpixel*) G__getstructoffset())->setdata((double) G__double(libp->para[0]), (char) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((netpixel*) G__getstructoffset())->setdata((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((netpixel*) G__getstructoffset())->getdata((char) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((netpixel*) G__getstructoffset())->getdata((char) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((netpixel*) G__getstructoffset())->getdata());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netpixel*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netpixel*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netpixel*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netpixel*) G__getstructoffset())->clean();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netpixel*) G__getstructoffset())->append((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((netpixel*) G__getstructoffset())->write((FILE*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((netpixel*) G__getstructoffset())->read((FILE*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) netpixel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) netpixel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) netpixel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      netpixel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netpixel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) netpixel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) netpixel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) netpixel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_618_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) netpixel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_618_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   netpixel* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new netpixel(*(netpixel*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_netpixel));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef netpixel G__Tnetpixel;
static int G__wave_dict_618_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (netpixel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((netpixel*) (soff+(sizeof(netpixel)*i)))->~G__Tnetpixel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (netpixel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((netpixel*) (soff))->~G__Tnetpixel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<pixdata,allocator<pixdata> > */
static int G__wave_dict_620_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pixdata,allocator<pixdata> >::reference obj = ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->at((vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pixdata,allocator<pixdata> >::const_reference obj = ((const vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->at((vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pixdata,allocator<pixdata> >::iterator* pobj;
         vector<pixdata,allocator<pixdata> >::iterator xobj = ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->begin();
         pobj = new vector<pixdata,allocator<pixdata> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pixdata,allocator<pixdata> >::iterator* pobj;
         vector<pixdata,allocator<pixdata> >::iterator xobj = ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->end();
         pobj = new vector<pixdata,allocator<pixdata> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pixdata,allocator<pixdata> >::reverse_iterator* pobj;
         vector<pixdata,allocator<pixdata> >::reverse_iterator xobj = ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->rbegin();
         pobj = new vector<pixdata,allocator<pixdata> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pixdata,allocator<pixdata> >::reverse_iterator* pobj;
         vector<pixdata,allocator<pixdata> >::reverse_iterator xobj = ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->rend();
         pobj = new vector<pixdata,allocator<pixdata> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->resize((vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->resize((vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[0]), *((pixdata*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pixdata,allocator<pixdata> >::reference obj = ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->operator[]((vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pixdata,allocator<pixdata> >::const_reference obj = ((const vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->operator[]((vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pixdata,allocator<pixdata> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pixdata,allocator<pixdata> >[n];
     } else {
       p = new((void*) gvp) vector<pixdata,allocator<pixdata> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pixdata,allocator<pixdata> >;
     } else {
       p = new((void*) gvp) vector<pixdata,allocator<pixdata> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pixdata,allocator<pixdata> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pixdata,allocator<pixdata> >((vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[0]), *(pixdata*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<pixdata,allocator<pixdata> >((vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[0]), *(pixdata*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pixdata,allocator<pixdata> >((vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<pixdata,allocator<pixdata> >((vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pixdata,allocator<pixdata> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<pixdata,allocator<pixdata> >(*(vector<pixdata,allocator<pixdata> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<pixdata,allocator<pixdata> >(*(vector<pixdata,allocator<pixdata> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pixdata,allocator<pixdata> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<pixdata,allocator<pixdata> >(*((vector<pixdata,allocator<pixdata> >::const_iterator*) G__int(libp->para[0])), *((vector<pixdata,allocator<pixdata> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<pixdata,allocator<pixdata> >(*((vector<pixdata,allocator<pixdata> >::const_iterator*) G__int(libp->para[0])), *((vector<pixdata,allocator<pixdata> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pixdata,allocator<pixdata> >& obj = ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->operator=(*(vector<pixdata,allocator<pixdata> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->reserve((vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pixdata& obj = ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pixdata& obj = ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->push_back(*(pixdata*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->swap(*(vector<pixdata,allocator<pixdata> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pixdata,allocator<pixdata> >::iterator* pobj;
         vector<pixdata,allocator<pixdata> >::iterator xobj = ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->insert(*((vector<pixdata,allocator<pixdata> >::iterator*) G__int(libp->para[0])), *(pixdata*) libp->para[1].ref);
         pobj = new vector<pixdata,allocator<pixdata> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->insert(*((vector<pixdata,allocator<pixdata> >::iterator*) G__int(libp->para[0])), *((vector<pixdata,allocator<pixdata> >::const_iterator*) G__int(libp->para[1]))
, *((vector<pixdata,allocator<pixdata> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->insert(*((vector<pixdata,allocator<pixdata> >::iterator*) G__int(libp->para[0])), (vector<pixdata,allocator<pixdata> >::size_type) G__int(libp->para[1])
, *(pixdata*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->erase(*((vector<pixdata,allocator<pixdata> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->erase(*((vector<pixdata,allocator<pixdata> >::iterator*) G__int(libp->para[0])), *((vector<pixdata,allocator<pixdata> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_620_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pixdata,allocator<pixdata> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<pixdata,allocator<pixdata> > G__TvectorlEpixdatacOallocatorlEpixdatagRsPgR;
static int G__wave_dict_620_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<pixdata,allocator<pixdata> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<pixdata,allocator<pixdata> >*) (soff+(sizeof(vector<pixdata,allocator<pixdata> >)*i)))->~G__TvectorlEpixdatacOallocatorlEpixdatagRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<pixdata,allocator<pixdata> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<pixdata,allocator<pixdata> >*) (soff))->~G__TvectorlEpixdatacOallocatorlEpixdatagRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wavearray<float> */
static int G__wave_dict_623_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<float>((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) wavearray<float>((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<float>[n];
     } else {
       p = new((void*) gvp) wavearray<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<float>;
     } else {
       p = new((void*) gvp) wavearray<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<float>(*(wavearray<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wavearray<float>(*(wavearray<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((wavearray<float>*) G__getstructoffset())->operator=(*(wavearray<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((wavearray<float>*) G__getstructoffset())->operator[](*(slice*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((wavearray<float>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<float>*) G__getstructoffset())->limit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<float>*) G__getstructoffset())->limit(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<float>*) G__getstructoffset())->limit(*(wavearray<float>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((wavearray<float>*) G__getstructoffset())->operator+=(*(wavearray<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((wavearray<float>*) G__getstructoffset())->operator-=(*(wavearray<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((wavearray<float>*) G__getstructoffset())->operator*=(*(wavearray<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((wavearray<float>*) G__getstructoffset())->operator<<(*(wavearray<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((wavearray<float>*) G__getstructoffset())->operator=((const float) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((wavearray<float>*) G__getstructoffset())->operator+=((const float) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((wavearray<float>*) G__getstructoffset())->operator-=((const float) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((wavearray<float>*) G__getstructoffset())->operator*=((const float) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = ((wavearray<float>*) G__getstructoffset())->operator>>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (void*) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<float>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<float>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<float>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<float>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<float>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<float>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->DumpObject((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<float>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<float>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->ReadShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<float>*) G__getstructoffset())->FFT((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<float>*) G__getstructoffset())->FFT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<float>*) G__getstructoffset())->FFTW((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<float>*) G__getstructoffset())->FFTW();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->resetFFTW();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<float>*) G__getstructoffset())->Resample(*(wavearray<float>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<float>*) G__getstructoffset())->Resample(*(wavearray<float>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<float>*) G__getstructoffset())->resample(*(wavearray<float>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<float>*) G__getstructoffset())->resample(*(wavearray<float>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<float>*) G__getstructoffset())->resample((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<float>*) G__getstructoffset())->resample((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->start((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<float>*) G__getstructoffset())->start());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->stop((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<float>*) G__getstructoffset())->stop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->rate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<float>*) G__getstructoffset())->rate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->edge((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<float>*) G__getstructoffset())->edge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<float>*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->setSlice(*(slice*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const slice* pobj;
         const slice xobj = ((const wavearray<float>*) G__getstructoffset())->getSlice();
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const wavearray<float>*) G__getstructoffset())->median((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const wavearray<float>*) G__getstructoffset())->median((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const wavearray<float>*) G__getstructoffset())->median());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<float>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<float>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<float>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<float>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<float>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<float>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<float>*) G__getstructoffset())->mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<float>*) G__getstructoffset())->mean((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<float>*) G__getstructoffset())->mean(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<float>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<float>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<float>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<float>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<float>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<float>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<float>*) G__getstructoffset())->rms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<float>*) G__getstructoffset())->rms(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<float>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<float>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<float>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<float>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<float>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<float>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const wavearray<float>*) G__getstructoffset())->max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->max(*(wavearray<float>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const wavearray<float>*) G__getstructoffset())->min());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->SQRT();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->hann();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const wavearray<float>*) G__getstructoffset())->waveSort((float**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const wavearray<float>*) G__getstructoffset())->waveSort((float**) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const wavearray<float>*) G__getstructoffset())->waveSort((float**) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<float>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<float>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<float>*) G__getstructoffset())->waveSort();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const wavearray<float>*) G__getstructoffset())->waveSplit((float**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((wavearray<float>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<float>*) G__getstructoffset())->getSampleRank((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<float>*) G__getstructoffset())->getSampleRankE((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((const wavearray<float>*) G__getstructoffset())->rank((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((const wavearray<float>*) G__getstructoffset())->rank());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<float>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<float>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<float>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<float>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->lprFilter(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<float>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<float>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<float>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<float>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<float>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<float>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<float>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<float>*) G__getstructoffset())->white((double) G__double(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->exponential((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((wavearray<float>*) G__getstructoffset())->get((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((wavearray<float>*) G__getstructoffset())->get((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((wavearray<float>*) G__getstructoffset())->uniform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 108, (long) ((wavearray<float>*) G__getstructoffset())->rand48((long) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((wavearray<float>*) G__getstructoffset())->rand48());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<float>*) G__getstructoffset())->getStatistics(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<float>*) G__getstructoffset())->cpf(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<float>*) G__getstructoffset())->cpf(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<float>*) G__getstructoffset())->cpf(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<float>*) G__getstructoffset())->cpf(*(wavearray<float>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<float>*) G__getstructoffset())->add(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<float>*) G__getstructoffset())->add(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<float>*) G__getstructoffset())->add(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<float>*) G__getstructoffset())->add(*(wavearray<float>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<float>*) G__getstructoffset())->sub(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<float>*) G__getstructoffset())->sub(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<float>*) G__getstructoffset())->sub(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<float>*) G__getstructoffset())->sub(*(wavearray<float>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<float>*) G__getstructoffset())->append(*(wavearray<float>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<float>*) G__getstructoffset())->append((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<float>*) G__getstructoffset())->wavecount((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<float>*) G__getstructoffset())->Stack(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<float>*) G__getstructoffset())->Stack(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<float>*) G__getstructoffset())->Stack(*(wavearray<float>*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<float>::compare((void*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) wavearray<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) wavearray<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      wavearray<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_623_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wavearray<float> G__TwavearraylEfloatgR;
static int G__wave_dict_623_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wavearray<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wavearray<float>*) (soff+(sizeof(wavearray<float>)*i)))->~G__TwavearraylEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wavearray<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wavearray<float>*) (soff))->~G__TwavearraylEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wavearray<double> */
static int G__wave_dict_624_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<double>((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) wavearray<double>((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<double>[n];
     } else {
       p = new((void*) gvp) wavearray<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<double>;
     } else {
       p = new((void*) gvp) wavearray<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<double>(*(wavearray<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wavearray<double>(*(wavearray<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<double>& obj = ((wavearray<double>*) G__getstructoffset())->operator=(*(wavearray<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<double>& obj = ((wavearray<double>*) G__getstructoffset())->operator[](*(slice*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((wavearray<double>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<double>*) G__getstructoffset())->limit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<double>*) G__getstructoffset())->limit(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<double>*) G__getstructoffset())->limit(*(wavearray<double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<double>& obj = ((wavearray<double>*) G__getstructoffset())->operator+=(*(wavearray<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<double>& obj = ((wavearray<double>*) G__getstructoffset())->operator-=(*(wavearray<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<double>& obj = ((wavearray<double>*) G__getstructoffset())->operator*=(*(wavearray<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<double>& obj = ((wavearray<double>*) G__getstructoffset())->operator<<(*(wavearray<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<double>& obj = ((wavearray<double>*) G__getstructoffset())->operator=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<double>& obj = ((wavearray<double>*) G__getstructoffset())->operator+=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<double>& obj = ((wavearray<double>*) G__getstructoffset())->operator-=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<double>& obj = ((wavearray<double>*) G__getstructoffset())->operator*=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = ((wavearray<double>*) G__getstructoffset())->operator>>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (void*) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<double>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<double>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<double>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<double>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<double>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<double>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->DumpObject((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<double>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<double>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->ReadShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<double>*) G__getstructoffset())->FFT((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<double>*) G__getstructoffset())->FFT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<double>*) G__getstructoffset())->FFTW((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<double>*) G__getstructoffset())->FFTW();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->resetFFTW();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<double>*) G__getstructoffset())->Resample(*(wavearray<double>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<double>*) G__getstructoffset())->Resample(*(wavearray<double>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<double>*) G__getstructoffset())->resample(*(wavearray<double>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<double>*) G__getstructoffset())->resample(*(wavearray<double>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<double>*) G__getstructoffset())->resample((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<double>*) G__getstructoffset())->resample((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->start((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->start());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->stop((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->stop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->rate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->rate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->edge((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->edge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<double>*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->setSlice(*(slice*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const slice* pobj;
         const slice xobj = ((const wavearray<double>*) G__getstructoffset())->getSlice();
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->median((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->median((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->median());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<double>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<double>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<double>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<double>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<double>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<double>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<double>*) G__getstructoffset())->mean((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<double>*) G__getstructoffset())->mean(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<double>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<double>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<double>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<double>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<double>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<double>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<double>*) G__getstructoffset())->rms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<double>*) G__getstructoffset())->rms(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<double>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<double>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<double>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<double>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<double>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<double>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->max(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->min());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->SQRT();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->hann();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const wavearray<double>*) G__getstructoffset())->waveSort((double**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const wavearray<double>*) G__getstructoffset())->waveSort((double**) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const wavearray<double>*) G__getstructoffset())->waveSort((double**) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<double>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<double>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<double>*) G__getstructoffset())->waveSort();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const wavearray<double>*) G__getstructoffset())->waveSplit((double**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<double>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<double>*) G__getstructoffset())->getSampleRank((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<double>*) G__getstructoffset())->getSampleRankE((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->rank((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->rank());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<double>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<double>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<double>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<double>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->lprFilter(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<double>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<double>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<double>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<double>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<double>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<double>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<double>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<double>*) G__getstructoffset())->white((double) G__double(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->exponential((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<double>*) G__getstructoffset())->get((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<double>*) G__getstructoffset())->get((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((wavearray<double>*) G__getstructoffset())->uniform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 108, (long) ((wavearray<double>*) G__getstructoffset())->rand48((long) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((wavearray<double>*) G__getstructoffset())->rand48());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<double>*) G__getstructoffset())->getStatistics(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<double>*) G__getstructoffset())->cpf(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<double>*) G__getstructoffset())->cpf(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<double>*) G__getstructoffset())->cpf(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<double>*) G__getstructoffset())->cpf(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<double>*) G__getstructoffset())->add(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<double>*) G__getstructoffset())->add(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<double>*) G__getstructoffset())->add(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<double>*) G__getstructoffset())->add(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<double>*) G__getstructoffset())->sub(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<double>*) G__getstructoffset())->sub(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<double>*) G__getstructoffset())->sub(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<double>*) G__getstructoffset())->sub(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<double>*) G__getstructoffset())->append(*(wavearray<double>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<double>*) G__getstructoffset())->append((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<double>*) G__getstructoffset())->wavecount((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<double>*) G__getstructoffset())->Stack(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<double>*) G__getstructoffset())->Stack(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<double>*) G__getstructoffset())->Stack(*(wavearray<double>*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<double>::compare((void*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) wavearray<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) wavearray<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      wavearray<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_624_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wavearray<double> G__TwavearraylEdoublegR;
static int G__wave_dict_624_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wavearray<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wavearray<double>*) (soff+(sizeof(wavearray<double>)*i)))->~G__TwavearraylEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wavearray<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wavearray<double>*) (soff))->~G__TwavearraylEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<wavearray<float>,allocator<wavearray<float> > > */
static int G__wave_dict_626_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<wavearray<float>,allocator<wavearray<float> > >::reference obj = ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->at((vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wavearray<float>,allocator<wavearray<float> > >::const_reference obj = ((const vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->at((vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wavearray<float>,allocator<wavearray<float> > >::iterator* pobj;
         vector<wavearray<float>,allocator<wavearray<float> > >::iterator xobj = ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->begin();
         pobj = new vector<wavearray<float>,allocator<wavearray<float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wavearray<float>,allocator<wavearray<float> > >::iterator* pobj;
         vector<wavearray<float>,allocator<wavearray<float> > >::iterator xobj = ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->end();
         pobj = new vector<wavearray<float>,allocator<wavearray<float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wavearray<float>,allocator<wavearray<float> > >::reverse_iterator* pobj;
         vector<wavearray<float>,allocator<wavearray<float> > >::reverse_iterator xobj = ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->rbegin();
         pobj = new vector<wavearray<float>,allocator<wavearray<float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wavearray<float>,allocator<wavearray<float> > >::reverse_iterator* pobj;
         vector<wavearray<float>,allocator<wavearray<float> > >::reverse_iterator xobj = ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->rend();
         pobj = new vector<wavearray<float>,allocator<wavearray<float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->resize((vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->resize((vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[0]), *((wavearray<float>*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<wavearray<float>,allocator<wavearray<float> > >::reference obj = ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->operator[]((vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wavearray<float>,allocator<wavearray<float> > >::const_reference obj = ((const vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->operator[]((vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wavearray<float>,allocator<wavearray<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wavearray<float>,allocator<wavearray<float> > >[n];
     } else {
       p = new((void*) gvp) vector<wavearray<float>,allocator<wavearray<float> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wavearray<float>,allocator<wavearray<float> > >;
     } else {
       p = new((void*) gvp) vector<wavearray<float>,allocator<wavearray<float> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wavearray<float>,allocator<wavearray<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wavearray<float>,allocator<wavearray<float> > >((vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[0]), *(wavearray<float>*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<wavearray<float>,allocator<wavearray<float> > >((vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[0]), *(wavearray<float>*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<wavearray<float>,allocator<wavearray<float> > >((vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<wavearray<float>,allocator<wavearray<float> > >((vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wavearray<float>,allocator<wavearray<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<wavearray<float>,allocator<wavearray<float> > >(*(vector<wavearray<float>,allocator<wavearray<float> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<wavearray<float>,allocator<wavearray<float> > >(*(vector<wavearray<float>,allocator<wavearray<float> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<wavearray<float>,allocator<wavearray<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<wavearray<float>,allocator<wavearray<float> > >(*((vector<wavearray<float>,allocator<wavearray<float> > >::const_iterator*) G__int(libp->para[0])), *((vector<wavearray<float>,allocator<wavearray<float> > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<wavearray<float>,allocator<wavearray<float> > >(*((vector<wavearray<float>,allocator<wavearray<float> > >::const_iterator*) G__int(libp->para[0])), *((vector<wavearray<float>,allocator<wavearray<float> > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<wavearray<float>,allocator<wavearray<float> > >& obj = ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->operator=(*(vector<wavearray<float>,allocator<wavearray<float> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->reserve((vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<float>& obj = ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->push_back(*(wavearray<float>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->swap(*(vector<wavearray<float>,allocator<wavearray<float> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<wavearray<float>,allocator<wavearray<float> > >::iterator* pobj;
         vector<wavearray<float>,allocator<wavearray<float> > >::iterator xobj = ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->insert(*((vector<wavearray<float>,allocator<wavearray<float> > >::iterator*) G__int(libp->para[0])), *(wavearray<float>*) libp->para[1].ref);
         pobj = new vector<wavearray<float>,allocator<wavearray<float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->insert(*((vector<wavearray<float>,allocator<wavearray<float> > >::iterator*) G__int(libp->para[0])), *((vector<wavearray<float>,allocator<wavearray<float> > >::const_iterator*) G__int(libp->para[1]))
, *((vector<wavearray<float>,allocator<wavearray<float> > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->insert(*((vector<wavearray<float>,allocator<wavearray<float> > >::iterator*) G__int(libp->para[0])), (vector<wavearray<float>,allocator<wavearray<float> > >::size_type) G__int(libp->para[1])
, *(wavearray<float>*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->erase(*((vector<wavearray<float>,allocator<wavearray<float> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->erase(*((vector<wavearray<float>,allocator<wavearray<float> > >::iterator*) G__int(libp->para[0])), *((vector<wavearray<float>,allocator<wavearray<float> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_626_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<wavearray<float>,allocator<wavearray<float> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<wavearray<float>,allocator<wavearray<float> > > G__TvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR;
static int G__wave_dict_626_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<wavearray<float>,allocator<wavearray<float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<wavearray<float>,allocator<wavearray<float> > >*) (soff+(sizeof(vector<wavearray<float>,allocator<wavearray<float> > >)*i)))->~G__TvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<wavearray<float>,allocator<wavearray<float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<wavearray<float>,allocator<wavearray<float> > >*) (soff))->~G__TvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* network */
static int G__wave_dict_629_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   network* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new network[n];
     } else {
       p = new((void*) gvp) network[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new network;
     } else {
       p = new((void*) gvp) network;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_network));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   network* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new network(*(network*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) network(*(network*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_network));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const network& obj = ((network*) G__getstructoffset())->operator=(*(network*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->add((detector*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->Forward((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->Inverse((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->setTimeShifts(
(size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (size_t*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->setTimeShifts((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (const char*) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->setTimeShifts((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->setTimeShifts((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->setTimeShifts((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (size_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->setTimeShifts((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->setTimeShifts((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->setTimeShifts());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->printwc((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->initwc((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((network*) G__getstructoffset())->setSkyMaps((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((network*) G__getstructoffset())->setSkyMaps((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((network*) G__getstructoffset())->setSkyMaps((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((network*) G__getstructoffset())->setSkyMaps((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((network*) G__getstructoffset())->setSkyMaps((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->setSkyMaps((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->setndm((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->setndm((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->setndm((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->SETNDM((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->SETNDM((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->SETNDM((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((network*) G__getstructoffset())->getNDM((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setFilter((detector*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setFilter());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((network*) G__getstructoffset())->setDelayFilters((detector*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((network*) G__getstructoffset())->setDelayFilters();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((network*) G__getstructoffset())->setDelayFilters((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((network*) G__getstructoffset())->setDelayFilters((char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((network*) G__getstructoffset())->setFilter((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((network*) G__getstructoffset())->setFilter((char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->writeFilter((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->readFilter((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((network*) G__getstructoffset())->setVeto((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((network*) G__getstructoffset())->setVeto());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->readMDClog((char*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->readMDClog((char*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->readMDClog((char*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->readMDClog((char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->readSEGlist((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->readSEGlist((char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->setDelayIndex((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((network*) G__getstructoffset())->setDelayIndex((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((network*) G__getstructoffset())->setDelayIndex();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setIndexMode((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setIndexMode());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->getIndex((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->setAntenna((detector*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->setAntenna();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->delay((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->delay((detector*) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->coherence((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->coherence((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->coherence((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->getNetworkPixels((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (TH1F*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->getNetworkPixels((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->getNetworkPixels((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->netcut((double) G__double(libp->para[0]), (char) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->netcut((double) G__double(libp->para[0]), (char) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->netcut((double) G__double(libp->para[0]), (char) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->netcut((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->subNetCut((int) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (TH2F*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->subNetCut((int) G__int(libp->para[0]), (float) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->subNetCut((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodB((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodB((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodB((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (size_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodB((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodB((char) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodB((char) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodB());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodI((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodI((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodI((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (size_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodI((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodI((char) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodI((char) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihoodI());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihood2G((char) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (TH2F*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihood2G((char) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihood((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihood((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihood((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (size_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihood((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihood((char) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihood((char) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((network*) G__getstructoffset())->likelihood());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setRank((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setRank((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->setMRAcatalog((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->cluster((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->events());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->events((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->events((int) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->setRMS();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->delink();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->getwave((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (char) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->getwave((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->getMRAwave((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (char) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->getMRAwave((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (char) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->getMRAwave((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (char) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->getMRAwave((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->getSkyArea((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->getSkyArea((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setSkyMask((double) G__double(libp->para[0]), (char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setSkyMask((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setSkyMask());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setSkyMaskCC((char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setSkyMaskCC());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->setSkyMaskCC(*((skymap*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->setAcore((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->mdcListSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->mdcTypeSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->mdcTimeSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->mdc__IDSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->livTimeSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((network*) G__getstructoffset())->getmdcList((size_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((network*) G__getstructoffset())->getmdcType((size_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((network*) G__getstructoffset())->getmdcTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((network*) G__getstructoffset())->getmdcTime((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->getmdc__ID((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((network*) G__getstructoffset())->getliveTime((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->ifoListSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->wc_ListSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((network*) G__getstructoffset())->getifo((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((network*) G__getstructoffset())->getwc((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->add((WDM<double>*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((network*) G__getstructoffset())->wdmListSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((network*) G__getstructoffset())->getwdm((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->setRunID((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->setOffset((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((network*) G__getstructoffset())->constraint((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((network*) G__getstructoffset())->constraint((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((network*) G__getstructoffset())->constraint();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->set2or((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((network*) G__getstructoffset())->threshold((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((network*) G__getstructoffset())->THRESHOLD((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((network*) G__getstructoffset())->getDelay((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((network*) G__getstructoffset())->getDelay());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((network*) G__getstructoffset())->setDelay((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((network*) G__getstructoffset())->setDelay();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((network*) G__getstructoffset())->wdm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((network*) G__getstructoffset())->like());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::sumx((double*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dotx((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dotx((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dot4((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dotx((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dotx((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dot4((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dotx((double*) G__int(libp->para[0]), (double**) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dotx((double**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (double*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dotx((double**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (double**) G__int(libp->para[2]), (size_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dotx((double**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (double**) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (double*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dotx((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dotx((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::addx((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::addx((double*) G__int(libp->para[0]), (double**) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (double*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::addx((double**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (double**) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (double*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dotx((double*) G__int(libp->para[0]), (double**) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (double*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dot32((vector<float>*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (vector<short>*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::dot32((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])
, (int*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::divx((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::rotx((double*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::rotx((float*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float*) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) network::rot4((double*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) network::rots((float*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float*) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::mulx((double**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (double**) G__int(libp->para[2]), (size_t) G__int(libp->para[3])
, (double*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::mulx((double*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::mulx((float*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::mulx((double*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::mulx((float*) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::inix((double**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::inix((double*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::inix((float*) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) network::netx((double*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) network::netx((float*) G__int(libp->para[0]), (float) G__double(libp->para[1])
, (float*) G__int(libp->para[2]), (float) G__double(libp->para[3])
, (float) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::pnt_((float**) G__int(libp->para[0]), (float**) G__int(libp->para[1])
, (short**) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::cpp_(libp->para[0].ref ? *(float**) libp->para[0].ref : *(float**) (void*) (&G__Mlong(libp->para[0])), (float**) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::cpf_(libp->para[0].ref ? *(float**) libp->para[0].ref : *(float**) (void*) (&G__Mlong(libp->para[0])), (double**) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::cpf_(libp->para[0].ref ? *(float**) libp->para[0].ref : *(float**) (void*) (&G__Mlong(libp->para[0])), (double**) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::dpfx((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::pnpx((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (float*) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::dspx((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::dspx((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (float*) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (float*) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->_sse_MRA_ps((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->_sse_core_ps((float) G__double(libp->para[0]), (float) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->test_sse((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->getMRA((float*) G__int(libp->para[0]), (float*) G__int(libp->para[1])
, (float) G__double(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((network*) G__getstructoffset())->cleanMRA((float) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_134(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) network::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_135(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) network::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) network::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      network::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((network*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) network::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) network::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) network::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_629_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) network::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef network G__Tnetwork;
static int G__wave_dict_629_0_146(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (network*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((network*) (soff+(sizeof(network)*i)))->~G__Tnetwork();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (network*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((network*) (soff))->~G__Tnetwork();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* clusterdata */
static int G__wave_dict_630_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   clusterdata* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new clusterdata[n];
     } else {
       p = new((void*) gvp) clusterdata[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new clusterdata;
     } else {
       p = new((void*) gvp) clusterdata;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_clusterdata));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_630_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) clusterdata::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_630_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) clusterdata::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_630_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) clusterdata::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_630_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      clusterdata::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_630_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((clusterdata*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_630_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) clusterdata::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_630_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) clusterdata::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_630_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) clusterdata::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_630_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) clusterdata::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef clusterdata G__Tclusterdata;
static int G__wave_dict_630_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (clusterdata*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((clusterdata*) (soff+(sizeof(clusterdata)*i)))->~G__Tclusterdata();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (clusterdata*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((clusterdata*) (soff))->~G__Tclusterdata();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* netcluster */
static int G__wave_dict_631_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   netcluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new netcluster[n];
     } else {
       p = new((void*) gvp) netcluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new netcluster;
     } else {
       p = new((void*) gvp) netcluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_netcluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   netcluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new netcluster(*(netcluster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) netcluster(*(netcluster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_netcluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const netcluster& obj = ((netcluster*) G__getstructoffset())->operator=(*(netcluster*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->cpf(*(netcluster*) libp->para[0].ref, (bool) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->cpf(*(netcluster*) libp->para[0].ref, (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->cpf(*(netcluster*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netcluster*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((netcluster*) G__getstructoffset())->clean((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((netcluster*) G__getstructoffset())->clean();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->csize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->esize((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->esize());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->psize((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->psize());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((netcluster*) G__getstructoffset())->getPixel((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netcluster*) G__getstructoffset())->setbpp((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((netcluster*) G__getstructoffset())->getbpp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->setcore((bool) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->setcore((bool) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netcluster*) G__getstructoffset())->ignore((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((netcluster*) G__getstructoffset())->setcuts((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((netcluster*) G__getstructoffset())->setcuts();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->cleanhalo((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->cleanhalo());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->addhalo((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->addhalo());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->append(*(netcluster*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netcluster*) G__getstructoffset())->append(*(netpixel*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->delink());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->select((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->supercluster((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (bool) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->supercluster((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3])
, (TH1F*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->supercluster((char) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->defragment((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (TH2F*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->defragment((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netcluster*) G__getstructoffset())->PlotClusters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->cluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->cluster((netpixel*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->cluster((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((netcluster*) G__getstructoffset())->get((char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (char) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (bool) G__int(libp->para[4]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((netcluster*) G__getstructoffset())->get((char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (char) G__int(libp->para[2]), (int) G__int(libp->para[3]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((netcluster*) G__getstructoffset())->get((char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (char) G__int(libp->para[2]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((netcluster*) G__getstructoffset())->get((char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((netcluster*) G__getstructoffset())->get((char*) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((netcluster*) G__getstructoffset())->getwave((int) G__int(libp->para[0]), *(WSeries<double>*) libp->para[1].ref
, (char) G__int(libp->para[2]), (size_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((netcluster*) G__getstructoffset())->getwave((int) G__int(libp->para[0]), *(WSeries<double>*) libp->para[1].ref
, (char) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((netcluster*) G__getstructoffset())->getwave((int) G__int(libp->para[0]), *(WSeries<double>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((netcluster*) G__getstructoffset())->getMRAwave((network*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (char) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((netcluster*) G__getstructoffset())->getMRAwave((network*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (char) G__int(libp->para[3]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((netcluster*) G__getstructoffset())->getMRAwave((network*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->write((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->write((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->write((FILE*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->write((FILE*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->write((TFile*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->write((TFile*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->write((TFile*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->write((TFile*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->read((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->read((FILE*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      {
         vector<int>* pobj;
         vector<int> xobj = ((netcluster*) G__getstructoffset())->read(
(TFile*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 6:
      {
         vector<int>* pobj;
         vector<int> xobj = ((netcluster*) G__getstructoffset())->read((TFile*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 5:
      {
         vector<int>* pobj;
         vector<int> xobj = ((netcluster*) G__getstructoffset())->read((TFile*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 4:
      {
         vector<int>* pobj;
         vector<int> xobj = ((netcluster*) G__getstructoffset())->read((TFile*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (int) G__int(libp->para[3]));
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         vector<int>* pobj;
         vector<int> xobj = ((netcluster*) G__getstructoffset())->read((TFile*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])));
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netcluster*) G__getstructoffset())->setlow((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netcluster*) G__getstructoffset())->sethigh((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((netcluster*) G__getstructoffset())->getlow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((netcluster*) G__getstructoffset())->gethigh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->loadTDamp(*(network*) libp->para[0].ref, (char) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->loadTDamp(*(network*) libp->para[0].ref, (char) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->loadTDamp(*(network*) libp->para[0].ref, (char) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->loadTDampSSE(*(network*) libp->para[0].ref, (char) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->loadTDampSSE(*(network*) libp->para[0].ref, (char) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 107, (long) ((netcluster*) G__getstructoffset())->loadTDampSSE(*(network*) libp->para[0].ref, (char) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((netcluster*) G__getstructoffset())->mchirp((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((netcluster*) G__getstructoffset())->mchirp5((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((netcluster*) G__getstructoffset())->mchirp6((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netcluster*) G__getstructoffset())->chirpDraw((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netcluster*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) netcluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) netcluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) netcluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      netcluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netcluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) netcluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) netcluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) netcluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_631_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) netcluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef netcluster G__Tnetcluster;
static int G__wave_dict_631_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (netcluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((netcluster*) (soff+(sizeof(netcluster)*i)))->~G__Tnetcluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (netcluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((netcluster*) (soff))->~G__Tnetcluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* WSeries<double> */
static int G__wave_dict_632_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WSeries<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WSeries<double>[n];
     } else {
       p = new((void*) gvp) WSeries<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WSeries<double>;
     } else {
       p = new((void*) gvp) WSeries<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WSeries<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WSeries<double>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) WSeries<double>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WSeries<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WSeries<double>(*(wavearray<double>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) WSeries<double>(*(wavearray<double>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WSeries<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WSeries<double>(*(WSeries<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) WSeries<double>(*(WSeries<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<double>& obj = ((WSeries<double>*) G__getstructoffset())->operator=(*(wavearray<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<double>& obj = ((WSeries<double>*) G__getstructoffset())->operator=(*(WSeries<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<double>& obj = ((WSeries<double>*) G__getstructoffset())->operator=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<double>& obj = ((WSeries<double>*) G__getstructoffset())->operator+=(*(WSeries<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<double>& obj = ((WSeries<double>*) G__getstructoffset())->operator-=(*(WSeries<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<double>& obj = ((WSeries<double>*) G__getstructoffset())->operator*=(*(WSeries<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<double>*) G__getstructoffset())->mul(*(WSeries<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WSeries<double>*) G__getstructoffset())->getMaxLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WSeries<double>*) G__getstructoffset())->getLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<double>*) G__getstructoffset())->setLevel((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<double>*) G__getstructoffset())->setbpp((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const WSeries<double>*) G__getstructoffset())->getbpp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<double>*) G__getstructoffset())->wrate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const WSeries<double>*) G__getstructoffset())->wrate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<double>*) G__getstructoffset())->setlow((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const WSeries<double>*) G__getstructoffset())->getlow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<double>*) G__getstructoffset())->sethigh((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const WSeries<double>*) G__getstructoffset())->gethigh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WSeries<double>*) G__getstructoffset())->maxLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((WSeries<double>*) G__getstructoffset())->sizeZero());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((WSeries<double>*) G__getstructoffset())->maxIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         slice* pobj;
         slice xobj = ((WSeries<double>*) G__getstructoffset())->getSlice((double) G__double(libp->para[0]));
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->resolution((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->resolution());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->frequency((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WSeries<double>*) G__getstructoffset())->layer((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WSeries<double>*) G__getstructoffset())->getLayer(*(wavearray<double>*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<double>*) G__getstructoffset())->putLayer(*(wavearray<double>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->getSample((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->putSample((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<double>*) G__getstructoffset())->setWavelet(*(Wavelet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WSeries<double>*) G__getstructoffset())->isWDM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((WSeries<double>*) G__getstructoffset())->Forward((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((WSeries<double>*) G__getstructoffset())->Forward();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((WSeries<double>*) G__getstructoffset())->Forward(*(wavearray<double>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((WSeries<double>*) G__getstructoffset())->Forward(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((WSeries<double>*) G__getstructoffset())->Forward(*(wavearray<double>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((WSeries<double>*) G__getstructoffset())->Forward(*(wavearray<double>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((WSeries<double>*) G__getstructoffset())->Inverse((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((WSeries<double>*) G__getstructoffset())->Inverse();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((WSeries<double>*) G__getstructoffset())->bandpass(*(wavearray<double>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((WSeries<double>*) G__getstructoffset())->bandpass(*(wavearray<double>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((WSeries<double>*) G__getstructoffset())->bandpass((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((WSeries<double>*) G__getstructoffset())->bandpass((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 107, (long) ((WSeries<double>*) G__getstructoffset())->maxEnergy(*(wavearray<double>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 107, (long) ((WSeries<double>*) G__getstructoffset())->maxEnergy(*(wavearray<double>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((WSeries<double>*) G__getstructoffset())->scan(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((WSeries<double>*) G__getstructoffset())->scan(*(WSeries<double>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((WSeries<double>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((WSeries<double>*) G__getstructoffset())->median((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         WSeries<double>* pobj;
         WSeries<double> xobj = ((WSeries<double>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
         pobj = new WSeries<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         WSeries<double>* pobj;
         WSeries<double> xobj = ((WSeries<double>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new WSeries<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         WSeries<double>* pobj;
         WSeries<double> xobj = ((WSeries<double>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new WSeries<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((WSeries<double>*) G__getstructoffset())->white(*((WSeries<double>*) G__int(libp->para[0])), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((WSeries<double>*) G__getstructoffset())->white(*((WSeries<double>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((WSeries<double>*) G__getstructoffset())->filter((size_t) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         WSeries<float>* pobj;
         WSeries<float> xobj = ((WSeries<double>*) G__getstructoffset())->variability((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new WSeries<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         WSeries<float>* pobj;
         WSeries<float> xobj = ((WSeries<double>*) G__getstructoffset())->variability((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
         pobj = new WSeries<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         WSeries<float>* pobj;
         WSeries<float> xobj = ((WSeries<double>*) G__getstructoffset())->variability((double) G__double(libp->para[0]));
         pobj = new WSeries<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         WSeries<float>* pobj;
         WSeries<float> xobj = ((WSeries<double>*) G__getstructoffset())->variability();
         pobj = new WSeries<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->fraction((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->fraction((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->fraction((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->fraction());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->significance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->significance((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->rsignificance((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->rsignificance((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->rsignificance());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->rSignificance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->rSignificance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->rSignificance((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->gSignificance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->gSignificance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->gSignificance((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->percentile((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (WSeries<double>*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->percentile((double) G__double(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->percentile((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->percentile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->pixclean((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->pixclean());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->coincidence(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->coincidence(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->coincidence(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->coincidence(*(WSeries<double>*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->Coincidence(*(WSeries<double>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->Coincidence(*(WSeries<double>*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<double>*) G__getstructoffset())->Coincidence(*(WSeries<double>*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      {
         WSeries<double>* pobj;
         WSeries<double> xobj = ((WSeries<double>*) G__getstructoffset())->calibrate(
(size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (d_complex*) G__int(libp->para[2]), (d_complex*) G__int(libp->para[3])
, *(wavearray<double>*) libp->para[4].ref, *(wavearray<double>*) libp->para[5].ref
, (size_t) G__int(libp->para[6]));
         pobj = new WSeries<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 6:
      {
         WSeries<double>* pobj;
         WSeries<double> xobj = ((WSeries<double>*) G__getstructoffset())->calibrate((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (d_complex*) G__int(libp->para[2]), (d_complex*) G__int(libp->para[3])
, *(wavearray<double>*) libp->para[4].ref, *(wavearray<double>*) libp->para[5].ref);
         pobj = new WSeries<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<double>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) WSeries<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WSeries<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) WSeries<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      WSeries<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WSeries<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WSeries<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WSeries<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_632_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WSeries<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef WSeries<double> G__TWSerieslEdoublegR;
static int G__wave_dict_632_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (WSeries<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((WSeries<double>*) (soff+(sizeof(WSeries<double>)*i)))->~G__TWSerieslEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (WSeries<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((WSeries<double>*) (soff))->~G__TWSerieslEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* WSeries<float> */
static int G__wave_dict_633_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WSeries<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WSeries<float>[n];
     } else {
       p = new((void*) gvp) WSeries<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WSeries<float>;
     } else {
       p = new((void*) gvp) WSeries<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WSeries<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WSeries<float>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) WSeries<float>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WSeries<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WSeries<float>(*(wavearray<float>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) WSeries<float>(*(wavearray<float>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WSeries<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WSeries<float>(*(WSeries<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) WSeries<float>(*(WSeries<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<float>& obj = ((WSeries<float>*) G__getstructoffset())->operator=(*(wavearray<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<float>& obj = ((WSeries<float>*) G__getstructoffset())->operator=(*(WSeries<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<float>& obj = ((WSeries<float>*) G__getstructoffset())->operator=((const float) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<float>& obj = ((WSeries<float>*) G__getstructoffset())->operator+=(*(WSeries<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<float>& obj = ((WSeries<float>*) G__getstructoffset())->operator-=(*(WSeries<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WSeries<float>& obj = ((WSeries<float>*) G__getstructoffset())->operator*=(*(WSeries<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<float>*) G__getstructoffset())->mul(*(WSeries<float>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WSeries<float>*) G__getstructoffset())->getMaxLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WSeries<float>*) G__getstructoffset())->getLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<float>*) G__getstructoffset())->setLevel((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<float>*) G__getstructoffset())->setbpp((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const WSeries<float>*) G__getstructoffset())->getbpp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<float>*) G__getstructoffset())->wrate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const WSeries<float>*) G__getstructoffset())->wrate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<float>*) G__getstructoffset())->setlow((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const WSeries<float>*) G__getstructoffset())->getlow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<float>*) G__getstructoffset())->sethigh((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const WSeries<float>*) G__getstructoffset())->gethigh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WSeries<float>*) G__getstructoffset())->maxLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((WSeries<float>*) G__getstructoffset())->sizeZero());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((WSeries<float>*) G__getstructoffset())->maxIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         slice* pobj;
         slice xobj = ((WSeries<float>*) G__getstructoffset())->getSlice((double) G__double(libp->para[0]));
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->resolution((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->resolution());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->frequency((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WSeries<float>*) G__getstructoffset())->layer((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WSeries<float>*) G__getstructoffset())->getLayer(*(wavearray<float>*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<float>*) G__getstructoffset())->putLayer(*(wavearray<float>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((WSeries<float>*) G__getstructoffset())->getSample((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((WSeries<float>*) G__getstructoffset())->putSample((float) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<float>*) G__getstructoffset())->setWavelet(*(Wavelet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WSeries<float>*) G__getstructoffset())->isWDM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((WSeries<float>*) G__getstructoffset())->Forward((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((WSeries<float>*) G__getstructoffset())->Forward();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((WSeries<float>*) G__getstructoffset())->Forward(*(wavearray<float>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((WSeries<float>*) G__getstructoffset())->Forward(*(wavearray<float>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((WSeries<float>*) G__getstructoffset())->Forward(*(wavearray<float>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((WSeries<float>*) G__getstructoffset())->Forward(*(wavearray<float>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((WSeries<float>*) G__getstructoffset())->Inverse((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((WSeries<float>*) G__getstructoffset())->Inverse();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((WSeries<float>*) G__getstructoffset())->bandpass(*(wavearray<float>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((WSeries<float>*) G__getstructoffset())->bandpass(*(wavearray<float>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((WSeries<float>*) G__getstructoffset())->bandpass((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((WSeries<float>*) G__getstructoffset())->bandpass((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 107, (long) ((WSeries<float>*) G__getstructoffset())->maxEnergy(*(wavearray<float>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 107, (long) ((WSeries<float>*) G__getstructoffset())->maxEnergy(*(wavearray<float>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref
, (double) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((WSeries<float>*) G__getstructoffset())->scan(*(WSeries<float>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((WSeries<float>*) G__getstructoffset())->scan(*(WSeries<float>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((WSeries<float>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((WSeries<float>*) G__getstructoffset())->median((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         WSeries<double>* pobj;
         WSeries<double> xobj = ((WSeries<float>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
         pobj = new WSeries<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         WSeries<double>* pobj;
         WSeries<double> xobj = ((WSeries<float>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new WSeries<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         WSeries<double>* pobj;
         WSeries<double> xobj = ((WSeries<float>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new WSeries<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((WSeries<float>*) G__getstructoffset())->white(*((WSeries<double>*) G__int(libp->para[0])), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((WSeries<float>*) G__getstructoffset())->white(*((WSeries<double>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((WSeries<float>*) G__getstructoffset())->filter((size_t) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         WSeries<float>* pobj;
         WSeries<float> xobj = ((WSeries<float>*) G__getstructoffset())->variability((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new WSeries<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         WSeries<float>* pobj;
         WSeries<float> xobj = ((WSeries<float>*) G__getstructoffset())->variability((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
         pobj = new WSeries<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         WSeries<float>* pobj;
         WSeries<float> xobj = ((WSeries<float>*) G__getstructoffset())->variability((double) G__double(libp->para[0]));
         pobj = new WSeries<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         WSeries<float>* pobj;
         WSeries<float> xobj = ((WSeries<float>*) G__getstructoffset())->variability();
         pobj = new WSeries<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->fraction((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->fraction((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->fraction((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->fraction());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->significance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->significance((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->rsignificance((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->rsignificance((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->rsignificance());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->rSignificance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->rSignificance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->rSignificance((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->gSignificance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->gSignificance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->gSignificance((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->percentile((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (WSeries<float>*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->percentile((double) G__double(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->percentile((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->percentile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->pixclean((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->pixclean());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->coincidence(*(WSeries<float>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->coincidence(*(WSeries<float>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->coincidence(*(WSeries<float>*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->coincidence(*(WSeries<float>*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->Coincidence(*(WSeries<float>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->Coincidence(*(WSeries<float>*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((WSeries<float>*) G__getstructoffset())->Coincidence(*(WSeries<float>*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      {
         WSeries<double>* pobj;
         WSeries<double> xobj = ((WSeries<float>*) G__getstructoffset())->calibrate(
(size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (d_complex*) G__int(libp->para[2]), (d_complex*) G__int(libp->para[3])
, *(wavearray<double>*) libp->para[4].ref, *(wavearray<double>*) libp->para[5].ref
, (size_t) G__int(libp->para[6]));
         pobj = new WSeries<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 6:
      {
         WSeries<double>* pobj;
         WSeries<double> xobj = ((WSeries<float>*) G__getstructoffset())->calibrate((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (d_complex*) G__int(libp->para[2]), (d_complex*) G__int(libp->para[3])
, *(wavearray<double>*) libp->para[4].ref, *(wavearray<double>*) libp->para[5].ref);
         pobj = new WSeries<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<float>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) WSeries<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WSeries<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) WSeries<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      WSeries<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WSeries<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WSeries<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WSeries<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WSeries<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_633_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WSeries<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef WSeries<float> G__TWSerieslEfloatgR;
static int G__wave_dict_633_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (WSeries<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((WSeries<float>*) (soff+(sizeof(WSeries<float>)*i)))->~G__TWSerieslEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (WSeries<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((WSeries<float>*) (soff))->~G__TWSerieslEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* WaveDWT<float> */
static int G__wave_dict_634_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WaveDWT<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WaveDWT<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (BORDER) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) WaveDWT<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (BORDER) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WaveDWT<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) WaveDWT<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WaveDWT<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) WaveDWT<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WaveDWT<float>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) WaveDWT<float>((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new WaveDWT<float>[n];
       } else {
         p = new((void*) gvp) WaveDWT<float>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new WaveDWT<float>;
       } else {
         p = new((void*) gvp) WaveDWT<float>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WaveDWT<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WaveDWT<float>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) WaveDWT<float>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WaveDWT<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WaveDWT<float>(*(WaveDWT<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) WaveDWT<float>(*(WaveDWT<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const WaveDWT<float>*) G__getstructoffset())->Init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WaveDWT<float>*) G__getstructoffset())->getMaxLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         slice* pobj;
         slice xobj = ((WaveDWT<float>*) G__getstructoffset())->getSlice((const double) G__double(libp->para[0]));
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         slice* pobj;
         slice xobj = ((WaveDWT<float>*) G__getstructoffset())->getSlice((const int) G__int(libp->para[0]), (const int) G__int(libp->para[1]));
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((WaveDWT<float>*) G__getstructoffset())->getTDamp((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((WaveDWT<float>*) G__getstructoffset())->getTDamp((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         wavearray<float>* pobj;
         wavearray<float> xobj = ((WaveDWT<float>*) G__getstructoffset())->getTDvec((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char) G__int(libp->para[2]));
         pobj = new wavearray<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         wavearray<float>* pobj;
         wavearray<float> xobj = ((WaveDWT<float>*) G__getstructoffset())->getTDvec((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<float>* pobj;
         wavearray<float> xobj = ((WaveDWT<float>*) G__getstructoffset())->getTDvecSSE((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char) G__int(libp->para[2]), (SSeries<double>*) G__int(libp->para[3]));
         pobj = new wavearray<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<float>*) G__getstructoffset())->getTFvec((int) G__int(libp->para[0]), *(wavearray<float>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((WaveDWT<float>*) G__getstructoffset())->getTDFsize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WaveDWT<float>*) G__getstructoffset())->allocate((size_t) G__int(libp->para[0]), (float*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WaveDWT<float>*) G__getstructoffset())->allocate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<float>*) G__getstructoffset())->release();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((WaveDWT<float>*) G__getstructoffset())->t2w((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((WaveDWT<float>*) G__getstructoffset())->t2w();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((WaveDWT<float>*) G__getstructoffset())->w2t((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((WaveDWT<float>*) G__getstructoffset())->w2t();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<float>*) G__getstructoffset())->forwardFWT((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<float>*) G__getstructoffset())->inverseFWT((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<float>*) G__getstructoffset())->predict((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<float>*) G__getstructoffset())->update((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<float>*) G__getstructoffset())->forward((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<float>*) G__getstructoffset())->inverse((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) WaveDWT<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WaveDWT<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) WaveDWT<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      WaveDWT<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WaveDWT<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WaveDWT<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WaveDWT<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_634_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WaveDWT<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef WaveDWT<float> G__TWaveDWTlEfloatgR;
static int G__wave_dict_634_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (WaveDWT<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((WaveDWT<float>*) (soff+(sizeof(WaveDWT<float>)*i)))->~G__TWaveDWTlEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (WaveDWT<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((WaveDWT<float>*) (soff))->~G__TWaveDWTlEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_634_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WaveDWT<float>* dest = (WaveDWT<float>*) G__getstructoffset();
   *dest = *(WaveDWT<float>*) libp->para[0].ref;
   const WaveDWT<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SSeries<double> */
static int G__wave_dict_635_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SSeries<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SSeries<double>[n];
     } else {
       p = new((void*) gvp) SSeries<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SSeries<double>;
     } else {
       p = new((void*) gvp) SSeries<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SSeries<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SSeries<double>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SSeries<double>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SSeries<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SSeries<double>(*(wavearray<double>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) SSeries<double>(*(wavearray<double>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SSeries<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SSeries<double>(*(WSeries<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SSeries<double>(*(WSeries<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<double>*) G__getstructoffset())->SetMap((WSeries<double>*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((SSeries<double>*) G__getstructoffset())->AddCore((size_t) G__int(libp->para[0]), (netcluster*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((SSeries<double>*) G__getstructoffset())->AddCore((size_t) G__int(libp->para[0]), (netcluster*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((SSeries<double>*) G__getstructoffset())->SetHalo((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((SSeries<double>*) G__getstructoffset())->SetHalo((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SSeries<double>*) G__getstructoffset())->SetHalo((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SSeries<double>*) G__getstructoffset())->SetHalo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((SSeries<double>*) G__getstructoffset())->GetHaloSlice((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((SSeries<double>*) G__getstructoffset())->GetHaloSlice());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<double>*) G__getstructoffset())->GetHaloLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SSeries<double>*) G__getstructoffset())->GetHaloDelay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((SSeries<double>*) G__getstructoffset())->GetSparseSize((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((SSeries<double>*) G__getstructoffset())->GetSparseSize());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SSeries<double>*) G__getstructoffset())->GetSTFdata((int) G__int(libp->para[0]), (SymmArraySSE<float>*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         wavearray<int>* pobj;
         wavearray<int> xobj = ((SSeries<double>*) G__getstructoffset())->GetSparseIndex((bool) G__int(libp->para[0]));
         pobj = new wavearray<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         wavearray<int>* pobj;
         wavearray<int> xobj = ((SSeries<double>*) G__getstructoffset())->GetSparseIndex();
         pobj = new wavearray<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<double>*) G__getstructoffset())->ResetSparseTable();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<double>*) G__getstructoffset())->UpdateSparseTable();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SSeries<double>*) G__getstructoffset())->Expand((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SSeries<double>*) G__getstructoffset())->Expand();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<double>*) G__getstructoffset())->Clean();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<double>*) G__getstructoffset())->Shrink();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<double>*) G__getstructoffset())->GetSlice((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<double>*) G__getstructoffset())->GetLayer((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((SSeries<double>*) G__getstructoffset())->Init((WSeries<double>*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SSeries<double>*) G__getstructoffset())->Init((WSeries<double>*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SSeries<double>*) G__getstructoffset())->Init();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<double>*) G__getstructoffset())->GetLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<double>*) G__getstructoffset())->GetSlices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<double>*) G__getstructoffset())->GetFreqResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<double>*) G__getstructoffset())->GetTimeResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<double>*) G__getstructoffset())->GetMap00((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<double>*) G__getstructoffset())->GetMap90((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<double>*) G__getstructoffset())->GetMap00((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<double>*) G__getstructoffset())->GetMap90((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<double>*) G__getstructoffset())->SetMap00((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<double>*) G__getstructoffset())->SetMap90((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<double>*) G__getstructoffset())->SetMap00((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<double>*) G__getstructoffset())->SetMap90((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((SSeries<double>*) G__getstructoffset())->Core((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((SSeries<double>*) G__getstructoffset())->Core((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<double>*) G__getstructoffset())->binarySearch((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<double>*) G__getstructoffset())->binarySearch((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<double>*) G__getstructoffset())->CheckWaveletType(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SSeries<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SSeries<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SSeries<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SSeries<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SSeries<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SSeries<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SSeries<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_635_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SSeries<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_635_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SSeries<double>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SSeries<double>(*(SSeries<double>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SSeries<double> G__TSSerieslEdoublegR;
static int G__wave_dict_635_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SSeries<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SSeries<double>*) (soff+(sizeof(SSeries<double>)*i)))->~G__TSSerieslEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SSeries<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SSeries<double>*) (soff))->~G__TSSerieslEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_635_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SSeries<double>* dest = (SSeries<double>*) G__getstructoffset();
   *dest = *(SSeries<double>*) libp->para[0].ref;
   const SSeries<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* WaveDWT<double> */
static int G__wave_dict_636_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WaveDWT<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WaveDWT<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (BORDER) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) WaveDWT<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (BORDER) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WaveDWT<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) WaveDWT<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WaveDWT<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) WaveDWT<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WaveDWT<double>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) WaveDWT<double>((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new WaveDWT<double>[n];
       } else {
         p = new((void*) gvp) WaveDWT<double>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new WaveDWT<double>;
       } else {
         p = new((void*) gvp) WaveDWT<double>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WaveDWT<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WaveDWT<double>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) WaveDWT<double>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WaveDWT<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WaveDWT<double>(*(WaveDWT<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) WaveDWT<double>(*(WaveDWT<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const WaveDWT<double>*) G__getstructoffset())->Init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WaveDWT<double>*) G__getstructoffset())->getMaxLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         slice* pobj;
         slice xobj = ((WaveDWT<double>*) G__getstructoffset())->getSlice((const double) G__double(libp->para[0]));
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         slice* pobj;
         slice xobj = ((WaveDWT<double>*) G__getstructoffset())->getSlice((const int) G__int(libp->para[0]), (const int) G__int(libp->para[1]));
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((WaveDWT<double>*) G__getstructoffset())->getTDamp((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((WaveDWT<double>*) G__getstructoffset())->getTDamp((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         wavearray<float>* pobj;
         wavearray<float> xobj = ((WaveDWT<double>*) G__getstructoffset())->getTDvec((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char) G__int(libp->para[2]));
         pobj = new wavearray<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         wavearray<float>* pobj;
         wavearray<float> xobj = ((WaveDWT<double>*) G__getstructoffset())->getTDvec((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<float>* pobj;
         wavearray<float> xobj = ((WaveDWT<double>*) G__getstructoffset())->getTDvecSSE((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char) G__int(libp->para[2]), (SSeries<double>*) G__int(libp->para[3]));
         pobj = new wavearray<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<double>*) G__getstructoffset())->getTFvec((int) G__int(libp->para[0]), *(wavearray<float>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((WaveDWT<double>*) G__getstructoffset())->getTDFsize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WaveDWT<double>*) G__getstructoffset())->allocate((size_t) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((WaveDWT<double>*) G__getstructoffset())->allocate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<double>*) G__getstructoffset())->release();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((WaveDWT<double>*) G__getstructoffset())->t2w((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((WaveDWT<double>*) G__getstructoffset())->t2w();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((WaveDWT<double>*) G__getstructoffset())->w2t((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((WaveDWT<double>*) G__getstructoffset())->w2t();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<double>*) G__getstructoffset())->forwardFWT((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<double>*) G__getstructoffset())->inverseFWT((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<double>*) G__getstructoffset())->predict((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<double>*) G__getstructoffset())->update((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<double>*) G__getstructoffset())->forward((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<double>*) G__getstructoffset())->inverse((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) WaveDWT<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WaveDWT<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) WaveDWT<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      WaveDWT<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveDWT<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WaveDWT<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WaveDWT<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WaveDWT<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_636_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WaveDWT<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef WaveDWT<double> G__TWaveDWTlEdoublegR;
static int G__wave_dict_636_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (WaveDWT<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((WaveDWT<double>*) (soff+(sizeof(WaveDWT<double>)*i)))->~G__TWaveDWTlEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (WaveDWT<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((WaveDWT<double>*) (soff))->~G__TWaveDWTlEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_636_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WaveDWT<double>* dest = (WaveDWT<double>*) G__getstructoffset();
   *dest = *(WaveDWT<double>*) libp->para[0].ref;
   const WaveDWT<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<netpixel,allocator<netpixel> > */
static int G__wave_dict_638_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<netpixel,allocator<netpixel> >::reference obj = ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->at((vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netpixel,allocator<netpixel> >::const_reference obj = ((const vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->at((vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netpixel,allocator<netpixel> >::iterator* pobj;
         vector<netpixel,allocator<netpixel> >::iterator xobj = ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->begin();
         pobj = new vector<netpixel,allocator<netpixel> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netpixel,allocator<netpixel> >::iterator* pobj;
         vector<netpixel,allocator<netpixel> >::iterator xobj = ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->end();
         pobj = new vector<netpixel,allocator<netpixel> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netpixel,allocator<netpixel> >::reverse_iterator* pobj;
         vector<netpixel,allocator<netpixel> >::reverse_iterator xobj = ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->rbegin();
         pobj = new vector<netpixel,allocator<netpixel> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netpixel,allocator<netpixel> >::reverse_iterator* pobj;
         vector<netpixel,allocator<netpixel> >::reverse_iterator xobj = ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->rend();
         pobj = new vector<netpixel,allocator<netpixel> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->resize((vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->resize((vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[0]), *((netpixel*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<netpixel,allocator<netpixel> >::reference obj = ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->operator[]((vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netpixel,allocator<netpixel> >::const_reference obj = ((const vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->operator[]((vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<netpixel,allocator<netpixel> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<netpixel,allocator<netpixel> >[n];
     } else {
       p = new((void*) gvp) vector<netpixel,allocator<netpixel> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<netpixel,allocator<netpixel> >;
     } else {
       p = new((void*) gvp) vector<netpixel,allocator<netpixel> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<netpixel,allocator<netpixel> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<netpixel,allocator<netpixel> >((vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[0]), *(netpixel*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<netpixel,allocator<netpixel> >((vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[0]), *(netpixel*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<netpixel,allocator<netpixel> >((vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<netpixel,allocator<netpixel> >((vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<netpixel,allocator<netpixel> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<netpixel,allocator<netpixel> >(*(vector<netpixel,allocator<netpixel> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<netpixel,allocator<netpixel> >(*(vector<netpixel,allocator<netpixel> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<netpixel,allocator<netpixel> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<netpixel,allocator<netpixel> >(*((vector<netpixel,allocator<netpixel> >::const_iterator*) G__int(libp->para[0])), *((vector<netpixel,allocator<netpixel> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<netpixel,allocator<netpixel> >(*((vector<netpixel,allocator<netpixel> >::const_iterator*) G__int(libp->para[0])), *((vector<netpixel,allocator<netpixel> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<netpixel,allocator<netpixel> >& obj = ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->operator=(*(vector<netpixel,allocator<netpixel> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->reserve((vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const netpixel& obj = ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const netpixel& obj = ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->push_back(*(netpixel*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->swap(*(vector<netpixel,allocator<netpixel> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netpixel,allocator<netpixel> >::iterator* pobj;
         vector<netpixel,allocator<netpixel> >::iterator xobj = ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->insert(*((vector<netpixel,allocator<netpixel> >::iterator*) G__int(libp->para[0])), *(netpixel*) libp->para[1].ref);
         pobj = new vector<netpixel,allocator<netpixel> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->insert(*((vector<netpixel,allocator<netpixel> >::iterator*) G__int(libp->para[0])), *((vector<netpixel,allocator<netpixel> >::const_iterator*) G__int(libp->para[1]))
, *((vector<netpixel,allocator<netpixel> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->insert(*((vector<netpixel,allocator<netpixel> >::iterator*) G__int(libp->para[0])), (vector<netpixel,allocator<netpixel> >::size_type) G__int(libp->para[1])
, *(netpixel*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->erase(*((vector<netpixel,allocator<netpixel> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->erase(*((vector<netpixel,allocator<netpixel> >::iterator*) G__int(libp->para[0])), *((vector<netpixel,allocator<netpixel> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_638_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netpixel,allocator<netpixel> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<netpixel,allocator<netpixel> > G__TvectorlEnetpixelcOallocatorlEnetpixelgRsPgR;
static int G__wave_dict_638_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<netpixel,allocator<netpixel> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<netpixel,allocator<netpixel> >*) (soff+(sizeof(vector<netpixel,allocator<netpixel> >)*i)))->~G__TvectorlEnetpixelcOallocatorlEnetpixelgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<netpixel,allocator<netpixel> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<netpixel,allocator<netpixel> >*) (soff))->~G__TvectorlEnetpixelcOallocatorlEnetpixelgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<clusterdata,allocator<clusterdata> > */
static int G__wave_dict_642_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<clusterdata,allocator<clusterdata> >::reference obj = ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->at((vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<clusterdata,allocator<clusterdata> >::const_reference obj = ((const vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->at((vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<clusterdata,allocator<clusterdata> >::iterator* pobj;
         vector<clusterdata,allocator<clusterdata> >::iterator xobj = ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->begin();
         pobj = new vector<clusterdata,allocator<clusterdata> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<clusterdata,allocator<clusterdata> >::iterator* pobj;
         vector<clusterdata,allocator<clusterdata> >::iterator xobj = ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->end();
         pobj = new vector<clusterdata,allocator<clusterdata> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<clusterdata,allocator<clusterdata> >::reverse_iterator* pobj;
         vector<clusterdata,allocator<clusterdata> >::reverse_iterator xobj = ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->rbegin();
         pobj = new vector<clusterdata,allocator<clusterdata> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<clusterdata,allocator<clusterdata> >::reverse_iterator* pobj;
         vector<clusterdata,allocator<clusterdata> >::reverse_iterator xobj = ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->rend();
         pobj = new vector<clusterdata,allocator<clusterdata> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->resize((vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->resize((vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[0]), *((clusterdata*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<clusterdata,allocator<clusterdata> >::reference obj = ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->operator[]((vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<clusterdata,allocator<clusterdata> >::const_reference obj = ((const vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->operator[]((vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<clusterdata,allocator<clusterdata> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<clusterdata,allocator<clusterdata> >[n];
     } else {
       p = new((void*) gvp) vector<clusterdata,allocator<clusterdata> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<clusterdata,allocator<clusterdata> >;
     } else {
       p = new((void*) gvp) vector<clusterdata,allocator<clusterdata> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<clusterdata,allocator<clusterdata> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<clusterdata,allocator<clusterdata> >((vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[0]), *(clusterdata*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<clusterdata,allocator<clusterdata> >((vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[0]), *(clusterdata*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<clusterdata,allocator<clusterdata> >((vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<clusterdata,allocator<clusterdata> >((vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<clusterdata,allocator<clusterdata> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<clusterdata,allocator<clusterdata> >(*(vector<clusterdata,allocator<clusterdata> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<clusterdata,allocator<clusterdata> >(*(vector<clusterdata,allocator<clusterdata> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<clusterdata,allocator<clusterdata> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<clusterdata,allocator<clusterdata> >(*((vector<clusterdata,allocator<clusterdata> >::const_iterator*) G__int(libp->para[0])), *((vector<clusterdata,allocator<clusterdata> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<clusterdata,allocator<clusterdata> >(*((vector<clusterdata,allocator<clusterdata> >::const_iterator*) G__int(libp->para[0])), *((vector<clusterdata,allocator<clusterdata> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<clusterdata,allocator<clusterdata> >& obj = ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->operator=(*(vector<clusterdata,allocator<clusterdata> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->reserve((vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const clusterdata& obj = ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const clusterdata& obj = ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->push_back(*(clusterdata*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->swap(*(vector<clusterdata,allocator<clusterdata> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<clusterdata,allocator<clusterdata> >::iterator* pobj;
         vector<clusterdata,allocator<clusterdata> >::iterator xobj = ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->insert(*((vector<clusterdata,allocator<clusterdata> >::iterator*) G__int(libp->para[0])), *(clusterdata*) libp->para[1].ref);
         pobj = new vector<clusterdata,allocator<clusterdata> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->insert(*((vector<clusterdata,allocator<clusterdata> >::iterator*) G__int(libp->para[0])), *((vector<clusterdata,allocator<clusterdata> >::const_iterator*) G__int(libp->para[1]))
, *((vector<clusterdata,allocator<clusterdata> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->insert(*((vector<clusterdata,allocator<clusterdata> >::iterator*) G__int(libp->para[0])), (vector<clusterdata,allocator<clusterdata> >::size_type) G__int(libp->para[1])
, *(clusterdata*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->erase(*((vector<clusterdata,allocator<clusterdata> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->erase(*((vector<clusterdata,allocator<clusterdata> >::iterator*) G__int(libp->para[0])), *((vector<clusterdata,allocator<clusterdata> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_642_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<clusterdata,allocator<clusterdata> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<clusterdata,allocator<clusterdata> > G__TvectorlEclusterdatacOallocatorlEclusterdatagRsPgR;
static int G__wave_dict_642_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<clusterdata,allocator<clusterdata> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<clusterdata,allocator<clusterdata> >*) (soff+(sizeof(vector<clusterdata,allocator<clusterdata> >)*i)))->~G__TvectorlEclusterdatacOallocatorlEclusterdatagRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<clusterdata,allocator<clusterdata> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<clusterdata,allocator<clusterdata> >*) (soff))->~G__TvectorlEclusterdatacOallocatorlEclusterdatagRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
static int G__wave_dict_646_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->at((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference obj = ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->at((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->resize((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->resize((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *((vector<int,allocator<int> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->operator[]((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference obj = ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->operator[]((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >;
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *(vector<int,allocator<int> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *(vector<int,allocator<int> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->operator=(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->reserve((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->push_back(*(vector<int,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->swap(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *(vector<int,allocator<int> >*) libp->para[1].ref);
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[1])
, *(vector<int,allocator<int> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->erase(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->erase(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_646_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR;
static int G__wave_dict_646_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) (soff+(sizeof(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >)*i)))->~G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) (soff))->~G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */
static int G__wave_dict_650_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->at((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference obj = ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->at((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->resize((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->resize((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]), *((vector<float,allocator<float> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->operator[]((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference obj = ((const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->operator[]((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >;
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]), *(vector<float,allocator<float> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]), *(vector<float,allocator<float> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >& obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->operator=(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->reserve((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float,allocator<float> >& obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<float,allocator<float> >& obj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->push_back(*(vector<float,allocator<float> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->swap(*(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator* pobj;
         vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator xobj = ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->insert(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), *(vector<float,allocator<float> >*) libp->para[1].ref);
         pobj = new vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->insert(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->insert(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), (vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type) G__int(libp->para[1])
, *(vector<float,allocator<float> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->erase(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->erase(*((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_650_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > G__TvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR;
static int G__wave_dict_650_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) (soff+(sizeof(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >)*i)))->~G__TvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*) (soff))->~G__TvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wat::Alm_Base */
static int G__wave_dict_654_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wat::Alm_Base* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wat::Alm_Base((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) wat::Alm_Base((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wat::Alm_Base((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) wat::Alm_Base((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new wat::Alm_Base[n];
       } else {
         p = new((void*) gvp) wat::Alm_Base[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new wat::Alm_Base;
       } else {
         p = new((void*) gvp) wat::Alm_Base;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_Base));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_654_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Alm_Base*) G__getstructoffset())->Num_Alms((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_654_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Alm_Base*) G__getstructoffset())->Set((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_654_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wat::Alm_Base*) G__getstructoffset())->Lmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_654_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wat::Alm_Base*) G__getstructoffset())->Mmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_654_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wat::Alm_Base*) G__getstructoffset())->index_l0((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_654_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wat::Alm_Base*) G__getstructoffset())->index((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_654_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const wat::Alm_Base*) G__getstructoffset())->conformable(*(wat::Alm_Base*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_654_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Alm_Base*) G__getstructoffset())->swap(*(wat::Alm_Base*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_654_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   wat::Alm_Base* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new wat::Alm_Base(*(wat::Alm_Base*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_Base));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wat::Alm_Base G__TwatcLcLAlm_Base;
static int G__wave_dict_654_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wat::Alm_Base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wat::Alm_Base*) (soff+(sizeof(wat::Alm_Base)*i)))->~G__TwatcLcLAlm_Base();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wat::Alm_Base*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wat::Alm_Base*) (soff))->~G__TwatcLcLAlm_Base();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_654_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wat::Alm_Base* dest = (wat::Alm_Base*) G__getstructoffset();
   *dest = *(wat::Alm_Base*) libp->para[0].ref;
   const wat::Alm_Base& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wat::Alm */
static int G__wave_dict_655_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wat::Alm* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wat::Alm((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) wat::Alm((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wat::Alm((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) wat::Alm((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new wat::Alm[n];
       } else {
         p = new((void*) gvp) wat::Alm[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new wat::Alm;
       } else {
         p = new((void*) gvp) wat::Alm;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_655_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wat::Alm* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wat::Alm(*(wat::Alm*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wat::Alm(*(wat::Alm*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_655_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Alm*) G__getstructoffset())->smoothWithGauss((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_655_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Alm*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wat::Alm G__TwatcLcLAlm;
static int G__wave_dict_655_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wat::Alm*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wat::Alm*) (soff+(sizeof(wat::Alm)*i)))->~G__TwatcLcLAlm();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wat::Alm*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wat::Alm*) (soff))->~G__TwatcLcLAlm();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_655_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wat::Alm* dest = (wat::Alm*) G__getstructoffset();
   *dest = *(wat::Alm*) libp->para[0].ref;
   const wat::Alm& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wat::Alm_Template<complex<double> > */
static int G__wave_dict_656_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wat::Alm_Template<complex<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wat::Alm_Template<complex<double> >((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) wat::Alm_Template<complex<double> >((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wat::Alm_Template<complex<double> >((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) wat::Alm_Template<complex<double> >((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new wat::Alm_Template<complex<double> >[n];
       } else {
         p = new((void*) gvp) wat::Alm_Template<complex<double> >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new wat::Alm_Template<complex<double> >;
       } else {
         p = new((void*) gvp) wat::Alm_Template<complex<double> >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_656_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Alm_Template<complex<double> >*) G__getstructoffset())->Set((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_656_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Alm_Template<complex<double> >*) G__getstructoffset())->SetToZero();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_656_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const complex<double>& obj = ((wat::Alm_Template<complex<double> >*) G__getstructoffset())->operator()((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_656_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const complex<double>& obj = ((const wat::Alm_Template<complex<double> >*) G__getstructoffset())->operator()((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_656_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((wat::Alm_Template<complex<double> >*) G__getstructoffset())->mstart((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_656_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const wat::Alm_Template<complex<double> >*) G__getstructoffset())->mstart((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_656_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Alm_Template<complex<double> >*) G__getstructoffset())->swap(*(wat::Alm_Template<complex<double> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_656_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Alm_Template<complex<double> >*) G__getstructoffset())->Add(*(wat::Alm_Template<complex<double> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_656_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   wat::Alm_Template<complex<double> >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new wat::Alm_Template<complex<double> >(*(wat::Alm_Template<complex<double> >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wat::Alm_Template<complex<double> > G__TwatcLcLAlm_TemplatelEcomplexlEdoublegRsPgR;
static int G__wave_dict_656_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wat::Alm_Template<complex<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wat::Alm_Template<complex<double> >*) (soff+(sizeof(wat::Alm_Template<complex<double> >)*i)))->~G__TwatcLcLAlm_TemplatelEcomplexlEdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wat::Alm_Template<complex<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wat::Alm_Template<complex<double> >*) (soff))->~G__TwatcLcLAlm_TemplatelEcomplexlEdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_656_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wat::Alm_Template<complex<double> >* dest = (wat::Alm_Template<complex<double> >*) G__getstructoffset();
   *dest = *(wat::Alm_Template<complex<double> >*) libp->para[0].ref;
   const wat::Alm_Template<complex<double> >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* skymap */
static int G__wave_dict_657_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   skymap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new skymap[n];
     } else {
       p = new((void*) gvp) skymap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new skymap;
     } else {
       p = new((void*) gvp) skymap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_skymap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   skymap* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new skymap(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) skymap(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new skymap(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) skymap(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new skymap(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) skymap(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new skymap((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) skymap((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new skymap((double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) skymap((double) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_skymap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   skymap* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new skymap((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) skymap((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_skymap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   skymap* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new skymap((char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) skymap((char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_skymap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   skymap* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new skymap(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) skymap(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new skymap(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) skymap(*((TString*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_skymap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   skymap* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new skymap(*(skymap*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) skymap(*(skymap*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_skymap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const skymap& obj = ((skymap*) G__getstructoffset())->operator=(*(skymap*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const skymap& obj = ((skymap*) G__getstructoffset())->operator+=(*(skymap*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const skymap& obj = ((skymap*) G__getstructoffset())->operator-=(*(skymap*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const skymap& obj = ((skymap*) G__getstructoffset())->operator*=(*(skymap*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const skymap& obj = ((skymap*) G__getstructoffset())->operator/=(*(skymap*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const skymap& obj = ((skymap*) G__getstructoffset())->operator=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const skymap& obj = ((skymap*) G__getstructoffset())->operator*=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const skymap& obj = ((skymap*) G__getstructoffset())->operator+=((const double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = ((skymap*) G__getstructoffset())->operator>>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (void*) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->get((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((skymap*) G__getstructoffset())->set((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((skymap*) G__getstructoffset())->add((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((skymap*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((skymap*) G__getstructoffset())->size((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((skymap*) G__getstructoffset())->getSkyIndex((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->get((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->getPhi((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->getPhiStep((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->phiRA((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->phiRA((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->phi2RA((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->RA2phi((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->getRA((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->getTheta((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->getThetaStep((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->getDEC((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->min());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->fraction((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->norm((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((skymap*) G__getstructoffset())->norm());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((skymap*) G__getstructoffset())->downsample(*(wavearray<short>*) libp->para[0].ref, (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((skymap*) G__getstructoffset())->downsample(*(wavearray<short>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((skymap*) G__getstructoffset())->DumpBinary((char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((skymap*) G__getstructoffset())->Dump2fits((const char*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]), (char) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((skymap*) G__getstructoffset())->Dump2fits((const char*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((skymap*) G__getstructoffset())->Dump2fits((const char*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((skymap*) G__getstructoffset())->Dump2fits((const char*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (const char*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((skymap*) G__getstructoffset())->Dump2fits((const char*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((skymap*) G__getstructoffset())->Dump2fits((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((skymap*) G__getstructoffset())->DumpObject((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((skymap*) G__getstructoffset())->getType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<int>* pobj;
         wavearray<int> xobj = ((skymap*) G__getstructoffset())->neighbors((int) G__int(libp->para[0]));
         pobj = new wavearray<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((skymap*) G__getstructoffset())->median((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((skymap*) G__getstructoffset())->smoothing((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((skymap*) G__getstructoffset())->smoothing((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((skymap*) G__getstructoffset())->smoothing((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((skymap*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((skymap*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((skymap*) G__getstructoffset())->rotate((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((skymap*) G__getstructoffset())->setAlm(*((wat::Alm*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         wat::Alm* pobj;
         wat::Alm xobj = ((skymap*) G__getstructoffset())->getAlm((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wat::Alm(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wat::Alm* pobj;
         wat::Alm xobj = ((skymap*) G__getstructoffset())->getAlm((int) G__int(libp->para[0]));
         pobj = new wat::Alm(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((skymap*) G__getstructoffset())->resample((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((skymap*) G__getstructoffset())->getRings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((skymap*) G__getstructoffset())->getRingPixels((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((skymap*) G__getstructoffset())->getStartRingPixel((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((skymap*) G__getstructoffset())->getEulerCharacteristic((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((skymap*) G__getstructoffset())->getOrder());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) skymap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) skymap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) skymap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      skymap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((skymap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) skymap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) skymap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) skymap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_657_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) skymap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef skymap G__Tskymap;
static int G__wave_dict_657_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (skymap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((skymap*) (soff+(sizeof(skymap)*i)))->~G__Tskymap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (skymap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((skymap*) (soff))->~G__Tskymap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wavearray<short> */
static int G__wave_dict_658_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<short>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<short>((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) wavearray<short>((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<short>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<short>[n];
     } else {
       p = new((void*) gvp) wavearray<short>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<short>;
     } else {
       p = new((void*) gvp) wavearray<short>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<short>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<short>(*(wavearray<short>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wavearray<short>(*(wavearray<short>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<short>& obj = ((wavearray<short>*) G__getstructoffset())->operator=(*(wavearray<short>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<short>& obj = ((wavearray<short>*) G__getstructoffset())->operator[](*(slice*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const short& obj = ((wavearray<short>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 's', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<short>*) G__getstructoffset())->limit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<short>*) G__getstructoffset())->limit(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<short>*) G__getstructoffset())->limit(*(wavearray<short>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<short>& obj = ((wavearray<short>*) G__getstructoffset())->operator+=(*(wavearray<short>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<short>& obj = ((wavearray<short>*) G__getstructoffset())->operator-=(*(wavearray<short>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<short>& obj = ((wavearray<short>*) G__getstructoffset())->operator*=(*(wavearray<short>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<short>& obj = ((wavearray<short>*) G__getstructoffset())->operator<<(*(wavearray<short>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<short>& obj = ((wavearray<short>*) G__getstructoffset())->operator=((const short) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<short>& obj = ((wavearray<short>*) G__getstructoffset())->operator+=((const short) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<short>& obj = ((wavearray<short>*) G__getstructoffset())->operator-=((const short) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<short>& obj = ((wavearray<short>*) G__getstructoffset())->operator*=((const short) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = ((wavearray<short>*) G__getstructoffset())->operator>>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (void*) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<short>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<short>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<short>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<short>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<short>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<short>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->DumpObject((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<short>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<short>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->ReadShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<short>*) G__getstructoffset())->FFT((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<short>*) G__getstructoffset())->FFT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<short>*) G__getstructoffset())->FFTW((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<short>*) G__getstructoffset())->FFTW();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->resetFFTW();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<short>*) G__getstructoffset())->Resample(*(wavearray<short>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<short>*) G__getstructoffset())->Resample(*(wavearray<short>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<short>*) G__getstructoffset())->resample(*(wavearray<short>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<short>*) G__getstructoffset())->resample(*(wavearray<short>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<short>*) G__getstructoffset())->resample((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<short>*) G__getstructoffset())->resample((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->start((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<short>*) G__getstructoffset())->start());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->stop((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<short>*) G__getstructoffset())->stop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->rate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<short>*) G__getstructoffset())->rate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->edge((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<short>*) G__getstructoffset())->edge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<short>*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->setSlice(*(slice*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const slice* pobj;
         const slice xobj = ((const wavearray<short>*) G__getstructoffset())->getSlice();
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const wavearray<short>*) G__getstructoffset())->median((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const wavearray<short>*) G__getstructoffset())->median((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const wavearray<short>*) G__getstructoffset())->median());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<short>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<short>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<short>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<short>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<short>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<short>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<short>*) G__getstructoffset())->mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<short>*) G__getstructoffset())->mean((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<short>*) G__getstructoffset())->mean(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<short>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<short>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<short>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<short>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<short>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<short>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<short>*) G__getstructoffset())->rms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<short>*) G__getstructoffset())->rms(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<short>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<short>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<short>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<short>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<short>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<short>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const wavearray<short>*) G__getstructoffset())->max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->max(*(wavearray<short>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const wavearray<short>*) G__getstructoffset())->min());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->SQRT();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->hann();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const wavearray<short>*) G__getstructoffset())->waveSort((short**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const wavearray<short>*) G__getstructoffset())->waveSort((short**) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const wavearray<short>*) G__getstructoffset())->waveSort((short**) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<short>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<short>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<short>*) G__getstructoffset())->waveSort();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const wavearray<short>*) G__getstructoffset())->waveSplit((short**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((wavearray<short>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<short>*) G__getstructoffset())->getSampleRank((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<short>*) G__getstructoffset())->getSampleRankE((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 115, (long) ((const wavearray<short>*) G__getstructoffset())->rank((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 115, (long) ((const wavearray<short>*) G__getstructoffset())->rank());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<short>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<short>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<short>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<short>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->lprFilter(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<short>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<short>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<short>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<short>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<short>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<short>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<short>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<short>*) G__getstructoffset())->white((double) G__double(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->exponential((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((wavearray<short>*) G__getstructoffset())->get((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((wavearray<short>*) G__getstructoffset())->get((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((wavearray<short>*) G__getstructoffset())->uniform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 108, (long) ((wavearray<short>*) G__getstructoffset())->rand48((long) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((wavearray<short>*) G__getstructoffset())->rand48());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<short>*) G__getstructoffset())->getStatistics(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<short>*) G__getstructoffset())->cpf(*(wavearray<short>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<short>*) G__getstructoffset())->cpf(*(wavearray<short>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<short>*) G__getstructoffset())->cpf(*(wavearray<short>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<short>*) G__getstructoffset())->cpf(*(wavearray<short>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<short>*) G__getstructoffset())->add(*(wavearray<short>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<short>*) G__getstructoffset())->add(*(wavearray<short>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<short>*) G__getstructoffset())->add(*(wavearray<short>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<short>*) G__getstructoffset())->add(*(wavearray<short>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<short>*) G__getstructoffset())->sub(*(wavearray<short>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<short>*) G__getstructoffset())->sub(*(wavearray<short>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<short>*) G__getstructoffset())->sub(*(wavearray<short>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<short>*) G__getstructoffset())->sub(*(wavearray<short>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<short>*) G__getstructoffset())->append(*(wavearray<short>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<short>*) G__getstructoffset())->append((short) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<short>*) G__getstructoffset())->wavecount((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<short>*) G__getstructoffset())->Stack(*(wavearray<short>*) libp->para[0].ref, (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<short>*) G__getstructoffset())->Stack(*(wavearray<short>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<short>*) G__getstructoffset())->Stack(*(wavearray<short>*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<short>::compare((void*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) wavearray<short>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<short>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) wavearray<short>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      wavearray<short>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<short>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<short>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<short>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<short>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_658_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<short>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wavearray<short> G__TwavearraylEshortgR;
static int G__wave_dict_658_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wavearray<short>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wavearray<short>*) (soff+(sizeof(wavearray<short>)*i)))->~G__TwavearraylEshortgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wavearray<short>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wavearray<short>*) (soff))->~G__TwavearraylEshortgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wavearray<int> */
static int G__wave_dict_659_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<int>((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) wavearray<int>((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<int>[n];
     } else {
       p = new((void*) gvp) wavearray<int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<int>;
     } else {
       p = new((void*) gvp) wavearray<int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<int>(*(wavearray<int>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wavearray<int>(*(wavearray<int>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<int>& obj = ((wavearray<int>*) G__getstructoffset())->operator=(*(wavearray<int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<int>& obj = ((wavearray<int>*) G__getstructoffset())->operator[](*(slice*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((wavearray<int>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<int>*) G__getstructoffset())->limit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<int>*) G__getstructoffset())->limit(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<int>*) G__getstructoffset())->limit(*(wavearray<int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<int>& obj = ((wavearray<int>*) G__getstructoffset())->operator+=(*(wavearray<int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<int>& obj = ((wavearray<int>*) G__getstructoffset())->operator-=(*(wavearray<int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<int>& obj = ((wavearray<int>*) G__getstructoffset())->operator*=(*(wavearray<int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<int>& obj = ((wavearray<int>*) G__getstructoffset())->operator<<(*(wavearray<int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<int>& obj = ((wavearray<int>*) G__getstructoffset())->operator=((const int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<int>& obj = ((wavearray<int>*) G__getstructoffset())->operator+=((const int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<int>& obj = ((wavearray<int>*) G__getstructoffset())->operator-=((const int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<int>& obj = ((wavearray<int>*) G__getstructoffset())->operator*=((const int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = ((wavearray<int>*) G__getstructoffset())->operator>>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (void*) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<int>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<int>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<int>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<int>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<int>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<int>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->DumpObject((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<int>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<int>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->ReadShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<int>*) G__getstructoffset())->FFT((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<int>*) G__getstructoffset())->FFT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<int>*) G__getstructoffset())->FFTW((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<int>*) G__getstructoffset())->FFTW();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->resetFFTW();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<int>*) G__getstructoffset())->Resample(*(wavearray<int>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<int>*) G__getstructoffset())->Resample(*(wavearray<int>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<int>*) G__getstructoffset())->resample(*(wavearray<int>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<int>*) G__getstructoffset())->resample(*(wavearray<int>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<int>*) G__getstructoffset())->resample((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<int>*) G__getstructoffset())->resample((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->start((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<int>*) G__getstructoffset())->start());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->stop((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<int>*) G__getstructoffset())->stop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->rate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<int>*) G__getstructoffset())->rate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->edge((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<int>*) G__getstructoffset())->edge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<int>*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->setSlice(*(slice*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const slice* pobj;
         const slice xobj = ((const wavearray<int>*) G__getstructoffset())->getSlice();
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const wavearray<int>*) G__getstructoffset())->median((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const wavearray<int>*) G__getstructoffset())->median((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const wavearray<int>*) G__getstructoffset())->median());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<int>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<int>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<int>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<int>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<int>*) G__getstructoffset())->mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<int>*) G__getstructoffset())->mean((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<int>*) G__getstructoffset())->mean(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<int>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<int>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<int>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<int>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<int>*) G__getstructoffset())->rms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<int>*) G__getstructoffset())->rms(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<int>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<int>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<int>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<int>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<int>*) G__getstructoffset())->max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->max(*(wavearray<int>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<int>*) G__getstructoffset())->min());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->SQRT();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->hann();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const wavearray<int>*) G__getstructoffset())->waveSort((int**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const wavearray<int>*) G__getstructoffset())->waveSort((int**) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const wavearray<int>*) G__getstructoffset())->waveSort((int**) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<int>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<int>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<int>*) G__getstructoffset())->waveSort();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const wavearray<int>*) G__getstructoffset())->waveSplit((int**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wavearray<int>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<int>*) G__getstructoffset())->getSampleRank((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<int>*) G__getstructoffset())->getSampleRankE((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const wavearray<int>*) G__getstructoffset())->rank((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const wavearray<int>*) G__getstructoffset())->rank());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<int>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<int>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<int>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<int>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->lprFilter(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<int>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<int>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<int>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<int>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<int>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<int>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<int>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<int>*) G__getstructoffset())->white((double) G__double(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->exponential((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wavearray<int>*) G__getstructoffset())->get((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wavearray<int>*) G__getstructoffset())->get((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((wavearray<int>*) G__getstructoffset())->uniform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 108, (long) ((wavearray<int>*) G__getstructoffset())->rand48((long) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((wavearray<int>*) G__getstructoffset())->rand48());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<int>*) G__getstructoffset())->getStatistics(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<int>*) G__getstructoffset())->cpf(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<int>*) G__getstructoffset())->cpf(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<int>*) G__getstructoffset())->cpf(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<int>*) G__getstructoffset())->cpf(*(wavearray<int>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<int>*) G__getstructoffset())->add(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<int>*) G__getstructoffset())->add(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<int>*) G__getstructoffset())->add(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<int>*) G__getstructoffset())->add(*(wavearray<int>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<int>*) G__getstructoffset())->sub(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<int>*) G__getstructoffset())->sub(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<int>*) G__getstructoffset())->sub(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<int>*) G__getstructoffset())->sub(*(wavearray<int>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<int>*) G__getstructoffset())->append(*(wavearray<int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<int>*) G__getstructoffset())->append((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<int>*) G__getstructoffset())->wavecount((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<int>*) G__getstructoffset())->Stack(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<int>*) G__getstructoffset())->Stack(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<int>*) G__getstructoffset())->Stack(*(wavearray<int>*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<int>::compare((void*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) wavearray<int>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<int>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) wavearray<int>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      wavearray<int>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<int>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<int>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<int>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<int>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_659_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<int>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wavearray<int> G__TwavearraylEintgR;
static int G__wave_dict_659_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wavearray<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wavearray<int>*) (soff+(sizeof(wavearray<int>)*i)))->~G__TwavearraylEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wavearray<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wavearray<int>*) (soff))->~G__TwavearraylEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
static int G__wave_dict_661_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->at((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference obj = ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->at((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->resize((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->resize((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *((vector<double,allocator<double> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->operator[]((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference obj = ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->operator[]((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >;
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *(vector<double,allocator<double> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *(vector<double,allocator<double> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->operator=(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->reserve((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double,allocator<double> >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double,allocator<double> >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->push_back(*(vector<double,allocator<double> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->swap(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *(vector<double,allocator<double> >*) libp->para[1].ref);
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[1])
, *(vector<double,allocator<double> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->erase(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->erase(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_661_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR;
static int G__wave_dict_661_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) (soff+(sizeof(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >)*i)))->~G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) (soff))->~G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmArraySSE<float> */
static int G__wave_dict_664_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArraySSE<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmArraySSE<float>((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmArraySSE<float>((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArraySSE<float>[n];
       } else {
         p = new((void*) gvp) SymmArraySSE<float>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArraySSE<float>;
       } else {
         p = new((void*) gvp) SymmArraySSE<float>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArraySSE<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmArraySSE<float>(*(SymmArraySSE<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmArraySSE<float>(*(SymmArraySSE<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArraySSE<float>& obj = ((SymmArraySSE<float>*) G__getstructoffset())->operator=(*(SymmArraySSE<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<float>*) G__getstructoffset())->Init((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<float>*) G__getstructoffset())->Resize((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<float>*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<float>*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((SymmArraySSE<float>*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((SymmArraySSE<float>*) G__getstructoffset())->SSEPointer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SymmArraySSE<float>*) G__getstructoffset())->SSESize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SymmArraySSE<float>*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<float>*) G__getstructoffset())->ZeroExtraElements();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmArraySSE<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArraySSE<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmArraySSE<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmArraySSE<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArraySSE<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArraySSE<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArraySSE<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_664_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArraySSE<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmArraySSE<float> G__TSymmArraySSElEfloatgR;
static int G__wave_dict_664_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmArraySSE<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmArraySSE<float>*) (soff+(sizeof(SymmArraySSE<float>)*i)))->~G__TSymmArraySSElEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmArraySSE<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmArraySSE<float>*) (soff))->~G__TSymmArraySSElEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* delayFilter */
// automatic default constructor
static int G__wave_dict_665_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   delayFilter *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new delayFilter[n];
     } else {
       p = new((void*) gvp) delayFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new delayFilter;
     } else {
       p = new((void*) gvp) delayFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_delayFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_665_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   delayFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new delayFilter(*(delayFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_delayFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef delayFilter G__TdelayFilter;
static int G__wave_dict_665_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (delayFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((delayFilter*) (soff+(sizeof(delayFilter)*i)))->~G__TdelayFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (delayFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((delayFilter*) (soff))->~G__TdelayFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_665_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   delayFilter* dest = (delayFilter*) G__getstructoffset();
   *dest = *(delayFilter*) libp->para[0].ref;
   const delayFilter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* detectorParams */
// automatic default constructor
static int G__wave_dict_666_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   detectorParams *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new detectorParams[n];
     } else {
       p = new((void*) gvp) detectorParams[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new detectorParams;
     } else {
       p = new((void*) gvp) detectorParams;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_detectorParams));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_666_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   detectorParams* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new detectorParams(*(detectorParams*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_detectorParams));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef detectorParams G__TdetectorParams;
static int G__wave_dict_666_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (detectorParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((detectorParams*) (soff+(sizeof(detectorParams)*i)))->~G__TdetectorParams();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (detectorParams*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((detectorParams*) (soff))->~G__TdetectorParams();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_666_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   detectorParams* dest = (detectorParams*) G__getstructoffset();
   *dest = *(detectorParams*) libp->para[0].ref;
   const detectorParams& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* detector */
static int G__wave_dict_668_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   detector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new detector[n];
     } else {
       p = new((void*) gvp) detector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new detector;
     } else {
       p = new((void*) gvp) detector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_detector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   detector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new detector((char*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) detector((char*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new detector((char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) detector((char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_detector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   detector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new detector(*((detectorParams*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) detector(*((detectorParams*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new detector(*((detectorParams*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) detector(*((detectorParams*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_detector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   detector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new detector(*(detector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) detector(*(detector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_detector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const detector& obj = ((detector*) G__getstructoffset())->operator=(*(detector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const detector& obj = ((detector*) G__getstructoffset())->operator=(*(WSeries<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const detector& obj = ((detector*) G__getstructoffset())->operator<<(*(detector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const detector& obj = ((detector*) G__getstructoffset())->operator>>(*(detector*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         wavecomplex* pobj;
         wavecomplex xobj = ((detector*) G__getstructoffset())->antenna((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new wavecomplex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         wavecomplex* pobj;
         wavecomplex xobj = ((detector*) G__getstructoffset())->antenna((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
         pobj = new wavecomplex(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         detectorParams* pobj;
         detectorParams xobj = ((detector*) G__getstructoffset())->getDetectorParams();
         pobj = new detectorParams(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->getTau((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->setFilter((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (size_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->setFilter((size_t) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->setFilter((size_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->setFilter(*(detector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->writeFilter((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->readFilter((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->clearFilter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->delay((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->delay(*(wavearray<double>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->delay(*(wavearray<double>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->delay((double) G__double(libp->para[0]), *(WSeries<double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((detector*) G__getstructoffset())->getHoT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((detector*) G__getstructoffset())->getTFmap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((detector*) G__getstructoffset())->getSTFind((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((detector*) G__getstructoffset())->getSTFmap((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->ssize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->sclear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((detector*) G__getstructoffset())->addSTFmap((netcluster*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((detector*) G__getstructoffset())->addSTFmap((netcluster*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->getwave((int) G__int(libp->para[0]), *(netcluster*) libp->para[1].ref
, (char) G__int(libp->para[2]), (size_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((detector*) G__getstructoffset())->setTau((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((detector*) G__getstructoffset())->setTau((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((detector*) G__getstructoffset())->setTau((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((detector*) G__getstructoffset())->setTau((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((detector*) G__getstructoffset())->setTau((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->setTau((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((detector*) G__getstructoffset())->setFpFx((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((detector*) G__getstructoffset())->setFpFx((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((detector*) G__getstructoffset())->setFpFx((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((detector*) G__getstructoffset())->setFpFx((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((detector*) G__getstructoffset())->setFpFx((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->setFpFx((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->getNoise((size_t) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->getNoise((size_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((detector*) G__getstructoffset())->setrms((netcluster*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((detector*) G__getstructoffset())->setrms((netcluster*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((detector*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((detector*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((detector*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((detector*) G__getstructoffset())->white((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((detector*) G__getstructoffset())->white();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->shift((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->shift());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->rotate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((detector*) G__getstructoffset())->bandPass1G((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((detector*) G__getstructoffset())->bandPass1G((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((detector*) G__getstructoffset())->bandPass1G();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((detector*) G__getstructoffset())->bandPass((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((detector*) G__getstructoffset())->bandPass((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->bandCut((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->lowPass((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->highPass((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->setsim(*(WSeries<double>*) libp->para[0].ref, (vector<double>*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->setsim(*(WSeries<double>*) libp->para[0].ref, (vector<double>*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->setsim(*(WSeries<double>*) libp->para[0].ref, (vector<double>*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->setsim(*(WSeries<double>*) libp->para[0].ref, (vector<double>*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->setsnr(*(wavearray<double>*) libp->para[0].ref, (vector<double>*) G__int(libp->para[1])
, (vector<double>*) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->setsnr(*(wavearray<double>*) libp->para[0].ref, (vector<double>*) G__int(libp->para[1])
, (vector<double>*) G__int(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 107, (long) ((detector*) G__getstructoffset())->setsnr(*(wavearray<double>*) libp->para[0].ref, (vector<double>*) G__int(libp->para[1])
, (vector<double>*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((detector*) G__getstructoffset())->isBuiltin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((detector*) G__getstructoffset())->setPolarization((POLARIZATION) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((detector*) G__getstructoffset())->setPolarization();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((detector*) G__getstructoffset())->getPolarization());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->get_SS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->get_XX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->get_NN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->get_XS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->getWFfreq((char) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->getWFfreq());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->getWFtime((char) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((detector*) G__getstructoffset())->getWFtime());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((detector*) G__getstructoffset())->wfsave());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->wfsave((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) detector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) detector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) detector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      detector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((detector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) detector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) detector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) detector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_668_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) detector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef detector G__Tdetector;
static int G__wave_dict_668_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (detector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((detector*) (soff+(sizeof(detector)*i)))->~G__Tdetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (detector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((detector*) (soff))->~G__Tdetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SSeries<double>,allocator<SSeries<double> > > */
static int G__wave_dict_670_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SSeries<double>,allocator<SSeries<double> > >::reference obj = ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->at((vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SSeries<double>,allocator<SSeries<double> > >::const_reference obj = ((const vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->at((vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SSeries<double>,allocator<SSeries<double> > >::iterator* pobj;
         vector<SSeries<double>,allocator<SSeries<double> > >::iterator xobj = ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->begin();
         pobj = new vector<SSeries<double>,allocator<SSeries<double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SSeries<double>,allocator<SSeries<double> > >::iterator* pobj;
         vector<SSeries<double>,allocator<SSeries<double> > >::iterator xobj = ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->end();
         pobj = new vector<SSeries<double>,allocator<SSeries<double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SSeries<double>,allocator<SSeries<double> > >::reverse_iterator* pobj;
         vector<SSeries<double>,allocator<SSeries<double> > >::reverse_iterator xobj = ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->rbegin();
         pobj = new vector<SSeries<double>,allocator<SSeries<double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SSeries<double>,allocator<SSeries<double> > >::reverse_iterator* pobj;
         vector<SSeries<double>,allocator<SSeries<double> > >::reverse_iterator xobj = ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->rend();
         pobj = new vector<SSeries<double>,allocator<SSeries<double> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->resize((vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->resize((vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[0]), *((SSeries<double>*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SSeries<double>,allocator<SSeries<double> > >::reference obj = ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->operator[]((vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SSeries<double>,allocator<SSeries<double> > >::const_reference obj = ((const vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->operator[]((vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SSeries<double>,allocator<SSeries<double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SSeries<double>,allocator<SSeries<double> > >[n];
     } else {
       p = new((void*) gvp) vector<SSeries<double>,allocator<SSeries<double> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SSeries<double>,allocator<SSeries<double> > >;
     } else {
       p = new((void*) gvp) vector<SSeries<double>,allocator<SSeries<double> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SSeries<double>,allocator<SSeries<double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SSeries<double>,allocator<SSeries<double> > >((vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[0]), *(SSeries<double>*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SSeries<double>,allocator<SSeries<double> > >((vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[0]), *(SSeries<double>*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SSeries<double>,allocator<SSeries<double> > >((vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SSeries<double>,allocator<SSeries<double> > >((vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SSeries<double>,allocator<SSeries<double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SSeries<double>,allocator<SSeries<double> > >(*(vector<SSeries<double>,allocator<SSeries<double> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SSeries<double>,allocator<SSeries<double> > >(*(vector<SSeries<double>,allocator<SSeries<double> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SSeries<double>,allocator<SSeries<double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SSeries<double>,allocator<SSeries<double> > >(*((vector<SSeries<double>,allocator<SSeries<double> > >::const_iterator*) G__int(libp->para[0])), *((vector<SSeries<double>,allocator<SSeries<double> > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SSeries<double>,allocator<SSeries<double> > >(*((vector<SSeries<double>,allocator<SSeries<double> > >::const_iterator*) G__int(libp->para[0])), *((vector<SSeries<double>,allocator<SSeries<double> > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SSeries<double>,allocator<SSeries<double> > >& obj = ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->operator=(*(vector<SSeries<double>,allocator<SSeries<double> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->reserve((vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SSeries<double>& obj = ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SSeries<double>& obj = ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->push_back(*(SSeries<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->swap(*(vector<SSeries<double>,allocator<SSeries<double> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SSeries<double>,allocator<SSeries<double> > >::iterator* pobj;
         vector<SSeries<double>,allocator<SSeries<double> > >::iterator xobj = ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->insert(*((vector<SSeries<double>,allocator<SSeries<double> > >::iterator*) G__int(libp->para[0])), *(SSeries<double>*) libp->para[1].ref);
         pobj = new vector<SSeries<double>,allocator<SSeries<double> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->insert(*((vector<SSeries<double>,allocator<SSeries<double> > >::iterator*) G__int(libp->para[0])), *((vector<SSeries<double>,allocator<SSeries<double> > >::const_iterator*) G__int(libp->para[1]))
, *((vector<SSeries<double>,allocator<SSeries<double> > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->insert(*((vector<SSeries<double>,allocator<SSeries<double> > >::iterator*) G__int(libp->para[0])), (vector<SSeries<double>,allocator<SSeries<double> > >::size_type) G__int(libp->para[1])
, *(SSeries<double>*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->erase(*((vector<SSeries<double>,allocator<SSeries<double> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->erase(*((vector<SSeries<double>,allocator<SSeries<double> > >::iterator*) G__int(libp->para[0])), *((vector<SSeries<double>,allocator<SSeries<double> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_670_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SSeries<double>,allocator<SSeries<double> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SSeries<double>,allocator<SSeries<double> > > G__TvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR;
static int G__wave_dict_670_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SSeries<double>,allocator<SSeries<double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SSeries<double>,allocator<SSeries<double> > >*) (soff+(sizeof(vector<SSeries<double>,allocator<SSeries<double> > >)*i)))->~G__TvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SSeries<double>,allocator<SSeries<double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SSeries<double>,allocator<SSeries<double> > >*) (soff))->~G__TvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<delayFilter,allocator<delayFilter> > */
static int G__wave_dict_674_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<delayFilter,allocator<delayFilter> >::reference obj = ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->at((vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<delayFilter,allocator<delayFilter> >::const_reference obj = ((const vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->at((vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<delayFilter,allocator<delayFilter> >::iterator* pobj;
         vector<delayFilter,allocator<delayFilter> >::iterator xobj = ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->begin();
         pobj = new vector<delayFilter,allocator<delayFilter> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<delayFilter,allocator<delayFilter> >::iterator* pobj;
         vector<delayFilter,allocator<delayFilter> >::iterator xobj = ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->end();
         pobj = new vector<delayFilter,allocator<delayFilter> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<delayFilter,allocator<delayFilter> >::reverse_iterator* pobj;
         vector<delayFilter,allocator<delayFilter> >::reverse_iterator xobj = ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->rbegin();
         pobj = new vector<delayFilter,allocator<delayFilter> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<delayFilter,allocator<delayFilter> >::reverse_iterator* pobj;
         vector<delayFilter,allocator<delayFilter> >::reverse_iterator xobj = ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->rend();
         pobj = new vector<delayFilter,allocator<delayFilter> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->resize((vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->resize((vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[0]), *((delayFilter*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<delayFilter,allocator<delayFilter> >::reference obj = ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->operator[]((vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<delayFilter,allocator<delayFilter> >::const_reference obj = ((const vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->operator[]((vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<delayFilter,allocator<delayFilter> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<delayFilter,allocator<delayFilter> >[n];
     } else {
       p = new((void*) gvp) vector<delayFilter,allocator<delayFilter> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<delayFilter,allocator<delayFilter> >;
     } else {
       p = new((void*) gvp) vector<delayFilter,allocator<delayFilter> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<delayFilter,allocator<delayFilter> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<delayFilter,allocator<delayFilter> >((vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[0]), *(delayFilter*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<delayFilter,allocator<delayFilter> >((vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[0]), *(delayFilter*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<delayFilter,allocator<delayFilter> >((vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<delayFilter,allocator<delayFilter> >((vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<delayFilter,allocator<delayFilter> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<delayFilter,allocator<delayFilter> >(*(vector<delayFilter,allocator<delayFilter> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<delayFilter,allocator<delayFilter> >(*(vector<delayFilter,allocator<delayFilter> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<delayFilter,allocator<delayFilter> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<delayFilter,allocator<delayFilter> >(*((vector<delayFilter,allocator<delayFilter> >::const_iterator*) G__int(libp->para[0])), *((vector<delayFilter,allocator<delayFilter> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<delayFilter,allocator<delayFilter> >(*((vector<delayFilter,allocator<delayFilter> >::const_iterator*) G__int(libp->para[0])), *((vector<delayFilter,allocator<delayFilter> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<delayFilter,allocator<delayFilter> >& obj = ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->operator=(*(vector<delayFilter,allocator<delayFilter> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->reserve((vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const delayFilter& obj = ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const delayFilter& obj = ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->push_back(*(delayFilter*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->swap(*(vector<delayFilter,allocator<delayFilter> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<delayFilter,allocator<delayFilter> >::iterator* pobj;
         vector<delayFilter,allocator<delayFilter> >::iterator xobj = ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->insert(*((vector<delayFilter,allocator<delayFilter> >::iterator*) G__int(libp->para[0])), *(delayFilter*) libp->para[1].ref);
         pobj = new vector<delayFilter,allocator<delayFilter> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->insert(*((vector<delayFilter,allocator<delayFilter> >::iterator*) G__int(libp->para[0])), *((vector<delayFilter,allocator<delayFilter> >::const_iterator*) G__int(libp->para[1]))
, *((vector<delayFilter,allocator<delayFilter> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->insert(*((vector<delayFilter,allocator<delayFilter> >::iterator*) G__int(libp->para[0])), (vector<delayFilter,allocator<delayFilter> >::size_type) G__int(libp->para[1])
, *(delayFilter*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->erase(*((vector<delayFilter,allocator<delayFilter> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->erase(*((vector<delayFilter,allocator<delayFilter> >::iterator*) G__int(libp->para[0])), *((vector<delayFilter,allocator<delayFilter> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_674_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<delayFilter,allocator<delayFilter> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<delayFilter,allocator<delayFilter> > G__TvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR;
static int G__wave_dict_674_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<delayFilter,allocator<delayFilter> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<delayFilter,allocator<delayFilter> >*) (soff+(sizeof(vector<delayFilter,allocator<delayFilter> >)*i)))->~G__TvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<delayFilter,allocator<delayFilter> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<delayFilter,allocator<delayFilter> >*) (soff))->~G__TvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* monster */
static int G__wave_dict_703_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   monster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new monster[n];
     } else {
       p = new((void*) gvp) monster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new monster;
     } else {
       p = new((void*) gvp) monster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_monster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   monster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new monster((WDM<double>**) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) monster((WDM<double>**) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_monster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   monster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new monster((char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) monster((char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_monster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   monster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new monster(*(monster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) monster(*(monster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_monster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((monster*) G__getstructoffset())->deallocate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((monster*) G__getstructoffset())->write((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((monster*) G__getstructoffset())->read((char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         xtalk* pobj;
         xtalk xobj = ((monster*) G__getstructoffset())->getXTalk((int) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
         pobj = new xtalk(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((monster*) G__getstructoffset())->getXTalk((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (size_t) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         vector<int>* pobj;
         vector<int> xobj = ((monster*) G__getstructoffset())->getXTalk((netcluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<int>* pobj;
         vector<int> xobj = ((monster*) G__getstructoffset())->getXTalk((netcluster*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((monster*) G__getstructoffset())->getXTalk((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         xtalk* pobj;
         xtalk xobj = ((monster*) G__getstructoffset())->getXTalk((netpixel*) G__int(libp->para[0]), (netpixel*) G__int(libp->para[1]));
         pobj = new xtalk(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) monster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) monster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) monster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      monster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const monster*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((monster*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((monster*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((monster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) monster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) monster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) monster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_703_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) monster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef monster G__Tmonster;
static int G__wave_dict_703_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (monster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((monster*) (soff+(sizeof(monster)*i)))->~G__Tmonster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (monster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((monster*) (soff))->~G__Tmonster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_703_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   monster* dest = (monster*) G__getstructoffset();
   *dest = *(monster*) libp->para[0].ref;
   const monster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* WDM<double> */
static int G__wave_dict_704_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WDM<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WDM<double>[n];
     } else {
       p = new((void*) gvp) WDM<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WDM<double>;
     } else {
       p = new((void*) gvp) WDM<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WDM<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WDM<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) WDM<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WDM<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) WDM<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WDM<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) WDM<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WDM<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WDM<double>(*(WDM<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) WDM<double>(*(WDM<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WDM<double>*) G__getstructoffset())->getBaseWave((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(SymmArray<double>*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WDM<double>*) G__getstructoffset())->getBaseWaveQ((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(SymmArray<double>*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((WDM<double>*) G__getstructoffset())->getBaseWave((int) G__int(libp->para[0]), *(wavearray<double>*) libp->para[1].ref
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((WDM<double>*) G__getstructoffset())->getBaseWave((int) G__int(libp->para[0]), *(wavearray<double>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WDM<double>*) G__getstructoffset())->w2tQ((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((WDM<double>*) G__getstructoffset())->getPixelAmplitude((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((WDM<double>*) G__getstructoffset())->getPixelAmplitude((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((WDM<double>*) G__getstructoffset())->getPixelAmplitudeSSEOld((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((WDM<double>*) G__getstructoffset())->getPixelAmplitudeSSEOld((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((WDM<double>*) G__getstructoffset())->getPixelAmplitudeSSE((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WDM<double>*) G__getstructoffset())->getPixelAmplitudeSSE((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((WDM<double>*) G__getstructoffset())->TimeShiftTest((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((WDM<double>*) G__getstructoffset())->TimeShiftTestSSE((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WDM<double>*) G__getstructoffset())->initFourier();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((WDM<double>*) G__getstructoffset())->getFilter((int) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((WDM<double>*) G__getstructoffset())->setTDFilter((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((WDM<double>*) G__getstructoffset())->setTDFilter((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((WDM<double>*) G__getstructoffset())->getTDFilter2((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((WDM<double>*) G__getstructoffset())->getTDFilter1((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         slice* pobj;
         slice xobj = ((WDM<double>*) G__getstructoffset())->getSlice((double) G__double(libp->para[0]));
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WDM<double>*) G__getstructoffset())->SetTFMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 107, (long) ((WDM<double>*) G__getstructoffset())->Last((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((WDM<double>*) G__getstructoffset())->Last());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) WDM<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WDM<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) WDM<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      WDM<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WDM<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WDM<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WDM<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WDM<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_704_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WDM<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef WDM<double> G__TWDMlEdoublegR;
static int G__wave_dict_704_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (WDM<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((WDM<double>*) (soff+(sizeof(WDM<double>)*i)))->~G__TWDMlEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (WDM<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((WDM<double>*) (soff))->~G__TWDMlEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_704_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WDM<double>* dest = (WDM<double>*) G__getstructoffset();
   *dest = *(WDM<double>*) libp->para[0].ref;
   const WDM<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmArray<double> */
static int G__wave_dict_705_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArray<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmArray<double>((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmArray<double>((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArray<double>[n];
       } else {
         p = new((void*) gvp) SymmArray<double>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArray<double>;
       } else {
         p = new((void*) gvp) SymmArray<double>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArray<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmArray<double>(*(SymmArray<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmArray<double>(*(SymmArray<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArray<double>& obj = ((SymmArray<double>*) G__getstructoffset())->operator=(*(SymmArray<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<double>*) G__getstructoffset())->Init((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<double>*) G__getstructoffset())->Resize((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<double>*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<double>*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((SymmArray<double>*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SymmArray<double>*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmArray<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArray<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmArray<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmArray<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArray<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArray<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArray<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_705_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArray<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmArray<double> G__TSymmArraylEdoublegR;
static int G__wave_dict_705_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmArray<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmArray<double>*) (soff+(sizeof(SymmArray<double>)*i)))->~G__TSymmArraylEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmArray<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmArray<double>*) (soff))->~G__TSymmArraylEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmObjArray<SymmArraySSE<float> > */
static int G__wave_dict_706_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArraySSE<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmObjArray<SymmArraySSE<float> >((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmObjArray<SymmArraySSE<float> >((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArraySSE<float> >[n];
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArraySSE<float> >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArraySSE<float> >;
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArraySSE<float> >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArraySSE<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmObjArray<SymmArraySSE<float> >(*(SymmObjArray<SymmArraySSE<float> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmObjArray<SymmArraySSE<float> >(*(SymmObjArray<SymmArraySSE<float> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmObjArray<SymmArraySSE<float> >& obj = ((SymmObjArray<SymmArraySSE<float> >*) G__getstructoffset())->operator=(*(SymmObjArray<SymmArraySSE<float> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<float> >*) G__getstructoffset())->Resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<float> >*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<float> >*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArraySSE<float>& obj = ((SymmObjArray<SymmArraySSE<float> >*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((SymmObjArray<SymmArraySSE<float> >*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmObjArray<SymmArraySSE<float> >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArraySSE<float> >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmObjArray<SymmArraySSE<float> >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmObjArray<SymmArraySSE<float> >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<float> >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArraySSE<float> >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArraySSE<float> >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArraySSE<float> >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_706_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArraySSE<float> >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmObjArray<SymmArraySSE<float> > G__TSymmObjArraylESymmArraySSElEfloatgRsPgR;
static int G__wave_dict_706_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmObjArray<SymmArraySSE<float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmObjArray<SymmArraySSE<float> >*) (soff+(sizeof(SymmObjArray<SymmArraySSE<float> >)*i)))->~G__TSymmObjArraylESymmArraySSElEfloatgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmObjArray<SymmArraySSE<float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmObjArray<SymmArraySSE<float> >*) (soff))->~G__TSymmObjArraylESymmArraySSElEfloatgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* waveSegment */
// automatic default constructor
static int G__wave_dict_769_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   waveSegment *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new waveSegment[n];
     } else {
       p = new((void*) gvp) waveSegment[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new waveSegment;
     } else {
       p = new((void*) gvp) waveSegment;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_waveSegment));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_769_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   waveSegment* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new waveSegment(*(waveSegment*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_waveSegment));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef waveSegment G__TwaveSegment;
static int G__wave_dict_769_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (waveSegment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((waveSegment*) (soff+(sizeof(waveSegment)*i)))->~G__TwaveSegment();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (waveSegment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((waveSegment*) (soff))->~G__TwaveSegment();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_769_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   waveSegment* dest = (waveSegment*) G__getstructoffset();
   *dest = *(waveSegment*) libp->para[0].ref;
   const waveSegment& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<detector*,allocator<detector*> > */
static int G__wave_dict_771_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<detector*,allocator<detector*> >::reference obj = ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->at((vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<detector*,allocator<detector*> >::const_reference obj = ((const vector<detector*,allocator<detector*> >*) G__getstructoffset())->at((vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<detector*,allocator<detector*> >::iterator* pobj;
         vector<detector*,allocator<detector*> >::iterator xobj = ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->begin();
         pobj = new vector<detector*,allocator<detector*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<detector*,allocator<detector*> >::iterator* pobj;
         vector<detector*,allocator<detector*> >::iterator xobj = ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->end();
         pobj = new vector<detector*,allocator<detector*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<detector*,allocator<detector*> >::reverse_iterator* pobj;
         vector<detector*,allocator<detector*> >::reverse_iterator xobj = ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->rbegin();
         pobj = new vector<detector*,allocator<detector*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<detector*,allocator<detector*> >::reverse_iterator* pobj;
         vector<detector*,allocator<detector*> >::reverse_iterator xobj = ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->rend();
         pobj = new vector<detector*,allocator<detector*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<detector*,allocator<detector*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<detector*,allocator<detector*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->resize((vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->resize((vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[0]), (detector*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<detector*,allocator<detector*> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<detector*,allocator<detector*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<detector*,allocator<detector*> >::reference obj = ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->operator[]((vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<detector*,allocator<detector*> >::const_reference obj = ((const vector<detector*,allocator<detector*> >*) G__getstructoffset())->operator[]((vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<detector*,allocator<detector*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<detector*,allocator<detector*> >[n];
     } else {
       p = new((void*) gvp) vector<detector*,allocator<detector*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<detector*,allocator<detector*> >;
     } else {
       p = new((void*) gvp) vector<detector*,allocator<detector*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<detector*,allocator<detector*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<detector*,allocator<detector*> >((vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(detector**) libp->para[1].ref : *(detector**) (void*) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) vector<detector*,allocator<detector*> >((vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(detector**) libp->para[1].ref : *(detector**) (void*) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<detector*,allocator<detector*> >((vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<detector*,allocator<detector*> >((vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<detector*,allocator<detector*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<detector*,allocator<detector*> >(*(vector<detector*,allocator<detector*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<detector*,allocator<detector*> >(*(vector<detector*,allocator<detector*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<detector*,allocator<detector*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<detector*,allocator<detector*> >(*((vector<detector*,allocator<detector*> >::const_iterator*) G__int(libp->para[0])), *((vector<detector*,allocator<detector*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<detector*,allocator<detector*> >(*((vector<detector*,allocator<detector*> >::const_iterator*) G__int(libp->para[0])), *((vector<detector*,allocator<detector*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<detector*,allocator<detector*> >& obj = ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->operator=(*(vector<detector*,allocator<detector*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->reserve((vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         detector*& obj = ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         detector*& obj = ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(detector**) libp->para[0].ref : *(detector**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->swap(*(vector<detector*,allocator<detector*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<detector*,allocator<detector*> >::iterator* pobj;
         vector<detector*,allocator<detector*> >::iterator xobj = ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->insert(*((vector<detector*,allocator<detector*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(detector**) libp->para[1].ref : *(detector**) (void*) (&G__Mlong(libp->para[1])));
         pobj = new vector<detector*,allocator<detector*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->insert(*((vector<detector*,allocator<detector*> >::iterator*) G__int(libp->para[0])), *((vector<detector*,allocator<detector*> >::const_iterator*) G__int(libp->para[1]))
, *((vector<detector*,allocator<detector*> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->insert(*((vector<detector*,allocator<detector*> >::iterator*) G__int(libp->para[0])), (vector<detector*,allocator<detector*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(detector**) libp->para[2].ref : *(detector**) (void*) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->erase(*((vector<detector*,allocator<detector*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->erase(*((vector<detector*,allocator<detector*> >::iterator*) G__int(libp->para[0])), *((vector<detector*,allocator<detector*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_771_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<detector*,allocator<detector*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<detector*,allocator<detector*> > G__TvectorlEdetectormUcOallocatorlEdetectormUgRsPgR;
static int G__wave_dict_771_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<detector*,allocator<detector*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<detector*,allocator<detector*> >*) (soff+(sizeof(vector<detector*,allocator<detector*> >)*i)))->~G__TvectorlEdetectormUcOallocatorlEdetectormUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<detector*,allocator<detector*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<detector*,allocator<detector*> >*) (soff))->~G__TvectorlEdetectormUcOallocatorlEdetectormUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<netcluster,allocator<netcluster> > */
static int G__wave_dict_775_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<netcluster,allocator<netcluster> >::reference obj = ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->at((vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netcluster,allocator<netcluster> >::const_reference obj = ((const vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->at((vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netcluster,allocator<netcluster> >::iterator* pobj;
         vector<netcluster,allocator<netcluster> >::iterator xobj = ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->begin();
         pobj = new vector<netcluster,allocator<netcluster> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netcluster,allocator<netcluster> >::iterator* pobj;
         vector<netcluster,allocator<netcluster> >::iterator xobj = ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->end();
         pobj = new vector<netcluster,allocator<netcluster> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netcluster,allocator<netcluster> >::reverse_iterator* pobj;
         vector<netcluster,allocator<netcluster> >::reverse_iterator xobj = ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->rbegin();
         pobj = new vector<netcluster,allocator<netcluster> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netcluster,allocator<netcluster> >::reverse_iterator* pobj;
         vector<netcluster,allocator<netcluster> >::reverse_iterator xobj = ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->rend();
         pobj = new vector<netcluster,allocator<netcluster> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->resize((vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->resize((vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[0]), *((netcluster*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<netcluster,allocator<netcluster> >::reference obj = ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->operator[]((vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netcluster,allocator<netcluster> >::const_reference obj = ((const vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->operator[]((vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<netcluster,allocator<netcluster> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<netcluster,allocator<netcluster> >[n];
     } else {
       p = new((void*) gvp) vector<netcluster,allocator<netcluster> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<netcluster,allocator<netcluster> >;
     } else {
       p = new((void*) gvp) vector<netcluster,allocator<netcluster> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<netcluster,allocator<netcluster> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<netcluster,allocator<netcluster> >((vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[0]), *(netcluster*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<netcluster,allocator<netcluster> >((vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[0]), *(netcluster*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<netcluster,allocator<netcluster> >((vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<netcluster,allocator<netcluster> >((vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<netcluster,allocator<netcluster> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<netcluster,allocator<netcluster> >(*(vector<netcluster,allocator<netcluster> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<netcluster,allocator<netcluster> >(*(vector<netcluster,allocator<netcluster> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<netcluster,allocator<netcluster> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<netcluster,allocator<netcluster> >(*((vector<netcluster,allocator<netcluster> >::const_iterator*) G__int(libp->para[0])), *((vector<netcluster,allocator<netcluster> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<netcluster,allocator<netcluster> >(*((vector<netcluster,allocator<netcluster> >::const_iterator*) G__int(libp->para[0])), *((vector<netcluster,allocator<netcluster> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<netcluster,allocator<netcluster> >& obj = ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->operator=(*(vector<netcluster,allocator<netcluster> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->reserve((vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const netcluster& obj = ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const netcluster& obj = ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->push_back(*(netcluster*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->swap(*(vector<netcluster,allocator<netcluster> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<netcluster,allocator<netcluster> >::iterator* pobj;
         vector<netcluster,allocator<netcluster> >::iterator xobj = ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->insert(*((vector<netcluster,allocator<netcluster> >::iterator*) G__int(libp->para[0])), *(netcluster*) libp->para[1].ref);
         pobj = new vector<netcluster,allocator<netcluster> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->insert(*((vector<netcluster,allocator<netcluster> >::iterator*) G__int(libp->para[0])), *((vector<netcluster,allocator<netcluster> >::const_iterator*) G__int(libp->para[1]))
, *((vector<netcluster,allocator<netcluster> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->insert(*((vector<netcluster,allocator<netcluster> >::iterator*) G__int(libp->para[0])), (vector<netcluster,allocator<netcluster> >::size_type) G__int(libp->para[1])
, *(netcluster*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->erase(*((vector<netcluster,allocator<netcluster> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->erase(*((vector<netcluster,allocator<netcluster> >::iterator*) G__int(libp->para[0])), *((vector<netcluster,allocator<netcluster> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_775_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<netcluster,allocator<netcluster> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<netcluster,allocator<netcluster> > G__TvectorlEnetclustercOallocatorlEnetclustergRsPgR;
static int G__wave_dict_775_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<netcluster,allocator<netcluster> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<netcluster,allocator<netcluster> >*) (soff+(sizeof(vector<netcluster,allocator<netcluster> >)*i)))->~G__TvectorlEnetclustercOallocatorlEnetclustergRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<netcluster,allocator<netcluster> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<netcluster,allocator<netcluster> >*) (soff))->~G__TvectorlEnetclustercOallocatorlEnetclustergRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<string,allocator<string> > */
static int G__wave_dict_778_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<string,allocator<string> >::reference obj = ((vector<string,allocator<string> >*) G__getstructoffset())->at((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::const_reference obj = ((const vector<string,allocator<string> >*) G__getstructoffset())->at((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::iterator* pobj;
         vector<string,allocator<string> >::iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->begin();
         pobj = new vector<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::iterator* pobj;
         vector<string,allocator<string> >::iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->end();
         pobj = new vector<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::reverse_iterator* pobj;
         vector<string,allocator<string> >::reverse_iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->rbegin();
         pobj = new vector<string,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::reverse_iterator* pobj;
         vector<string,allocator<string> >::reverse_iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->rend();
         pobj = new vector<string,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->resize((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->resize((vector<string,allocator<string> >::size_type) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<string,allocator<string> >::reference obj = ((vector<string,allocator<string> >*) G__getstructoffset())->operator[]((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::const_reference obj = ((const vector<string,allocator<string> >*) G__getstructoffset())->operator[]((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >[n];
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >;
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]), *(string*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]), *(string*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<string,allocator<string> >(*(vector<string,allocator<string> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<string,allocator<string> >(*(vector<string,allocator<string> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<string,allocator<string> >(*((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<string,allocator<string> >(*((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<string,allocator<string> >& obj = ((vector<string,allocator<string> >*) G__getstructoffset())->operator=(*(vector<string,allocator<string> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->reserve((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((vector<string,allocator<string> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((vector<string,allocator<string> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->push_back(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->swap(*(vector<string,allocator<string> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::iterator* pobj;
         vector<string,allocator<string> >::iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->insert(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), *(string*) libp->para[1].ref);
         pobj = new vector<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->insert(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[1]))
, *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->insert(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), (vector<string,allocator<string> >::size_type) G__int(libp->para[1])
, *(string*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->erase(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->erase(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_778_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<string,allocator<string> > G__TvectorlEstringcOallocatorlEstringgRsPgR;
static int G__wave_dict_778_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<string,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<string,allocator<string> >*) (soff+(sizeof(vector<string,allocator<string> >)*i)))->~G__TvectorlEstringcOallocatorlEstringgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<string,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<string,allocator<string> >*) (soff))->~G__TvectorlEstringcOallocatorlEstringgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<waveSegment,allocator<waveSegment> > */
static int G__wave_dict_782_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<waveSegment,allocator<waveSegment> >::reference obj = ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->at((vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<waveSegment,allocator<waveSegment> >::const_reference obj = ((const vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->at((vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<waveSegment,allocator<waveSegment> >::iterator* pobj;
         vector<waveSegment,allocator<waveSegment> >::iterator xobj = ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->begin();
         pobj = new vector<waveSegment,allocator<waveSegment> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<waveSegment,allocator<waveSegment> >::iterator* pobj;
         vector<waveSegment,allocator<waveSegment> >::iterator xobj = ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->end();
         pobj = new vector<waveSegment,allocator<waveSegment> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<waveSegment,allocator<waveSegment> >::reverse_iterator* pobj;
         vector<waveSegment,allocator<waveSegment> >::reverse_iterator xobj = ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->rbegin();
         pobj = new vector<waveSegment,allocator<waveSegment> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<waveSegment,allocator<waveSegment> >::reverse_iterator* pobj;
         vector<waveSegment,allocator<waveSegment> >::reverse_iterator xobj = ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->rend();
         pobj = new vector<waveSegment,allocator<waveSegment> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->resize((vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->resize((vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[0]), *((waveSegment*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<waveSegment,allocator<waveSegment> >::reference obj = ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->operator[]((vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<waveSegment,allocator<waveSegment> >::const_reference obj = ((const vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->operator[]((vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<waveSegment,allocator<waveSegment> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<waveSegment,allocator<waveSegment> >[n];
     } else {
       p = new((void*) gvp) vector<waveSegment,allocator<waveSegment> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<waveSegment,allocator<waveSegment> >;
     } else {
       p = new((void*) gvp) vector<waveSegment,allocator<waveSegment> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<waveSegment,allocator<waveSegment> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<waveSegment,allocator<waveSegment> >((vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[0]), *(waveSegment*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<waveSegment,allocator<waveSegment> >((vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[0]), *(waveSegment*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<waveSegment,allocator<waveSegment> >((vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<waveSegment,allocator<waveSegment> >((vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<waveSegment,allocator<waveSegment> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<waveSegment,allocator<waveSegment> >(*(vector<waveSegment,allocator<waveSegment> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<waveSegment,allocator<waveSegment> >(*(vector<waveSegment,allocator<waveSegment> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<waveSegment,allocator<waveSegment> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<waveSegment,allocator<waveSegment> >(*((vector<waveSegment,allocator<waveSegment> >::const_iterator*) G__int(libp->para[0])), *((vector<waveSegment,allocator<waveSegment> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<waveSegment,allocator<waveSegment> >(*((vector<waveSegment,allocator<waveSegment> >::const_iterator*) G__int(libp->para[0])), *((vector<waveSegment,allocator<waveSegment> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<waveSegment,allocator<waveSegment> >& obj = ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->operator=(*(vector<waveSegment,allocator<waveSegment> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->reserve((vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const waveSegment& obj = ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const waveSegment& obj = ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->push_back(*(waveSegment*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->swap(*(vector<waveSegment,allocator<waveSegment> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<waveSegment,allocator<waveSegment> >::iterator* pobj;
         vector<waveSegment,allocator<waveSegment> >::iterator xobj = ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->insert(*((vector<waveSegment,allocator<waveSegment> >::iterator*) G__int(libp->para[0])), *(waveSegment*) libp->para[1].ref);
         pobj = new vector<waveSegment,allocator<waveSegment> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->insert(*((vector<waveSegment,allocator<waveSegment> >::iterator*) G__int(libp->para[0])), *((vector<waveSegment,allocator<waveSegment> >::const_iterator*) G__int(libp->para[1]))
, *((vector<waveSegment,allocator<waveSegment> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->insert(*((vector<waveSegment,allocator<waveSegment> >::iterator*) G__int(libp->para[0])), (vector<waveSegment,allocator<waveSegment> >::size_type) G__int(libp->para[1])
, *(waveSegment*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->erase(*((vector<waveSegment,allocator<waveSegment> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->erase(*((vector<waveSegment,allocator<waveSegment> >::iterator*) G__int(libp->para[0])), *((vector<waveSegment,allocator<waveSegment> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_782_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<waveSegment,allocator<waveSegment> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<waveSegment,allocator<waveSegment> > G__TvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR;
static int G__wave_dict_782_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<waveSegment,allocator<waveSegment> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<waveSegment,allocator<waveSegment> >*) (soff+(sizeof(vector<waveSegment,allocator<waveSegment> >)*i)))->~G__TvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<waveSegment,allocator<waveSegment> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<waveSegment,allocator<waveSegment> >*) (soff))->~G__TvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<WDM<double>*,allocator<WDM<double>*> > */
static int G__wave_dict_786_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WDM<double>*,allocator<WDM<double>*> >::reference obj = ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->at((vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WDM<double>*,allocator<WDM<double>*> >::const_reference obj = ((const vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->at((vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WDM<double>*,allocator<WDM<double>*> >::iterator* pobj;
         vector<WDM<double>*,allocator<WDM<double>*> >::iterator xobj = ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->begin();
         pobj = new vector<WDM<double>*,allocator<WDM<double>*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WDM<double>*,allocator<WDM<double>*> >::iterator* pobj;
         vector<WDM<double>*,allocator<WDM<double>*> >::iterator xobj = ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->end();
         pobj = new vector<WDM<double>*,allocator<WDM<double>*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WDM<double>*,allocator<WDM<double>*> >::reverse_iterator* pobj;
         vector<WDM<double>*,allocator<WDM<double>*> >::reverse_iterator xobj = ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->rbegin();
         pobj = new vector<WDM<double>*,allocator<WDM<double>*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WDM<double>*,allocator<WDM<double>*> >::reverse_iterator* pobj;
         vector<WDM<double>*,allocator<WDM<double>*> >::reverse_iterator xobj = ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->rend();
         pobj = new vector<WDM<double>*,allocator<WDM<double>*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->resize((vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->resize((vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[0]), (WDM<double>*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WDM<double>*,allocator<WDM<double>*> >::reference obj = ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->operator[]((vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WDM<double>*,allocator<WDM<double>*> >::const_reference obj = ((const vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->operator[]((vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<WDM<double>*,allocator<WDM<double>*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<WDM<double>*,allocator<WDM<double>*> >[n];
     } else {
       p = new((void*) gvp) vector<WDM<double>*,allocator<WDM<double>*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<WDM<double>*,allocator<WDM<double>*> >;
     } else {
       p = new((void*) gvp) vector<WDM<double>*,allocator<WDM<double>*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<WDM<double>*,allocator<WDM<double>*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<WDM<double>*,allocator<WDM<double>*> >((vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(WDM<double>**) libp->para[1].ref : *(WDM<double>**) (void*) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) vector<WDM<double>*,allocator<WDM<double>*> >((vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(WDM<double>**) libp->para[1].ref : *(WDM<double>**) (void*) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<WDM<double>*,allocator<WDM<double>*> >((vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<WDM<double>*,allocator<WDM<double>*> >((vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<WDM<double>*,allocator<WDM<double>*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<WDM<double>*,allocator<WDM<double>*> >(*(vector<WDM<double>*,allocator<WDM<double>*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<WDM<double>*,allocator<WDM<double>*> >(*(vector<WDM<double>*,allocator<WDM<double>*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<WDM<double>*,allocator<WDM<double>*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<WDM<double>*,allocator<WDM<double>*> >(*((vector<WDM<double>*,allocator<WDM<double>*> >::const_iterator*) G__int(libp->para[0])), *((vector<WDM<double>*,allocator<WDM<double>*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<WDM<double>*,allocator<WDM<double>*> >(*((vector<WDM<double>*,allocator<WDM<double>*> >::const_iterator*) G__int(libp->para[0])), *((vector<WDM<double>*,allocator<WDM<double>*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<WDM<double>*,allocator<WDM<double>*> >& obj = ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->operator=(*(vector<WDM<double>*,allocator<WDM<double>*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->reserve((vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         WDM<double>*& obj = ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         WDM<double>*& obj = ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(WDM<double>**) libp->para[0].ref : *(WDM<double>**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->swap(*(vector<WDM<double>*,allocator<WDM<double>*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WDM<double>*,allocator<WDM<double>*> >::iterator* pobj;
         vector<WDM<double>*,allocator<WDM<double>*> >::iterator xobj = ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->insert(*((vector<WDM<double>*,allocator<WDM<double>*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(WDM<double>**) libp->para[1].ref : *(WDM<double>**) (void*) (&G__Mlong(libp->para[1])));
         pobj = new vector<WDM<double>*,allocator<WDM<double>*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->insert(*((vector<WDM<double>*,allocator<WDM<double>*> >::iterator*) G__int(libp->para[0])), *((vector<WDM<double>*,allocator<WDM<double>*> >::const_iterator*) G__int(libp->para[1]))
, *((vector<WDM<double>*,allocator<WDM<double>*> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->insert(*((vector<WDM<double>*,allocator<WDM<double>*> >::iterator*) G__int(libp->para[0])), (vector<WDM<double>*,allocator<WDM<double>*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(WDM<double>**) libp->para[2].ref : *(WDM<double>**) (void*) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->erase(*((vector<WDM<double>*,allocator<WDM<double>*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->erase(*((vector<WDM<double>*,allocator<WDM<double>*> >::iterator*) G__int(libp->para[0])), *((vector<WDM<double>*,allocator<WDM<double>*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_786_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WDM<double>*,allocator<WDM<double>*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<WDM<double>*,allocator<WDM<double>*> > G__TvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR;
static int G__wave_dict_786_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<WDM<double>*,allocator<WDM<double>*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<WDM<double>*,allocator<WDM<double>*> >*) (soff+(sizeof(vector<WDM<double>*,allocator<WDM<double>*> >)*i)))->~G__TvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<WDM<double>*,allocator<WDM<double>*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<WDM<double>*,allocator<WDM<double>*> >*) (soff))->~G__TvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* injection */
static int G__wave_dict_793_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   injection* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new injection[n];
     } else {
       p = new((void*) gvp) injection[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new injection;
     } else {
       p = new((void*) gvp) injection;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_injection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   injection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new injection((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) injection((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_injection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   injection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new injection(*(injection*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) injection(*(injection*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_injection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   injection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new injection((TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) injection((TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_injection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   injection* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new injection(*((TString*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) injection(*((TString*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new injection(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) injection(*((TString*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_injection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const injection& obj = ((injection*) G__getstructoffset())->operator=(*(injection*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((injection*) G__getstructoffset())->GetEntry((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((injection*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((injection*) G__getstructoffset())->allocate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((injection*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((injection*) G__getstructoffset())->Init(*((TString*) G__int(libp->para[0])), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((injection*) G__getstructoffset())->Init((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((injection*) G__getstructoffset())->Notify());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((injection*) G__getstructoffset())->setTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((injection*) G__getstructoffset())->fill_in((network*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((injection*) G__getstructoffset())->fill_in((network*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((injection*) G__getstructoffset())->output((TTree*) G__int(libp->para[0]), (network*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((injection*) G__getstructoffset())->output((TTree*) G__int(libp->para[0]), (network*) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((injection*) G__getstructoffset())->Show((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((injection*) G__getstructoffset())->Show();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) injection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) injection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) injection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      injection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const injection*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((injection*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((injection*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((injection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) injection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) injection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) injection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_793_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) injection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef injection G__Tinjection;
static int G__wave_dict_793_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (injection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((injection*) (soff+(sizeof(injection)*i)))->~G__Tinjection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (injection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((injection*) (soff))->~G__Tinjection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* watplot */
static int G__wave_dict_886_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   watplot* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new watplot(
(char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) watplot(
(char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new watplot(
(char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) watplot(
(char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new watplot(
(char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) watplot(
(char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new watplot((char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) watplot((char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new watplot((char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) watplot((char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new watplot[n];
       } else {
         p = new((void*) gvp) watplot[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new watplot;
       } else {
         p = new((void*) gvp) watplot;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watplot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((watplot*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((watplot*) G__getstructoffset())->null();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]), (float) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<double>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]), (float) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<double>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<double>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<double>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->plot((wavearray<double>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->plot((wavearray<double>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->plot((wavearray<double>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->plot((wavearray<double>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->plot((wavearray<double>*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->plot((wavearray<double>*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<float>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]), (float) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<float>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<float>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<float>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->plot((wavearray<float>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->plot((wavearray<float>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->plot((wavearray<float>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->plot((wavearray<float>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->plot((wavearray<float>*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->plot((wavearray<float>*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<float>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]), (float) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<float>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<float>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<float>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<float>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<float>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<float>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<float>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<float>*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<float>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<int>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]), (float) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<int>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<int>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((watplot*) G__getstructoffset())->plot(
(wavearray<int>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->plot((wavearray<int>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->plot((wavearray<int>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->plot((wavearray<int>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->plot((wavearray<int>*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->plot((wavearray<int>*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->plot((wavearray<int>*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<int>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]), (float) G__double(libp->para[9]));
      G__setnull(result7);
      break;
   case 9:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<int>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7])
, (bool) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<int>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]), (float) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((watplot*) G__getstructoffset())->plot(
*(wavearray<int>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<int>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<int>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<int>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<int>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<int>*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->plot(*(wavearray<int>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((watplot*) G__getstructoffset())->plot(
*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->plot(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->plot(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->plot(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->plot(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->plot(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->plot(*(WSeries<double>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((watplot*) G__getstructoffset())->plot(
(WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->plot((WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->plot((WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->plot((WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->plot((WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->plot((WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->plot((WSeries<double>*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((watplot*) G__getstructoffset())->plsmooth(
*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->plsmooth(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->plsmooth(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->plsmooth(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->plsmooth(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->plsmooth(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->plsmooth(*(WSeries<double>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((watplot*) G__getstructoffset())->plsmooth(
(WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->plsmooth((WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->plsmooth((WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (char*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->plsmooth((WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->plsmooth((WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->plsmooth((WSeries<double>*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->plsmooth((WSeries<double>*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((watplot*) G__getstructoffset())->plot(*(skymap*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->plot(*(skymap*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->plot(*(skymap*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((watplot*) G__getstructoffset())->plot(
(netcluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (char) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (char*) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->plot((netcluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (char) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (char*) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->plot((netcluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (char) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->plot((netcluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (char) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->plot((netcluster*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((watplot*) G__getstructoffset())->plot((clusterdata*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((watplot*) G__getstructoffset())->SetPlotStyle((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->SetPlotStyle((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((watplot*) G__getstructoffset())->getmax(*(WSeries<double>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((watplot*) G__getstructoffset())->getmax((WSeries<double>*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((watplot*) G__getstructoffset())->getmax((WSeries<double>*) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((watplot*) G__getstructoffset())->getmax((WSeries<double>*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((watplot*) G__getstructoffset())->print(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((watplot*) G__getstructoffset())->blackmanharris(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      ((watplot*) G__getstructoffset())->goptions(
(char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (bool) G__int(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (bool) G__int(libp->para[7])
, (float) G__double(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      ((watplot*) G__getstructoffset())->goptions(
(char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (bool) G__int(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]), (bool) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((watplot*) G__getstructoffset())->goptions(
(char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (bool) G__int(libp->para[4]), (float) G__double(libp->para[5])
, (float) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((watplot*) G__getstructoffset())->goptions((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (bool) G__int(libp->para[4]), (float) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((watplot*) G__getstructoffset())->goptions((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (bool) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((watplot*) G__getstructoffset())->goptions((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((watplot*) G__getstructoffset())->goptions((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->goptions((char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->goptions((char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((watplot*) G__getstructoffset())->goptions();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((watplot*) G__getstructoffset())->gtitle(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((watplot*) G__getstructoffset())->gtitle(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((watplot*) G__getstructoffset())->gtitle(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((watplot*) G__getstructoffset())->gtitle();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((watplot*) G__getstructoffset())->procOpt((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((watplot*) G__getstructoffset())->procOpt((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((watplot*) G__getstructoffset())->getGraph((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) watplot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) watplot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) watplot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      watplot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const watplot*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((watplot*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((watplot*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((watplot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) watplot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) watplot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) watplot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_886_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) watplot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_886_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   watplot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new watplot(*(watplot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watplot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef watplot G__Twatplot;
static int G__wave_dict_886_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (watplot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((watplot*) (soff+(sizeof(watplot)*i)))->~G__Twatplot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (watplot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((watplot*) (soff))->~G__Twatplot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_886_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   watplot* dest = (watplot*) G__getstructoffset();
   *dest = *(watplot*) libp->para[0].ref;
   const watplot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TGraph*,allocator<TGraph*> > */
static int G__wave_dict_888_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGraph*,allocator<TGraph*> >::reference obj = ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->at((vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGraph*,allocator<TGraph*> >::const_reference obj = ((const vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->at((vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGraph*,allocator<TGraph*> >::iterator* pobj;
         vector<TGraph*,allocator<TGraph*> >::iterator xobj = ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->begin();
         pobj = new vector<TGraph*,allocator<TGraph*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGraph*,allocator<TGraph*> >::iterator* pobj;
         vector<TGraph*,allocator<TGraph*> >::iterator xobj = ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->end();
         pobj = new vector<TGraph*,allocator<TGraph*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGraph*,allocator<TGraph*> >::reverse_iterator* pobj;
         vector<TGraph*,allocator<TGraph*> >::reverse_iterator xobj = ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->rbegin();
         pobj = new vector<TGraph*,allocator<TGraph*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGraph*,allocator<TGraph*> >::reverse_iterator* pobj;
         vector<TGraph*,allocator<TGraph*> >::reverse_iterator xobj = ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->rend();
         pobj = new vector<TGraph*,allocator<TGraph*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->resize((vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->resize((vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[0]), (TGraph*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGraph*,allocator<TGraph*> >::reference obj = ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->operator[]((vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGraph*,allocator<TGraph*> >::const_reference obj = ((const vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->operator[]((vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TGraph*,allocator<TGraph*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TGraph*,allocator<TGraph*> >[n];
     } else {
       p = new((void*) gvp) vector<TGraph*,allocator<TGraph*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TGraph*,allocator<TGraph*> >;
     } else {
       p = new((void*) gvp) vector<TGraph*,allocator<TGraph*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TGraph*,allocator<TGraph*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TGraph*,allocator<TGraph*> >((vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TGraph**) libp->para[1].ref : *(TGraph**) (void*) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) vector<TGraph*,allocator<TGraph*> >((vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(TGraph**) libp->para[1].ref : *(TGraph**) (void*) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TGraph*,allocator<TGraph*> >((vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<TGraph*,allocator<TGraph*> >((vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TGraph*,allocator<TGraph*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TGraph*,allocator<TGraph*> >(*(vector<TGraph*,allocator<TGraph*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<TGraph*,allocator<TGraph*> >(*(vector<TGraph*,allocator<TGraph*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TGraph*,allocator<TGraph*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TGraph*,allocator<TGraph*> >(*((vector<TGraph*,allocator<TGraph*> >::const_iterator*) G__int(libp->para[0])), *((vector<TGraph*,allocator<TGraph*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<TGraph*,allocator<TGraph*> >(*((vector<TGraph*,allocator<TGraph*> >::const_iterator*) G__int(libp->para[0])), *((vector<TGraph*,allocator<TGraph*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TGraph*,allocator<TGraph*> >& obj = ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->operator=(*(vector<TGraph*,allocator<TGraph*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->reserve((vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TGraph*& obj = ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TGraph*& obj = ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(TGraph**) libp->para[0].ref : *(TGraph**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->swap(*(vector<TGraph*,allocator<TGraph*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TGraph*,allocator<TGraph*> >::iterator* pobj;
         vector<TGraph*,allocator<TGraph*> >::iterator xobj = ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->insert(*((vector<TGraph*,allocator<TGraph*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(TGraph**) libp->para[1].ref : *(TGraph**) (void*) (&G__Mlong(libp->para[1])));
         pobj = new vector<TGraph*,allocator<TGraph*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->insert(*((vector<TGraph*,allocator<TGraph*> >::iterator*) G__int(libp->para[0])), *((vector<TGraph*,allocator<TGraph*> >::const_iterator*) G__int(libp->para[1]))
, *((vector<TGraph*,allocator<TGraph*> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->insert(*((vector<TGraph*,allocator<TGraph*> >::iterator*) G__int(libp->para[0])), (vector<TGraph*,allocator<TGraph*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(TGraph**) libp->para[2].ref : *(TGraph**) (void*) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->erase(*((vector<TGraph*,allocator<TGraph*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->erase(*((vector<TGraph*,allocator<TGraph*> >::iterator*) G__int(libp->para[0])), *((vector<TGraph*,allocator<TGraph*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_888_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TGraph*,allocator<TGraph*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TGraph*,allocator<TGraph*> > G__TvectorlETGraphmUcOallocatorlETGraphmUgRsPgR;
static int G__wave_dict_888_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TGraph*,allocator<TGraph*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TGraph*,allocator<TGraph*> >*) (soff+(sizeof(vector<TGraph*,allocator<TGraph*> >)*i)))->~G__TvectorlETGraphmUcOallocatorlETGraphmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TGraph*,allocator<TGraph*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TGraph*,allocator<TGraph*> >*) (soff))->~G__TvectorlETGraphmUcOallocatorlETGraphmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wavepixel */
static int G__wave_dict_895_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavepixel* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavepixel[n];
     } else {
       p = new((void*) gvp) wavepixel[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavepixel;
     } else {
       p = new((void*) gvp) wavepixel;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavepixel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_895_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const wavepixel*) G__getstructoffset())->operator==(*(wavepixel*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_895_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const wavepixel*) G__getstructoffset())->operator<(*(wavepixel*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_895_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   wavepixel* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new wavepixel(*(wavepixel*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavepixel));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wavepixel G__Twavepixel;
static int G__wave_dict_895_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wavepixel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wavepixel*) (soff+(sizeof(wavepixel)*i)))->~G__Twavepixel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wavepixel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wavepixel*) (soff))->~G__Twavepixel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_895_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavepixel* dest = (wavepixel*) G__getstructoffset();
   *dest = *(wavepixel*) libp->para[0].ref;
   const wavepixel& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wavecluster */
static int G__wave_dict_896_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavecluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavecluster[n];
     } else {
       p = new((void*) gvp) wavecluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavecluster;
     } else {
       p = new((void*) gvp) wavecluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavecluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavecluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavecluster(*(WSeries<double>*) libp->para[0].ref, (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) wavecluster(*(WSeries<double>*) libp->para[0].ref, (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavecluster(*(WSeries<double>*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) wavecluster(*(WSeries<double>*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavecluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavecluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavecluster(*(wavecluster*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wavecluster(*(wavecluster*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavecluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecluster& obj = ((wavecluster*) G__getstructoffset())->operator=(*(wavecluster*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->init(*(WSeries<double>*) libp->para[0].ref, (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->init(*(WSeries<double>*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((wavecluster*) G__getstructoffset())->setMask(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((wavecluster*) G__getstructoffset())->setMask(*(WSeries<double>*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((wavecluster*) G__getstructoffset())->setMask(*(WSeries<double>*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecluster*) G__getstructoffset())->setbpp((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavecluster*) G__getstructoffset())->getbpp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecluster*) G__getstructoffset())->setlow((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavecluster*) G__getstructoffset())->getlow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecluster*) G__getstructoffset())->sethigh((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavecluster*) G__getstructoffset())->gethigh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecluster*) G__getstructoffset())->set(*(WSeries<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecluster*) G__getstructoffset())->set(*(wavearray<float>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavecluster*) G__getstructoffset())->setrms(*(WSeries<double>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavecluster*) G__getstructoffset())->setrms(*(WSeries<double>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavecluster*) G__getstructoffset())->setrms(*(WSeries<double>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavecluster*) G__getstructoffset())->setvar(*(wavearray<float>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavecluster*) G__getstructoffset())->setvar(*(wavearray<float>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavecluster*) G__getstructoffset())->setvar(*(wavearray<float>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wavecluster*) G__getstructoffset())->asize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavecluster*) G__getstructoffset())->ignore((size_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavecluster*) G__getstructoffset())->ignore();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->cleanhalo((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->cleanhalo());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->apush(*(WSeries<double>*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->apush(*(WSeries<double>*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->append(*(wavecluster*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->merge((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->merge());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->coincidence(*(wavecluster*) libp->para[0].ref, (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->coincidence(*(wavecluster*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->cluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavecluster*) G__getstructoffset())->cluster((wavepixel*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         wavearray<float>* pobj;
         wavearray<float> xobj = ((wavecluster*) G__getstructoffset())->get((char*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
         pobj = new wavearray<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         wavearray<float>* pobj;
         wavearray<float> xobj = ((wavecluster*) G__getstructoffset())->get((char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wavearray<float>* pobj;
         wavearray<float> xobj = ((wavecluster*) G__getstructoffset())->get((char*) G__int(libp->para[0]));
         pobj = new wavearray<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_896_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavecluster*) G__getstructoffset())->getNoiseRMS((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wavecluster G__Twavecluster;
static int G__wave_dict_896_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wavecluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wavecluster*) (soff+(sizeof(wavecluster)*i)))->~G__Twavecluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wavecluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wavecluster*) (soff))->~G__Twavecluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wavecor */
static int G__wave_dict_904_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavecor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavecor[n];
     } else {
       p = new((void*) gvp) wavecor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavecor;
     } else {
       p = new((void*) gvp) wavecor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavecor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavecor* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavecor(*(wavecor*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wavecor(*(wavecor*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavecor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavecor& obj = ((wavecor*) G__getstructoffset())->operator=(*(wavecor*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((wavecor*) G__getstructoffset())->kendall(*(wavearray<double>*) libp->para[0].ref, *(wavearray<double>*) libp->para[1].ref
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (size_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((wavecor*) G__getstructoffset())->kendall(*(wavearray<double>*) libp->para[0].ref, *(wavearray<double>*) libp->para[1].ref
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((wavecor*) G__getstructoffset())->init(*(wavearray<double>*) libp->para[0].ref, *(wavearray<double>*) libp->para[1].ref
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (size_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((wavecor*) G__getstructoffset())->init(*(wavearray<double>*) libp->para[0].ref, *(wavearray<double>*) libp->para[1].ref
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavecor*) G__getstructoffset())->select((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavecor*) G__getstructoffset())->coincidence((double) G__double(libp->para[0]), (wavecor*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) wavecor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavecor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) wavecor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      wavecor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const wavecor*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecor*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecor*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavecor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavecor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavecor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavecor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_904_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavecor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wavecor G__Twavecor;
static int G__wave_dict_904_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wavecor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wavecor*) (soff+(sizeof(wavecor)*i)))->~G__Twavecor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wavecor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wavecor*) (soff))->~G__Twavecor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* WaveRDC */
static int G__wave_dict_905_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WaveRDC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WaveRDC[n];
     } else {
       p = new((void*) gvp) WaveRDC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WaveRDC;
     } else {
       p = new((void*) gvp) WaveRDC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WaveRDC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WaveRDC& obj = ((WaveRDC*) G__getstructoffset())->operator=(*(WaveRDC*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WaveRDC& obj = ((WaveRDC*) G__getstructoffset())->operator+=(*(WaveRDC*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WaveRDC& obj = ((WaveRDC*) G__getstructoffset())->operator-=(*(WaveRDC*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WaveRDC& obj = ((WaveRDC*) G__getstructoffset())->operator*=(*(WaveRDC*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const WaveRDC& obj = ((WaveRDC*) G__getstructoffset())->operator=((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->DumpRDC((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->DumpRDC((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->Compress(*(waveShort*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->Compress(*(waveDouble*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->unCompress(*(waveFloat*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->unCompress(*(waveFloat*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->unCompress(*(waveDouble*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->unCompress(*(waveDouble*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->unCompress(*(wavearray<int>*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->unCompress(*(wavearray<int>*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((WaveRDC*) G__getstructoffset())->Dir((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((WaveRDC*) G__getstructoffset())->Dir();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((WaveRDC*) G__getstructoffset())->getScale(*(waveDouble*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveRDC*) G__getstructoffset())->getShort(*(waveDouble*) libp->para[0].ref, *(waveShort*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveRDC*) G__getstructoffset())->getSign(*(waveDouble*) libp->para[0].ref, *(waveShort*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->Push((short*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (unsigned int*) G__int(libp->para[2]), *(int*) G__Intref(&libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveRDC*) G__getstructoffset())->Push(*(unsigned int*) G__UIntref(&libp->para[0]), (unsigned int*) G__int(libp->para[1])
, *(int*) G__Intref(&libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->Pop((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(int*) G__Intref(&libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveRDC*) G__getstructoffset())->Pop(*(unsigned int*) G__UIntref(&libp->para[0]), *(int*) G__Intref(&libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->getOPTZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->wabs((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((WaveRDC*) G__getstructoffset())->wabs((short) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WaveRDC*) G__getstructoffset())->wint((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((WaveRDC*) G__getstructoffset())->getLSW((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) WaveRDC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WaveRDC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) WaveRDC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      WaveRDC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WaveRDC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WaveRDC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WaveRDC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WaveRDC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_905_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WaveRDC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_905_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   WaveRDC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new WaveRDC(*(WaveRDC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WaveRDC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef WaveRDC G__TWaveRDC;
static int G__wave_dict_905_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (WaveRDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((WaveRDC*) (soff+(sizeof(WaveRDC)*i)))->~G__TWaveRDC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (WaveRDC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((WaveRDC*) (soff))->~G__TWaveRDC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wavearray<unsigned int> */
static int G__wave_dict_906_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<unsigned int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<unsigned int>((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) wavearray<unsigned int>((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<unsigned int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<unsigned int>[n];
     } else {
       p = new((void*) gvp) wavearray<unsigned int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<unsigned int>;
     } else {
       p = new((void*) gvp) wavearray<unsigned int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<unsigned int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<unsigned int>(*(wavearray<unsigned int>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wavearray<unsigned int>(*(wavearray<unsigned int>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<unsigned int>& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator=(*(wavearray<unsigned int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<unsigned int>& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator[](*(slice*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const unsigned int& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'h', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<unsigned int>*) G__getstructoffset())->limit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<unsigned int>*) G__getstructoffset())->limit(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<unsigned int>*) G__getstructoffset())->limit(*(wavearray<unsigned int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<unsigned int>& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator+=(*(wavearray<unsigned int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<unsigned int>& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator-=(*(wavearray<unsigned int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<unsigned int>& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator*=(*(wavearray<unsigned int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<unsigned int>& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator<<(*(wavearray<unsigned int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<unsigned int>& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator=((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<unsigned int>& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator+=((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<unsigned int>& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator-=((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<unsigned int>& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator*=((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = ((wavearray<unsigned int>*) G__getstructoffset())->operator>>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (void*) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->DumpObject((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->ReadShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->FFT((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<unsigned int>*) G__getstructoffset())->FFT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->FFTW((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<unsigned int>*) G__getstructoffset())->FFTW();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->resetFFTW();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<unsigned int>*) G__getstructoffset())->Resample(*(wavearray<unsigned int>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->Resample(*(wavearray<unsigned int>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<unsigned int>*) G__getstructoffset())->resample(*(wavearray<unsigned int>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->resample(*(wavearray<unsigned int>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->resample((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->resample((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->start((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<unsigned int>*) G__getstructoffset())->start());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->stop((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<unsigned int>*) G__getstructoffset())->stop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->rate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<unsigned int>*) G__getstructoffset())->rate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->edge((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<unsigned int>*) G__getstructoffset())->edge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<unsigned int>*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->setSlice(*(slice*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const slice* pobj;
         const slice xobj = ((const wavearray<unsigned int>*) G__getstructoffset())->getSlice();
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const wavearray<unsigned int>*) G__getstructoffset())->median((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const wavearray<unsigned int>*) G__getstructoffset())->median((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const wavearray<unsigned int>*) G__getstructoffset())->median());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<unsigned int>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<unsigned int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<unsigned int>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<unsigned int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<unsigned int>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<unsigned int>*) G__getstructoffset())->mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<unsigned int>*) G__getstructoffset())->mean((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<unsigned int>*) G__getstructoffset())->mean(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<unsigned int>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<unsigned int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<unsigned int>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<unsigned int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<unsigned int>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<unsigned int>*) G__getstructoffset())->rms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<unsigned int>*) G__getstructoffset())->rms(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<unsigned int>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<unsigned int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<unsigned int>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<unsigned int>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<unsigned int>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const wavearray<unsigned int>*) G__getstructoffset())->max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->max(*(wavearray<unsigned int>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const wavearray<unsigned int>*) G__getstructoffset())->min());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->SQRT();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->hann();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const wavearray<unsigned int>*) G__getstructoffset())->waveSort((unsigned int**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const wavearray<unsigned int>*) G__getstructoffset())->waveSort((unsigned int**) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const wavearray<unsigned int>*) G__getstructoffset())->waveSort((unsigned int**) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<unsigned int>*) G__getstructoffset())->waveSort();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const wavearray<unsigned int>*) G__getstructoffset())->waveSplit((unsigned int**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((wavearray<unsigned int>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<unsigned int>*) G__getstructoffset())->getSampleRank((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<unsigned int>*) G__getstructoffset())->getSampleRankE((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((const wavearray<unsigned int>*) G__getstructoffset())->rank((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((const wavearray<unsigned int>*) G__getstructoffset())->rank());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<unsigned int>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<unsigned int>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<unsigned int>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->lprFilter(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<unsigned int>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<unsigned int>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<unsigned int>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<unsigned int>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<unsigned int>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<unsigned int>*) G__getstructoffset())->white((double) G__double(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->exponential((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((wavearray<unsigned int>*) G__getstructoffset())->get((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((wavearray<unsigned int>*) G__getstructoffset())->get((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((wavearray<unsigned int>*) G__getstructoffset())->uniform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 108, (long) ((wavearray<unsigned int>*) G__getstructoffset())->rand48((long) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((wavearray<unsigned int>*) G__getstructoffset())->rand48());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<unsigned int>*) G__getstructoffset())->getStatistics(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<unsigned int>*) G__getstructoffset())->cpf(*(wavearray<unsigned int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<unsigned int>*) G__getstructoffset())->cpf(*(wavearray<unsigned int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->cpf(*(wavearray<unsigned int>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->cpf(*(wavearray<unsigned int>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<unsigned int>*) G__getstructoffset())->add(*(wavearray<unsigned int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<unsigned int>*) G__getstructoffset())->add(*(wavearray<unsigned int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->add(*(wavearray<unsigned int>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->add(*(wavearray<unsigned int>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<unsigned int>*) G__getstructoffset())->sub(*(wavearray<unsigned int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<unsigned int>*) G__getstructoffset())->sub(*(wavearray<unsigned int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<unsigned int>*) G__getstructoffset())->sub(*(wavearray<unsigned int>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<unsigned int>*) G__getstructoffset())->sub(*(wavearray<unsigned int>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<unsigned int>*) G__getstructoffset())->append(*(wavearray<unsigned int>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<unsigned int>*) G__getstructoffset())->append((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<unsigned int>*) G__getstructoffset())->wavecount((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<unsigned int>*) G__getstructoffset())->Stack(*(wavearray<unsigned int>*) libp->para[0].ref, (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<unsigned int>*) G__getstructoffset())->Stack(*(wavearray<unsigned int>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<unsigned int>*) G__getstructoffset())->Stack(*(wavearray<unsigned int>*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<unsigned int>::compare((void*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) wavearray<unsigned int>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<unsigned int>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) wavearray<unsigned int>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      wavearray<unsigned int>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<unsigned int>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<unsigned int>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<unsigned int>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<unsigned int>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_906_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<unsigned int>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wavearray<unsigned int> G__TwavearraylEunsignedsPintgR;
static int G__wave_dict_906_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wavearray<unsigned int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wavearray<unsigned int>*) (soff+(sizeof(wavearray<unsigned int>)*i)))->~G__TwavearraylEunsignedsPintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wavearray<unsigned int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wavearray<unsigned int>*) (soff))->~G__TwavearraylEunsignedsPintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* linefilter */
static int G__wave_dict_912_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   linefilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new linefilter[n];
     } else {
       p = new((void*) gvp) linefilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new linefilter;
     } else {
       p = new((void*) gvp) linefilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_linefilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   linefilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new linefilter(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) linefilter(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new linefilter(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) linefilter(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new linefilter((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) linefilter((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new linefilter((double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) linefilter((double) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_linefilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   linefilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new linefilter(*(linefilter*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) linefilter(*(linefilter*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_linefilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const linefilter*) G__getstructoffset())->clone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((linefilter*) G__getstructoffset())->apply(*(WaveData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((linefilter*) G__getstructoffset())->setFilter(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((linefilter*) G__getstructoffset())->setFilter((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((linefilter*) G__getstructoffset())->setFilter((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((linefilter*) G__getstructoffset())->setFilter((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((linefilter*) G__getstructoffset())->setFilter((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((linefilter*) G__getstructoffset())->setFilter((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((linefilter*) G__getstructoffset())->setFilter((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((linefilter*) G__getstructoffset())->setFilter();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((linefilter*) G__getstructoffset())->setFScan((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((linefilter*) G__getstructoffset())->setFScan((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((linefilter*) G__getstructoffset())->setFScan((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((linefilter*) G__getstructoffset())->setFScan((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((linefilter*) G__getstructoffset())->setFScan();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((linefilter*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((linefilter*) G__getstructoffset())->resize((size_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((linefilter*) G__getstructoffset())->resize();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const linefilter*) G__getstructoffset())->getStartTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const linefilter*) G__getstructoffset())->getCurrentTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const linefilter*) G__getstructoffset())->inUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         WaveData* pobj;
         WaveData xobj = ((linefilter*) G__getstructoffset())->getPSD(*(WaveData*) libp->para[0].ref, (int) G__int(libp->para[1]));
         pobj = new WaveData(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         WaveData* pobj;
         WaveData xobj = ((linefilter*) G__getstructoffset())->getPSD(*(WaveData*) libp->para[0].ref);
         pobj = new WaveData(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((linefilter*) G__getstructoffset())->makeFilter(*(WaveData*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((linefilter*) G__getstructoffset())->makeFilter(*(WaveData*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         linedata* pobj;
         linedata xobj = ((linefilter*) G__getstructoffset())->getLine(*(WaveData*) libp->para[0].ref);
         pobj = new linedata(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         linedata* pobj;
         linedata xobj = ((linefilter*) G__getstructoffset())->getHeteroLine(*(WaveData*) libp->para[0].ref);
         pobj = new linedata(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((linefilter*) G__getstructoffset())->getOmega(*(WaveData*) libp->para[0].ref, (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((linefilter*) G__getstructoffset())->getOmega(*(WaveData*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((linefilter*) G__getstructoffset())->fScan(*(WaveData*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((linefilter*) G__getstructoffset())->Interference(*(WaveData*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<float>* pobj;
         wavearray<float> xobj = ((linefilter*) G__getstructoffset())->getTrend((int) G__int(libp->para[0]), (char) G__int(libp->para[1]));
         pobj = new wavearray<float>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((linefilter*) G__getstructoffset())->DumpTrend((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((linefilter*) G__getstructoffset())->DumpTrend((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((linefilter*) G__getstructoffset())->LoadTrend((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((linefilter*) G__getstructoffset())->newRate((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((linefilter*) G__getstructoffset())->maxLine((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((linefilter*) G__getstructoffset())->axb((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((linefilter*) G__getstructoffset())->wrap((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_912_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((linefilter*) G__getstructoffset())->intw((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef linefilter G__Tlinefilter;
static int G__wave_dict_912_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (linefilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((linefilter*) (soff+(sizeof(linefilter)*i)))->~G__Tlinefilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (linefilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((linefilter*) (soff))->~G__Tlinefilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_912_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   linefilter* dest = (linefilter*) G__getstructoffset();
   *dest = *(linefilter*) libp->para[0].ref;
   const linefilter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* netevent */
static int G__wave_dict_917_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   netevent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new netevent[n];
     } else {
       p = new((void*) gvp) netevent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new netevent;
     } else {
       p = new((void*) gvp) netevent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_netevent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   netevent* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new netevent((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) netevent((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new netevent((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) netevent((int) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_netevent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   netevent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new netevent(*(netevent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) netevent(*(netevent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_netevent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   netevent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new netevent((TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) netevent((TTree*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_netevent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   netevent* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new netevent(*((TString*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) netevent(*((TString*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new netevent(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) netevent(*((TString*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_netevent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const netevent& obj = ((netevent*) G__getstructoffset())->operator=(*(netevent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((netevent*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((netevent*) G__getstructoffset())->GetEntry((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netevent*) G__getstructoffset())->allocate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netevent*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((netevent*) G__getstructoffset())->Init(*((TString*) G__int(libp->para[0])), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netevent*) G__getstructoffset())->Init((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((netevent*) G__getstructoffset())->Notify());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((netevent*) G__getstructoffset())->setTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netevent*) G__getstructoffset())->setSLags((float*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((netevent*) G__getstructoffset())->output((TTree*) G__int(libp->para[0]), (network*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (size_t) G__int(libp->para[3])
, (int) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((netevent*) G__getstructoffset())->output((TTree*) G__int(libp->para[0]), (network*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((netevent*) G__getstructoffset())->output((TTree*) G__int(libp->para[0]), (network*) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((netevent*) G__getstructoffset())->output((TTree*) G__int(libp->para[0]), (network*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((netevent*) G__getstructoffset())->output((TTree*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((netevent*) G__getstructoffset())->output();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netevent*) G__getstructoffset())->output2G((TTree*) G__int(libp->para[0]), (network*) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((netevent*) G__getstructoffset())->Show((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((netevent*) G__getstructoffset())->Show();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((netevent*) G__getstructoffset())->dopen((const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((netevent*) G__getstructoffset())->dopen((const char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netevent*) G__getstructoffset())->dclose();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((netevent*) G__getstructoffset())->Dump(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((netevent*) G__getstructoffset())->Dump();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) netevent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) netevent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) netevent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      netevent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const netevent*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netevent*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netevent*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((netevent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) netevent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) netevent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) netevent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_917_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) netevent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef netevent G__Tnetevent;
static int G__wave_dict_917_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (netevent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((netevent*) (soff+(sizeof(netevent)*i)))->~G__Tnetevent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (netevent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((netevent*) (soff))->~G__Tnetevent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* regression */
static int G__wave_dict_919_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   regression* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new regression[n];
     } else {
       p = new((void*) gvp) regression[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new regression;
     } else {
       p = new((void*) gvp) regression;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_regression));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   regression* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new regression(
*(WSeries<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) regression(
*(WSeries<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new regression(
*(WSeries<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) regression(
*(WSeries<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new regression(*(WSeries<double>*) libp->para[0].ref, (char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) regression(*(WSeries<double>*) libp->para[0].ref, (char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_regression));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   regression* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new regression(*(regression*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) regression(*(regression*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_regression));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const regression& obj = ((regression*) G__getstructoffset())->operator=(*(regression*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 107, (long) ((regression*) G__getstructoffset())->add(*(WSeries<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 107, (long) ((regression*) G__getstructoffset())->add(*(WSeries<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 107, (long) ((regression*) G__getstructoffset())->add(*(WSeries<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 107, (long) ((regression*) G__getstructoffset())->add(*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 107, (long) ((regression*) G__getstructoffset())->add(*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 107, (long) ((regression*) G__getstructoffset())->add(*(wavearray<double>*) libp->para[0].ref, (char*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((regression*) G__getstructoffset())->add((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (char*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((regression*) G__getstructoffset())->mask((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((regression*) G__getstructoffset())->mask((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((regression*) G__getstructoffset())->mask((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((regression*) G__getstructoffset())->unmask((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((regression*) G__getstructoffset())->unmask((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((regression*) G__getstructoffset())->unmask((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((regression*) G__getstructoffset())->setFilter((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((regression*) G__getstructoffset())->setMatrix((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((regression*) G__getstructoffset())->setMatrix((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((regression*) G__getstructoffset())->setMatrix();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((regression*) G__getstructoffset())->solve((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (char) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((regression*) G__getstructoffset())->solve((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((regression*) G__getstructoffset())->solve((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((regression*) G__getstructoffset())->apply((double) G__double(libp->para[0]), (char) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((regression*) G__getstructoffset())->apply((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((regression*) G__getstructoffset())->apply();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         TMatrixDSym* pobj;
         TMatrixDSym xobj = ((regression*) G__getstructoffset())->getMatrix((size_t) G__int(libp->para[0]));
         pobj = new TMatrixDSym(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         TMatrixDSym* pobj;
         TMatrixDSym xobj = ((regression*) G__getstructoffset())->getMatrix();
         pobj = new TMatrixDSym(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->getVCROSS((size_t) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->getVCROSS();
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->getVEIGEN((int) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->getVEIGEN();
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->getFILTER((char) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->getFILTER((char) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->getFILTER((char) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->getFILTER();
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((regression*) G__getstructoffset())->getTFmap((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((regression*) G__getstructoffset())->getTFmap());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->rank((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->rank((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->rank((int) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->rank();
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         WSeries<double>* pobj;
         WSeries<double> xobj = ((regression*) G__getstructoffset())->getWNoise();
         pobj = new WSeries<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->getClean();
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->getNoise();
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->channel((size_t) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((regression*) G__getstructoffset())->getRank((int) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((regression*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) regression::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) regression::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) regression::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      regression::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const regression*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((regression*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((regression*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((regression*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) regression::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) regression::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) regression::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_919_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) regression::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef regression G__Tregression;
static int G__wave_dict_919_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (regression*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((regression*) (soff+(sizeof(regression)*i)))->~G__Tregression();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (regression*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((regression*) (soff))->~G__Tregression();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wat::Time */
static int G__wave_dict_941_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wat::Time* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wat::Time((INT_4S) G__int(libp->para[0]), (INT_4U) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) wat::Time((INT_4S) G__int(libp->para[0]), (INT_4U) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wat::Time((INT_4S) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) wat::Time((INT_4S) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new wat::Time[n];
       } else {
         p = new((void*) gvp) wat::Time[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new wat::Time;
       } else {
         p = new((void*) gvp) wat::Time;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wat::Time* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wat::Time(*((TString*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) wat::Time(*((TString*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wat::Time* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wat::Time(*(wat::Time*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wat::Time(*(wat::Time*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wat::Time* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wat::Time((double) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) wat::Time((double) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wat::Time& obj = ((wat::Time*) G__getstructoffset())->operator=(*(wat::Time*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wat::Time& obj = ((wat::Time*) G__getstructoffset())->operator+=(*(wat::Time*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wat::Time& obj = ((wat::Time*) G__getstructoffset())->operator-=(*(wat::Time*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wat::Time& obj = ((wat::Time*) G__getstructoffset())->operator*=(*(double*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wat::Time& obj = ((wat::Time*) G__getstructoffset())->operator/=(*(double*) G__Doubleref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wat::Time*) G__getstructoffset())->operator/(*(wat::Time*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((wat::Time*) G__getstructoffset())->operator==(*(wat::Time*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((wat::Time*) G__getstructoffset())->operator<=(*(wat::Time*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((wat::Time*) G__getstructoffset())->operator>=(*(wat::Time*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((wat::Time*) G__getstructoffset())->operator!=(*(wat::Time*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((wat::Time*) G__getstructoffset())->operator<(*(wat::Time*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((wat::Time*) G__getstructoffset())->operator>(*(wat::Time*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetGPS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((wat::Time*) G__getstructoffset())->GetNSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->SetSec((INT_4S) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((wat::Time*) G__getstructoffset())->SetNSec((INT_4U) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->SetDouble((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wat::Time*) G__getstructoffset())->GetDouble());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      ((wat::Time*) G__getstructoffset())->SetDate(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5])
, (int) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((wat::Time*) G__getstructoffset())->SetDate((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (int) G__int(libp->para[4]), (int) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->SetDateString(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wat::Time*) G__getstructoffset())->SetString((char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wat::Time*) G__getstructoffset())->SetString((char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->SetYear((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->SetMonth((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->SetDay((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->SetHour((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->SetMinute((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->SetSecond((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((wat::Time*) G__getstructoffset())->GetDateString();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetDayOfYear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetYear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetMonth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetDay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetHour());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetMinute());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetSecond());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetLeapSecs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->PrintLeapSecs();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetJulianDay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GetModJulianDay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wat::Time*) G__getstructoffset())->GetJulianDate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wat::Time*) G__getstructoffset())->GetModJulianDate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GpsToGpsLeaps((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->UnixToGpsLeaps((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GpsToGpsLeaps());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->UnixToGpsLeaps());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GpsToTaiLeaps((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->UnixToTaiLeaps((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GpsToTaiLeaps());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->UnixToTaiLeaps());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->UnixToGps();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->GpsToUnix();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((wat::Time*) G__getstructoffset())->GpsToUnixTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) wat::Time::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wat::Time::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) wat::Time::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      wat::Time::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const wat::Time*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wat::Time*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wat::Time::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wat::Time::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wat::Time::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_941_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wat::Time::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wat::Time G__TwatcLcLTime;
static int G__wave_dict_941_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wat::Time*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wat::Time*) (soff+(sizeof(wat::Time)*i)))->~G__TwatcLcLTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wat::Time*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wat::Time*) (soff))->~G__TwatcLcLTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* watconstants */
static int G__wave_dict_942_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::SpeedOfLightInVacuo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::PermittivityOfFreeSpace());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::PermeabilityOfFreeSpace());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::StandardGravity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::StandardAtmosphere());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::SpeedOfLightInVacuoUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::PermittivityOfFreeSpaceUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::PermeabilityOfFreeSpaceUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::StandardGravityUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::StandardAtmosphereUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::GravitationalConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::PlanckConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::ReducedPlanckConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::PlanckMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::PlanckLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::PlanckTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::BoltzmannConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::IdealGasConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::AvogadroConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::WienDisplacementLawConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::StefanBoltzmannConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::AtomicMassUnit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::ProtonMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::ElectronMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::ElectronCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::FineStructureConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::ClassicalElectronRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::ElectronComptonWavelength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::BohrRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::BohrMagneton());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::NuclearMagneton());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::GravitationalConstantUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::PlanckConstantUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::ReducedPlanckConstantUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::PlanckMassUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::PlanckLengthUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::PlanckTimeUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::BoltzmannConstantUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::IdealGasConstantUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::AvogadroConstantUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::WienDisplacementLawConstantUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::StefanBoltzmannConstantUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::AtomicMassUnitUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::ProtonMassUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::ElectronMassUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::ElectronChargeUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::FineStructureConstantUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::ClassicalElectronRadiusUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::ElectronComptonWavelengthUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::BohrRadiusUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::BohrMagnetonUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::NuclearMagnetonUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::GalacticCenterLongitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::GalacticCenterLatitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::GalacticCenterLongitudeUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::GalacticCenterLatitudeUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::EarthEquatorialRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::SemimajorAxisOfWGS84ReferenceEllipsoid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::SemiminorAxisOfWGS84ReferenceEllipsoid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::EarthMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::EarthInclination2000());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::EarthOrbitalEccentricity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::SolarEquatorialRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::EarthEquatorialRadiusUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::SemimajorAxisOfWGS84ReferenceEllipsoidUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::SemiminorAxisOfWGS84ReferenceEllipsoidUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::EarthMassUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::EarthInclination2000Unit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::EarthOrbitalEccentricityUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::SolarEquatorialRadiusUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::SolarMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::GeometrizedSolarMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::SolarLuminosity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::AstronomicalUnit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::Parsec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::SolarMassUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::GeometrizedSolarMassUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::SolarLuminosityUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::AstronomicalUnitUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::ParsecUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::TropicalYear1994());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::SiderealYear1994());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::MeanSiderealDay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::Lightyear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::TropicalYear1994Unit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::SiderealYear1994Unit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::MeanSiderealDayUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::LightyearUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::HubbleConstantPrefactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::HubbleApproximateConstant());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::CriticalDensityPrefactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::CriticalApproximateDensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::CosmicBackgroundRadiationTemperature());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::SolarVelocityWithRespectToCBR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::EnergyDensityOfCBR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::NumberDensityOfCBRPhotons());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) watconstants::EntropyDensityOfCBR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::HubbleConstantPrefactorUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::HubbleApproximateConstantUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::CriticalDensityPrefactorUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::CriticalApproximateDensityUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::CosmicBackgroundRadiationTemperatureUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::SolarVelocityWithRespectToCBRUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::EnergyDensityOfCBRUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::NumberDensityOfCBRPhotonsUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_942_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = watconstants::EntropyDensityOfCBRUnit();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/* wavearray<long long> */
static int G__wave_dict_943_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<long long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<long long>((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) wavearray<long long>((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<long long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<long long>[n];
     } else {
       p = new((void*) gvp) wavearray<long long>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<long long>;
     } else {
       p = new((void*) gvp) wavearray<long long>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<long long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<long long>(*(wavearray<long long>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wavearray<long long>(*(wavearray<long long>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long long>& obj = ((wavearray<long long>*) G__getstructoffset())->operator=(*(wavearray<long long>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long long>& obj = ((wavearray<long long>*) G__getstructoffset())->operator[](*(slice*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long long& obj = ((wavearray<long long>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'n', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<long long>*) G__getstructoffset())->limit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<long long>*) G__getstructoffset())->limit(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<long long>*) G__getstructoffset())->limit(*(wavearray<long long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long long>& obj = ((wavearray<long long>*) G__getstructoffset())->operator+=(*(wavearray<long long>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long long>& obj = ((wavearray<long long>*) G__getstructoffset())->operator-=(*(wavearray<long long>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long long>& obj = ((wavearray<long long>*) G__getstructoffset())->operator*=(*(wavearray<long long>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long long>& obj = ((wavearray<long long>*) G__getstructoffset())->operator<<(*(wavearray<long long>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long long>& obj = ((wavearray<long long>*) G__getstructoffset())->operator=((const long long) G__Longlong(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long long>& obj = ((wavearray<long long>*) G__getstructoffset())->operator+=((const long long) G__Longlong(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long long>& obj = ((wavearray<long long>*) G__getstructoffset())->operator-=((const long long) G__Longlong(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long long>& obj = ((wavearray<long long>*) G__getstructoffset())->operator*=((const long long) G__Longlong(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = ((wavearray<long long>*) G__getstructoffset())->operator>>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (void*) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->DumpObject((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->ReadShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->FFT((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<long long>*) G__getstructoffset())->FFT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->FFTW((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<long long>*) G__getstructoffset())->FFTW();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->resetFFTW();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<long long>*) G__getstructoffset())->Resample(*(wavearray<long long>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->Resample(*(wavearray<long long>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<long long>*) G__getstructoffset())->resample(*(wavearray<long long>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->resample(*(wavearray<long long>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->resample((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->resample((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->start((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long long>*) G__getstructoffset())->start());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->stop((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long long>*) G__getstructoffset())->stop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->rate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long long>*) G__getstructoffset())->rate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->edge((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long long>*) G__getstructoffset())->edge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<long long>*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->setSlice(*(slice*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const slice* pobj;
         const slice xobj = ((const wavearray<long long>*) G__getstructoffset())->getSlice();
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const wavearray<long long>*) G__getstructoffset())->median((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const wavearray<long long>*) G__getstructoffset())->median((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const wavearray<long long>*) G__getstructoffset())->median());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long long>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<long long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long long>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<long long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<long long>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long long>*) G__getstructoffset())->mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long long>*) G__getstructoffset())->mean((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long long>*) G__getstructoffset())->mean(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long long>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<long long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long long>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<long long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<long long>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long long>*) G__getstructoffset())->rms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long long>*) G__getstructoffset())->rms(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long long>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<long long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long long>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<long long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<long long>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const wavearray<long long>*) G__getstructoffset())->max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->max(*(wavearray<long long>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const wavearray<long long>*) G__getstructoffset())->min());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->SQRT();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->hann();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const wavearray<long long>*) G__getstructoffset())->waveSort((long long**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const wavearray<long long>*) G__getstructoffset())->waveSort((long long**) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const wavearray<long long>*) G__getstructoffset())->waveSort((long long**) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<long long>*) G__getstructoffset())->waveSort();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const wavearray<long long>*) G__getstructoffset())->waveSplit((long long**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((wavearray<long long>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<long long>*) G__getstructoffset())->getSampleRank((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<long long>*) G__getstructoffset())->getSampleRankE((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letLonglong(result7, 110, (G__int64) ((const wavearray<long long>*) G__getstructoffset())->rank((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letLonglong(result7, 110, (G__int64) ((const wavearray<long long>*) G__getstructoffset())->rank());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<long long>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<long long>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<long long>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->lprFilter(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long long>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long long>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<long long>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<long long>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<long long>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<long long>*) G__getstructoffset())->white((double) G__double(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->exponential((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((wavearray<long long>*) G__getstructoffset())->get((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((wavearray<long long>*) G__getstructoffset())->get((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((wavearray<long long>*) G__getstructoffset())->uniform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 108, (long) ((wavearray<long long>*) G__getstructoffset())->rand48((long) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((wavearray<long long>*) G__getstructoffset())->rand48());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long long>*) G__getstructoffset())->getStatistics(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long long>*) G__getstructoffset())->cpf(*(wavearray<long long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long long>*) G__getstructoffset())->cpf(*(wavearray<long long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->cpf(*(wavearray<long long>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->cpf(*(wavearray<long long>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long long>*) G__getstructoffset())->add(*(wavearray<long long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long long>*) G__getstructoffset())->add(*(wavearray<long long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->add(*(wavearray<long long>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->add(*(wavearray<long long>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long long>*) G__getstructoffset())->sub(*(wavearray<long long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long long>*) G__getstructoffset())->sub(*(wavearray<long long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long long>*) G__getstructoffset())->sub(*(wavearray<long long>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long long>*) G__getstructoffset())->sub(*(wavearray<long long>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<long long>*) G__getstructoffset())->append(*(wavearray<long long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<long long>*) G__getstructoffset())->append((long long) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<long long>*) G__getstructoffset())->wavecount((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long long>*) G__getstructoffset())->Stack(*(wavearray<long long>*) libp->para[0].ref, (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long long>*) G__getstructoffset())->Stack(*(wavearray<long long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long long>*) G__getstructoffset())->Stack(*(wavearray<long long>*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<long long>::compare((void*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) wavearray<long long>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<long long>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) wavearray<long long>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      wavearray<long long>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long long>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<long long>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<long long>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<long long>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_943_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<long long>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wavearray<long long> G__TwavearraylElongsPlonggR;
static int G__wave_dict_943_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wavearray<long long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wavearray<long long>*) (soff+(sizeof(wavearray<long long>)*i)))->~G__TwavearraylElongsPlonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wavearray<long long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wavearray<long long>*) (soff))->~G__TwavearraylElongsPlonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* wavearray<long> */
static int G__wave_dict_944_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<long>((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) wavearray<long>((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<long>[n];
     } else {
       p = new((void*) gvp) wavearray<long>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new wavearray<long>;
     } else {
       p = new((void*) gvp) wavearray<long>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   wavearray<long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new wavearray<long>(*(wavearray<long>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) wavearray<long>(*(wavearray<long>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long>& obj = ((wavearray<long>*) G__getstructoffset())->operator=(*(wavearray<long>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long>& obj = ((wavearray<long>*) G__getstructoffset())->operator[](*(slice*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const long& obj = ((wavearray<long>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<long>*) G__getstructoffset())->limit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<long>*) G__getstructoffset())->limit(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<long>*) G__getstructoffset())->limit(*(wavearray<long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long>& obj = ((wavearray<long>*) G__getstructoffset())->operator+=(*(wavearray<long>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long>& obj = ((wavearray<long>*) G__getstructoffset())->operator-=(*(wavearray<long>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long>& obj = ((wavearray<long>*) G__getstructoffset())->operator*=(*(wavearray<long>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long>& obj = ((wavearray<long>*) G__getstructoffset())->operator<<(*(wavearray<long>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long>& obj = ((wavearray<long>*) G__getstructoffset())->operator=((const long) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long>& obj = ((wavearray<long>*) G__getstructoffset())->operator+=((const long) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long>& obj = ((wavearray<long>*) G__getstructoffset())->operator-=((const long) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<long>& obj = ((wavearray<long>*) G__getstructoffset())->operator*=((const long) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = ((wavearray<long>*) G__getstructoffset())->operator>>(libp->para[0].ref ? *(char**) libp->para[0].ref : *(char**) (void*) (&G__Mlong(libp->para[0])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long>*) G__getstructoffset())->Dump((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long>*) G__getstructoffset())->DumpBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long>*) G__getstructoffset())->DumpShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->DumpObject((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long>*) G__getstructoffset())->ReadBinary((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->ReadShort((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<long>*) G__getstructoffset())->FFT((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<long>*) G__getstructoffset())->FFT();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((wavearray<long>*) G__getstructoffset())->FFTW((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<long>*) G__getstructoffset())->FFTW();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->resetFFTW();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<long>*) G__getstructoffset())->Resample(*(wavearray<long>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long>*) G__getstructoffset())->Resample(*(wavearray<long>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<long>*) G__getstructoffset())->resample(*(wavearray<long>*) libp->para[0].ref, (double) G__double(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long>*) G__getstructoffset())->resample(*(wavearray<long>*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long>*) G__getstructoffset())->resample((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long>*) G__getstructoffset())->resample((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->start((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long>*) G__getstructoffset())->start());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->stop((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long>*) G__getstructoffset())->stop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->rate((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long>*) G__getstructoffset())->rate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->edge((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long>*) G__getstructoffset())->edge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const wavearray<long>*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->setSlice(*(slice*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const slice* pobj;
         const slice xobj = ((const wavearray<long>*) G__getstructoffset())->getSlice();
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const wavearray<long>*) G__getstructoffset())->median((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const wavearray<long>*) G__getstructoffset())->median((size_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const wavearray<long>*) G__getstructoffset())->median());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long>*) G__getstructoffset())->median((double) G__double(libp->para[0]), (wavearray<long>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long>*) G__getstructoffset())->mean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long>*) G__getstructoffset())->mean((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long>*) G__getstructoffset())->mean(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long>*) G__getstructoffset())->mean((double) G__double(libp->para[0]), (wavearray<long>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long>*) G__getstructoffset())->rms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long>*) G__getstructoffset())->rms(*(slice*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<long>*) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long>*) G__getstructoffset())->rms((double) G__double(libp->para[0]), (wavearray<long>*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const wavearray<long>*) G__getstructoffset())->max());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->max(*(wavearray<long>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const wavearray<long>*) G__getstructoffset())->min());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->SQRT();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->hann();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((const wavearray<long>*) G__getstructoffset())->waveSort((long**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((const wavearray<long>*) G__getstructoffset())->waveSort((long**) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((const wavearray<long>*) G__getstructoffset())->waveSort((long**) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((wavearray<long>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long>*) G__getstructoffset())->waveSort((size_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((wavearray<long>*) G__getstructoffset())->waveSort();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const wavearray<long>*) G__getstructoffset())->waveSplit((long**) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((wavearray<long>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->waveSplit((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<long>*) G__getstructoffset())->getSampleRank((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const wavearray<long>*) G__getstructoffset())->getSampleRankE((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 108, (long) ((const wavearray<long>*) G__getstructoffset())->rank((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((const wavearray<long>*) G__getstructoffset())->rank());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<long>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((wavearray<long>*) G__getstructoffset())->getLPRFilter((size_t) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((wavearray<long>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long>*) G__getstructoffset())->spesla((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->lprFilter(*(wavearray<double>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long>*) G__getstructoffset())->lprFilter((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<long>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 3:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<long>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<long>*) G__getstructoffset())->white((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const wavearray<double>* pobj;
         const wavearray<double> xobj = ((const wavearray<long>*) G__getstructoffset())->white((double) G__double(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->exponential((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((wavearray<long>*) G__getstructoffset())->get((size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((wavearray<long>*) G__getstructoffset())->get((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((wavearray<long>*) G__getstructoffset())->uniform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 108, (long) ((wavearray<long>*) G__getstructoffset())->rand48((long) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 108, (long) ((wavearray<long>*) G__getstructoffset())->rand48());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const wavearray<long>*) G__getstructoffset())->getStatistics(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long>*) G__getstructoffset())->cpf(*(wavearray<long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long>*) G__getstructoffset())->cpf(*(wavearray<long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long>*) G__getstructoffset())->cpf(*(wavearray<long>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long>*) G__getstructoffset())->cpf(*(wavearray<long>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long>*) G__getstructoffset())->add(*(wavearray<long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long>*) G__getstructoffset())->add(*(wavearray<long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long>*) G__getstructoffset())->add(*(wavearray<long>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long>*) G__getstructoffset())->add(*(wavearray<long>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((wavearray<long>*) G__getstructoffset())->sub(*(wavearray<long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((wavearray<long>*) G__getstructoffset())->sub(*(wavearray<long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((wavearray<long>*) G__getstructoffset())->sub(*(wavearray<long>*) libp->para[0].ref, (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((wavearray<long>*) G__getstructoffset())->sub(*(wavearray<long>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<long>*) G__getstructoffset())->append(*(wavearray<long>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<long>*) G__getstructoffset())->append((long) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((wavearray<long>*) G__getstructoffset())->wavecount((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long>*) G__getstructoffset())->Stack(*(wavearray<long>*) libp->para[0].ref, (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long>*) G__getstructoffset())->Stack(*(wavearray<long>*) libp->para[0].ref, (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((wavearray<long>*) G__getstructoffset())->Stack(*(wavearray<long>*) libp->para[0].ref, (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<long>::compare((void*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) wavearray<long>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<long>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) wavearray<long>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      wavearray<long>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((wavearray<long>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<long>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<long>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) wavearray<long>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_944_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) wavearray<long>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef wavearray<long> G__TwavearraylElonggR;
static int G__wave_dict_944_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (wavearray<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((wavearray<long>*) (soff+(sizeof(wavearray<long>)*i)))->~G__TwavearraylElonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (wavearray<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((wavearray<long>*) (soff))->~G__TwavearraylElonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Haar<float> */
static int G__wave_dict_945_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Haar<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Haar<float>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Haar<float>((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Haar<float>[n];
       } else {
         p = new((void*) gvp) Haar<float>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Haar<float>;
       } else {
         p = new((void*) gvp) Haar<float>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_945_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Haar<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Haar<float>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Haar<float>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_945_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Haar<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Haar<float>(*(Haar<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Haar<float>(*(Haar<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_945_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Haar<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_945_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Haar<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_945_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Haar<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_945_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Haar<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_945_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Haar<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_945_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Haar<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_945_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Haar<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_945_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Haar<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_945_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Haar<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Haar<float> G__THaarlEfloatgR;
static int G__wave_dict_945_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Haar<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Haar<float>*) (soff+(sizeof(Haar<float>)*i)))->~G__THaarlEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Haar<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Haar<float>*) (soff))->~G__THaarlEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_945_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Haar<float>* dest = (Haar<float>*) G__getstructoffset();
   *dest = *(Haar<float>*) libp->para[0].ref;
   const Haar<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Haar<double> */
static int G__wave_dict_946_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Haar<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Haar<double>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Haar<double>((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Haar<double>[n];
       } else {
         p = new((void*) gvp) Haar<double>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Haar<double>;
       } else {
         p = new((void*) gvp) Haar<double>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_946_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Haar<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Haar<double>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Haar<double>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_946_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Haar<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Haar<double>(*(Haar<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Haar<double>(*(Haar<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_946_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Haar<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_946_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Haar<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_946_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Haar<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_946_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Haar<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_946_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Haar<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_946_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Haar<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_946_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Haar<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_946_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Haar<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_946_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Haar<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Haar<double> G__THaarlEdoublegR;
static int G__wave_dict_946_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Haar<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Haar<double>*) (soff+(sizeof(Haar<double>)*i)))->~G__THaarlEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Haar<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Haar<double>*) (soff))->~G__THaarlEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_946_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Haar<double>* dest = (Haar<double>*) G__getstructoffset();
   *dest = *(Haar<double>*) libp->para[0].ref;
   const Haar<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Biorthogonal<float> */
static int G__wave_dict_947_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Biorthogonal<float>*) G__getstructoffset())->setFilter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Biorthogonal<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Biorthogonal<float>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Biorthogonal<float>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Biorthogonal<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Biorthogonal<float>(*(Biorthogonal<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Biorthogonal<float>(*(Biorthogonal<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Biorthogonal<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Biorthogonal<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Biorthogonal<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Biorthogonal<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Biorthogonal<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Biorthogonal<float>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Biorthogonal<float>((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Biorthogonal<float>[n];
       } else {
         p = new((void*) gvp) Biorthogonal<float>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Biorthogonal<float>;
       } else {
         p = new((void*) gvp) Biorthogonal<float>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Biorthogonal<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Biorthogonal<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Biorthogonal<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Biorthogonal<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Biorthogonal<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Biorthogonal<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Biorthogonal<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Biorthogonal<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_947_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Biorthogonal<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Biorthogonal<float> G__TBiorthogonallEfloatgR;
static int G__wave_dict_947_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Biorthogonal<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Biorthogonal<float>*) (soff+(sizeof(Biorthogonal<float>)*i)))->~G__TBiorthogonallEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Biorthogonal<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Biorthogonal<float>*) (soff))->~G__TBiorthogonallEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_947_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Biorthogonal<float>* dest = (Biorthogonal<float>*) G__getstructoffset();
   *dest = *(Biorthogonal<float>*) libp->para[0].ref;
   const Biorthogonal<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Biorthogonal<double> */
static int G__wave_dict_948_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Biorthogonal<double>*) G__getstructoffset())->setFilter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Biorthogonal<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Biorthogonal<double>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Biorthogonal<double>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Biorthogonal<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Biorthogonal<double>(*(Biorthogonal<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Biorthogonal<double>(*(Biorthogonal<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Biorthogonal<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Biorthogonal<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Biorthogonal<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Biorthogonal<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Biorthogonal<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Biorthogonal<double>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Biorthogonal<double>((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Biorthogonal<double>[n];
       } else {
         p = new((void*) gvp) Biorthogonal<double>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Biorthogonal<double>;
       } else {
         p = new((void*) gvp) Biorthogonal<double>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Biorthogonal<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Biorthogonal<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Biorthogonal<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Biorthogonal<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Biorthogonal<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Biorthogonal<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Biorthogonal<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Biorthogonal<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_948_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Biorthogonal<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Biorthogonal<double> G__TBiorthogonallEdoublegR;
static int G__wave_dict_948_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Biorthogonal<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Biorthogonal<double>*) (soff+(sizeof(Biorthogonal<double>)*i)))->~G__TBiorthogonallEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Biorthogonal<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Biorthogonal<double>*) (soff))->~G__TBiorthogonallEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_948_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Biorthogonal<double>* dest = (Biorthogonal<double>*) G__getstructoffset();
   *dest = *(Biorthogonal<double>*) libp->para[0].ref;
   const Biorthogonal<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Daubechies<float> */
static int G__wave_dict_949_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Daubechies<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Daubechies<float>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Daubechies<float>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_949_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Daubechies<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Daubechies<float>(*(Daubechies<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Daubechies<float>(*(Daubechies<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_949_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Daubechies<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Daubechies<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Daubechies<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Daubechies<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Daubechies<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Daubechies<float>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Daubechies<float>((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Daubechies<float>[n];
       } else {
         p = new((void*) gvp) Daubechies<float>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Daubechies<float>;
       } else {
         p = new((void*) gvp) Daubechies<float>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_949_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Daubechies<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_949_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Daubechies<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_949_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Daubechies<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_949_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Daubechies<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_949_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Daubechies<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_949_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Daubechies<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_949_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Daubechies<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_949_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Daubechies<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_949_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Daubechies<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Daubechies<float> G__TDaubechieslEfloatgR;
static int G__wave_dict_949_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Daubechies<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Daubechies<float>*) (soff+(sizeof(Daubechies<float>)*i)))->~G__TDaubechieslEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Daubechies<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Daubechies<float>*) (soff))->~G__TDaubechieslEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_949_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Daubechies<float>* dest = (Daubechies<float>*) G__getstructoffset();
   *dest = *(Daubechies<float>*) libp->para[0].ref;
   const Daubechies<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Daubechies<double> */
static int G__wave_dict_950_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Daubechies<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Daubechies<double>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Daubechies<double>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_950_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Daubechies<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Daubechies<double>(*(Daubechies<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Daubechies<double>(*(Daubechies<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_950_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Daubechies<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Daubechies<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Daubechies<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Daubechies<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Daubechies<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Daubechies<double>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Daubechies<double>((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Daubechies<double>[n];
       } else {
         p = new((void*) gvp) Daubechies<double>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Daubechies<double>;
       } else {
         p = new((void*) gvp) Daubechies<double>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_950_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Daubechies<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_950_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Daubechies<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_950_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Daubechies<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_950_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Daubechies<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_950_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Daubechies<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_950_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Daubechies<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_950_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Daubechies<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_950_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Daubechies<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_950_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Daubechies<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Daubechies<double> G__TDaubechieslEdoublegR;
static int G__wave_dict_950_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Daubechies<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Daubechies<double>*) (soff+(sizeof(Daubechies<double>)*i)))->~G__TDaubechieslEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Daubechies<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Daubechies<double>*) (soff))->~G__TDaubechieslEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_950_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Daubechies<double>* dest = (Daubechies<double>*) G__getstructoffset();
   *dest = *(Daubechies<double>*) libp->para[0].ref;
   const Daubechies<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Symlet<float> */
static int G__wave_dict_951_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Symlet<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Symlet<float>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Symlet<float>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_951_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Symlet<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Symlet<float>(*(Symlet<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Symlet<float>(*(Symlet<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_951_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Symlet<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Symlet<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Symlet<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Symlet<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Symlet<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Symlet<float>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Symlet<float>((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Symlet<float>[n];
       } else {
         p = new((void*) gvp) Symlet<float>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Symlet<float>;
       } else {
         p = new((void*) gvp) Symlet<float>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_951_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Symlet<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_951_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Symlet<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_951_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Symlet<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_951_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Symlet<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_951_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Symlet<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_951_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Symlet<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_951_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Symlet<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_951_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Symlet<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_951_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Symlet<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Symlet<float> G__TSymletlEfloatgR;
static int G__wave_dict_951_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Symlet<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Symlet<float>*) (soff+(sizeof(Symlet<float>)*i)))->~G__TSymletlEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Symlet<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Symlet<float>*) (soff))->~G__TSymletlEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_951_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Symlet<float>* dest = (Symlet<float>*) G__getstructoffset();
   *dest = *(Symlet<float>*) libp->para[0].ref;
   const Symlet<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Symlet<double> */
static int G__wave_dict_952_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Symlet<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Symlet<double>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Symlet<double>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_952_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Symlet<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Symlet<double>(*(Symlet<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Symlet<double>(*(Symlet<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_952_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Symlet<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Symlet<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Symlet<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Symlet<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Symlet<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Symlet<double>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Symlet<double>((int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Symlet<double>[n];
       } else {
         p = new((void*) gvp) Symlet<double>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Symlet<double>;
       } else {
         p = new((void*) gvp) Symlet<double>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_952_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Symlet<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_952_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Symlet<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_952_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Symlet<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_952_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Symlet<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_952_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Symlet<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_952_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Symlet<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_952_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Symlet<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_952_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Symlet<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_952_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Symlet<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Symlet<double> G__TSymletlEdoublegR;
static int G__wave_dict_952_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Symlet<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Symlet<double>*) (soff+(sizeof(Symlet<double>)*i)))->~G__TSymletlEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Symlet<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Symlet<double>*) (soff))->~G__TSymletlEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_952_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Symlet<double>* dest = (Symlet<double>*) G__getstructoffset();
   *dest = *(Symlet<double>*) libp->para[0].ref;
   const Symlet<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Meyer<float> */
static int G__wave_dict_953_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Meyer<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Meyer<float>[n];
     } else {
       p = new((void*) gvp) Meyer<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Meyer<float>;
     } else {
       p = new((void*) gvp) Meyer<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Meyer<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Meyer<float>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Meyer<float>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Meyer<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Meyer<float>(*(Meyer<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Meyer<float>(*(Meyer<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Meyer<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Meyer<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Meyer<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Meyer<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Meyer<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Meyer<float>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Meyer<float>((int) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((Meyer<float>*) G__getstructoffset())->filter((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((Meyer<float>*) G__getstructoffset())->filter((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Meyer<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Meyer<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Meyer<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Meyer<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Meyer<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Meyer<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Meyer<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Meyer<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_953_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Meyer<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Meyer<float> G__TMeyerlEfloatgR;
static int G__wave_dict_953_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Meyer<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Meyer<float>*) (soff+(sizeof(Meyer<float>)*i)))->~G__TMeyerlEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Meyer<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Meyer<float>*) (soff))->~G__TMeyerlEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_953_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Meyer<float>* dest = (Meyer<float>*) G__getstructoffset();
   *dest = *(Meyer<float>*) libp->para[0].ref;
   const Meyer<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Meyer<double> */
static int G__wave_dict_954_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Meyer<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Meyer<double>[n];
     } else {
       p = new((void*) gvp) Meyer<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Meyer<double>;
     } else {
       p = new((void*) gvp) Meyer<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Meyer<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Meyer<double>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Meyer<double>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Meyer<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Meyer<double>(*(Meyer<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Meyer<double>(*(Meyer<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Meyer<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Meyer<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) Meyer<double>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (BORDER) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Meyer<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Meyer<double>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Meyer<double>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Meyer<double>((int) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((Meyer<double>*) G__getstructoffset())->filter((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((Meyer<double>*) G__getstructoffset())->filter((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Meyer<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Meyer<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Meyer<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Meyer<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Meyer<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Meyer<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Meyer<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Meyer<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_954_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Meyer<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Meyer<double> G__TMeyerlEdoublegR;
static int G__wave_dict_954_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Meyer<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Meyer<double>*) (soff+(sizeof(Meyer<double>)*i)))->~G__TMeyerlEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Meyer<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Meyer<double>*) (soff))->~G__TMeyerlEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_954_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Meyer<double>* dest = (Meyer<double>*) G__getstructoffset();
   *dest = *(Meyer<double>*) libp->para[0].ref;
   const Meyer<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* WDM<float> */
static int G__wave_dict_955_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WDM<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WDM<float>[n];
     } else {
       p = new((void*) gvp) WDM<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WDM<float>;
     } else {
       p = new((void*) gvp) WDM<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WDM<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WDM<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) WDM<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WDM<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) WDM<float>(
(int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new WDM<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) WDM<float>((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WDM<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new WDM<float>(*(WDM<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) WDM<float>(*(WDM<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WDM<float>*) G__getstructoffset())->getBaseWave((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(SymmArray<double>*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((WDM<float>*) G__getstructoffset())->getBaseWaveQ((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, *(SymmArray<double>*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((WDM<float>*) G__getstructoffset())->getBaseWave((int) G__int(libp->para[0]), *(wavearray<double>*) libp->para[1].ref
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((WDM<float>*) G__getstructoffset())->getBaseWave((int) G__int(libp->para[0]), *(wavearray<double>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WDM<float>*) G__getstructoffset())->w2tQ((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((WDM<float>*) G__getstructoffset())->getPixelAmplitude((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((WDM<float>*) G__getstructoffset())->getPixelAmplitude((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((WDM<float>*) G__getstructoffset())->getPixelAmplitudeSSEOld((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((WDM<float>*) G__getstructoffset())->getPixelAmplitudeSSEOld((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((WDM<float>*) G__getstructoffset())->getPixelAmplitudeSSE((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (bool) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WDM<float>*) G__getstructoffset())->getPixelAmplitudeSSE((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])
, (float*) G__int(libp->para[4]), (bool) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((WDM<float>*) G__getstructoffset())->TimeShiftTest((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((WDM<float>*) G__getstructoffset())->TimeShiftTestSSE((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WDM<float>*) G__getstructoffset())->initFourier();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((WDM<float>*) G__getstructoffset())->getFilter((int) G__int(libp->para[0]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((WDM<float>*) G__getstructoffset())->setTDFilter((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((WDM<float>*) G__getstructoffset())->setTDFilter((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((WDM<float>*) G__getstructoffset())->getTDFilter2((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         wavearray<double>* pobj;
         wavearray<double> xobj = ((WDM<float>*) G__getstructoffset())->getTDFilter1((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new wavearray<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         slice* pobj;
         slice xobj = ((WDM<float>*) G__getstructoffset())->getSlice((double) G__double(libp->para[0]));
         pobj = new slice(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WDM<float>*) G__getstructoffset())->SetTFMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 107, (long) ((WDM<float>*) G__getstructoffset())->Last((int) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 107, (long) ((WDM<float>*) G__getstructoffset())->Last());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) WDM<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WDM<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) WDM<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      WDM<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((WDM<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WDM<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WDM<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) WDM<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_955_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) WDM<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef WDM<float> G__TWDMlEfloatgR;
static int G__wave_dict_955_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (WDM<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((WDM<float>*) (soff+(sizeof(WDM<float>)*i)))->~G__TWDMlEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (WDM<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((WDM<float>*) (soff))->~G__TWDMlEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_955_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   WDM<float>* dest = (WDM<float>*) G__getstructoffset();
   *dest = *(WDM<float>*) libp->para[0].ref;
   const WDM<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmArray<int> */
static int G__wave_dict_956_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArray<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmArray<int>((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmArray<int>((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArray<int>[n];
       } else {
         p = new((void*) gvp) SymmArray<int>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArray<int>;
       } else {
         p = new((void*) gvp) SymmArray<int>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArray<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmArray<int>(*(SymmArray<int>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmArray<int>(*(SymmArray<int>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArray<int>& obj = ((SymmArray<int>*) G__getstructoffset())->operator=(*(SymmArray<int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<int>*) G__getstructoffset())->Init((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<int>*) G__getstructoffset())->Resize((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<int>*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<int>*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((SymmArray<int>*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SymmArray<int>*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmArray<int>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArray<int>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmArray<int>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmArray<int>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<int>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArray<int>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArray<int>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArray<int>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_956_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArray<int>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmArray<int> G__TSymmArraylEintgR;
static int G__wave_dict_956_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmArray<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmArray<int>*) (soff+(sizeof(SymmArray<int>)*i)))->~G__TSymmArraylEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmArray<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmArray<int>*) (soff))->~G__TSymmArraylEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmArray<float> */
static int G__wave_dict_957_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArray<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmArray<float>((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmArray<float>((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArray<float>[n];
       } else {
         p = new((void*) gvp) SymmArray<float>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArray<float>;
       } else {
         p = new((void*) gvp) SymmArray<float>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArray<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmArray<float>(*(SymmArray<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmArray<float>(*(SymmArray<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArray<float>& obj = ((SymmArray<float>*) G__getstructoffset())->operator=(*(SymmArray<float>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<float>*) G__getstructoffset())->Init((float) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<float>*) G__getstructoffset())->Resize((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<float>*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<float>*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((SymmArray<float>*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SymmArray<float>*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmArray<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArray<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmArray<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmArray<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArray<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArray<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArray<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArray<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_957_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArray<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmArray<float> G__TSymmArraylEfloatgR;
static int G__wave_dict_957_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmArray<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmArray<float>*) (soff+(sizeof(SymmArray<float>)*i)))->~G__TSymmArraylEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmArray<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmArray<float>*) (soff))->~G__TSymmArraylEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmArraySSE<int> */
static int G__wave_dict_958_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArraySSE<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmArraySSE<int>((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmArraySSE<int>((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArraySSE<int>[n];
       } else {
         p = new((void*) gvp) SymmArraySSE<int>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArraySSE<int>;
       } else {
         p = new((void*) gvp) SymmArraySSE<int>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArraySSE<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmArraySSE<int>(*(SymmArraySSE<int>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmArraySSE<int>(*(SymmArraySSE<int>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArraySSE<int>& obj = ((SymmArraySSE<int>*) G__getstructoffset())->operator=(*(SymmArraySSE<int>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<int>*) G__getstructoffset())->Init((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<int>*) G__getstructoffset())->Resize((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<int>*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<int>*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((SymmArraySSE<int>*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((SymmArraySSE<int>*) G__getstructoffset())->SSEPointer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SymmArraySSE<int>*) G__getstructoffset())->SSESize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SymmArraySSE<int>*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<int>*) G__getstructoffset())->ZeroExtraElements();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmArraySSE<int>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArraySSE<int>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmArraySSE<int>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmArraySSE<int>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<int>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArraySSE<int>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArraySSE<int>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArraySSE<int>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_958_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArraySSE<int>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmArraySSE<int> G__TSymmArraySSElEintgR;
static int G__wave_dict_958_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmArraySSE<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmArraySSE<int>*) (soff+(sizeof(SymmArraySSE<int>)*i)))->~G__TSymmArraySSElEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmArraySSE<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmArraySSE<int>*) (soff))->~G__TSymmArraySSElEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmArraySSE<double> */
static int G__wave_dict_959_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArraySSE<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmArraySSE<double>((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmArraySSE<double>((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArraySSE<double>[n];
       } else {
         p = new((void*) gvp) SymmArraySSE<double>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmArraySSE<double>;
       } else {
         p = new((void*) gvp) SymmArraySSE<double>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmArraySSE<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmArraySSE<double>(*(SymmArraySSE<double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmArraySSE<double>(*(SymmArraySSE<double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArraySSE<double>& obj = ((SymmArraySSE<double>*) G__getstructoffset())->operator=(*(SymmArraySSE<double>*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<double>*) G__getstructoffset())->Init((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<double>*) G__getstructoffset())->Resize((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<double>*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<double>*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((SymmArraySSE<double>*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((SymmArraySSE<double>*) G__getstructoffset())->SSEPointer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SymmArraySSE<double>*) G__getstructoffset())->SSESize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SymmArraySSE<double>*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<double>*) G__getstructoffset())->ZeroExtraElements();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmArraySSE<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArraySSE<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmArraySSE<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmArraySSE<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmArraySSE<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArraySSE<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArraySSE<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmArraySSE<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_959_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmArraySSE<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmArraySSE<double> G__TSymmArraySSElEdoublegR;
static int G__wave_dict_959_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmArraySSE<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmArraySSE<double>*) (soff+(sizeof(SymmArraySSE<double>)*i)))->~G__TSymmArraySSElEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmArraySSE<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmArraySSE<double>*) (soff))->~G__TSymmArraySSElEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmObjArray<SymmArray<int> > */
static int G__wave_dict_960_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArray<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmObjArray<SymmArray<int> >((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmObjArray<SymmArray<int> >((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArray<int> >[n];
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArray<int> >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArray<int> >;
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArray<int> >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArray<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmObjArray<SymmArray<int> >(*(SymmObjArray<SymmArray<int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmObjArray<SymmArray<int> >(*(SymmObjArray<SymmArray<int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmObjArray<SymmArray<int> >& obj = ((SymmObjArray<SymmArray<int> >*) G__getstructoffset())->operator=(*(SymmObjArray<SymmArray<int> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<int> >*) G__getstructoffset())->Resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<int> >*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<int> >*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArray<int>& obj = ((SymmObjArray<SymmArray<int> >*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((SymmObjArray<SymmArray<int> >*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmObjArray<SymmArray<int> >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArray<int> >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmObjArray<SymmArray<int> >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmObjArray<SymmArray<int> >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<int> >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArray<int> >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArray<int> >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArray<int> >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_960_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArray<int> >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmObjArray<SymmArray<int> > G__TSymmObjArraylESymmArraylEintgRsPgR;
static int G__wave_dict_960_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmObjArray<SymmArray<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmObjArray<SymmArray<int> >*) (soff+(sizeof(SymmObjArray<SymmArray<int> >)*i)))->~G__TSymmObjArraylESymmArraylEintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmObjArray<SymmArray<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmObjArray<SymmArray<int> >*) (soff))->~G__TSymmObjArraylESymmArraylEintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmObjArray<SymmArray<float> > */
static int G__wave_dict_961_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArray<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmObjArray<SymmArray<float> >((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmObjArray<SymmArray<float> >((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArray<float> >[n];
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArray<float> >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArray<float> >;
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArray<float> >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArray<float> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmObjArray<SymmArray<float> >(*(SymmObjArray<SymmArray<float> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmObjArray<SymmArray<float> >(*(SymmObjArray<SymmArray<float> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmObjArray<SymmArray<float> >& obj = ((SymmObjArray<SymmArray<float> >*) G__getstructoffset())->operator=(*(SymmObjArray<SymmArray<float> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<float> >*) G__getstructoffset())->Resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<float> >*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<float> >*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArray<float>& obj = ((SymmObjArray<SymmArray<float> >*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((SymmObjArray<SymmArray<float> >*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmObjArray<SymmArray<float> >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArray<float> >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmObjArray<SymmArray<float> >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmObjArray<SymmArray<float> >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<float> >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArray<float> >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArray<float> >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArray<float> >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_961_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArray<float> >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmObjArray<SymmArray<float> > G__TSymmObjArraylESymmArraylEfloatgRsPgR;
static int G__wave_dict_961_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmObjArray<SymmArray<float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmObjArray<SymmArray<float> >*) (soff+(sizeof(SymmObjArray<SymmArray<float> >)*i)))->~G__TSymmObjArraylESymmArraylEfloatgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmObjArray<SymmArray<float> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmObjArray<SymmArray<float> >*) (soff))->~G__TSymmObjArraylESymmArraylEfloatgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmObjArray<SymmArray<double> > */
static int G__wave_dict_962_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArray<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmObjArray<SymmArray<double> >((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmObjArray<SymmArray<double> >((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArray<double> >[n];
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArray<double> >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArray<double> >;
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArray<double> >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArray<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmObjArray<SymmArray<double> >(*(SymmObjArray<SymmArray<double> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmObjArray<SymmArray<double> >(*(SymmObjArray<SymmArray<double> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmObjArray<SymmArray<double> >& obj = ((SymmObjArray<SymmArray<double> >*) G__getstructoffset())->operator=(*(SymmObjArray<SymmArray<double> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<double> >*) G__getstructoffset())->Resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<double> >*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<double> >*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArray<double>& obj = ((SymmObjArray<SymmArray<double> >*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((SymmObjArray<SymmArray<double> >*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmObjArray<SymmArray<double> >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArray<double> >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmObjArray<SymmArray<double> >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmObjArray<SymmArray<double> >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArray<double> >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArray<double> >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArray<double> >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArray<double> >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_962_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArray<double> >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmObjArray<SymmArray<double> > G__TSymmObjArraylESymmArraylEdoublegRsPgR;
static int G__wave_dict_962_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmObjArray<SymmArray<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmObjArray<SymmArray<double> >*) (soff+(sizeof(SymmObjArray<SymmArray<double> >)*i)))->~G__TSymmObjArraylESymmArraylEdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmObjArray<SymmArray<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmObjArray<SymmArray<double> >*) (soff))->~G__TSymmObjArraylESymmArraylEdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmObjArray<SymmArraySSE<int> > */
static int G__wave_dict_963_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArraySSE<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmObjArray<SymmArraySSE<int> >((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmObjArray<SymmArraySSE<int> >((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArraySSE<int> >[n];
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArraySSE<int> >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArraySSE<int> >;
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArraySSE<int> >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArraySSE<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmObjArray<SymmArraySSE<int> >(*(SymmObjArray<SymmArraySSE<int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmObjArray<SymmArraySSE<int> >(*(SymmObjArray<SymmArraySSE<int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmObjArray<SymmArraySSE<int> >& obj = ((SymmObjArray<SymmArraySSE<int> >*) G__getstructoffset())->operator=(*(SymmObjArray<SymmArraySSE<int> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<int> >*) G__getstructoffset())->Resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<int> >*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<int> >*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArraySSE<int>& obj = ((SymmObjArray<SymmArraySSE<int> >*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((SymmObjArray<SymmArraySSE<int> >*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmObjArray<SymmArraySSE<int> >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArraySSE<int> >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmObjArray<SymmArraySSE<int> >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmObjArray<SymmArraySSE<int> >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<int> >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArraySSE<int> >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArraySSE<int> >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArraySSE<int> >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_963_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArraySSE<int> >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmObjArray<SymmArraySSE<int> > G__TSymmObjArraylESymmArraySSElEintgRsPgR;
static int G__wave_dict_963_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmObjArray<SymmArraySSE<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmObjArray<SymmArraySSE<int> >*) (soff+(sizeof(SymmObjArray<SymmArraySSE<int> >)*i)))->~G__TSymmObjArraylESymmArraySSElEintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmObjArray<SymmArraySSE<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmObjArray<SymmArraySSE<int> >*) (soff))->~G__TSymmObjArraylESymmArraySSElEintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SymmObjArray<SymmArraySSE<double> > */
static int G__wave_dict_964_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArraySSE<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SymmObjArray<SymmArraySSE<double> >((unsigned int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SymmObjArray<SymmArraySSE<double> >((unsigned int) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArraySSE<double> >[n];
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArraySSE<double> >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SymmObjArray<SymmArraySSE<double> >;
       } else {
         p = new((void*) gvp) SymmObjArray<SymmArraySSE<double> >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SymmObjArray<SymmArraySSE<double> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SymmObjArray<SymmArraySSE<double> >(*(SymmObjArray<SymmArraySSE<double> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SymmObjArray<SymmArraySSE<double> >(*(SymmObjArray<SymmArraySSE<double> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmObjArray<SymmArraySSE<double> >& obj = ((SymmObjArray<SymmArraySSE<double> >*) G__getstructoffset())->operator=(*(SymmObjArray<SymmArraySSE<double> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<double> >*) G__getstructoffset())->Resize((unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<double> >*) G__getstructoffset())->Write((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<double> >*) G__getstructoffset())->Read((FILE*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArraySSE<double>& obj = ((SymmObjArray<SymmArraySSE<double> >*) G__getstructoffset())->operator[]((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((SymmObjArray<SymmArraySSE<double> >*) G__getstructoffset())->Last());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SymmObjArray<SymmArraySSE<double> >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArraySSE<double> >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SymmObjArray<SymmArraySSE<double> >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SymmObjArray<SymmArraySSE<double> >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SymmObjArray<SymmArraySSE<double> >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArraySSE<double> >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArraySSE<double> >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SymmObjArray<SymmArraySSE<double> >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_964_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SymmObjArray<SymmArraySSE<double> >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SymmObjArray<SymmArraySSE<double> > G__TSymmObjArraylESymmArraySSElEdoublegRsPgR;
static int G__wave_dict_964_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SymmObjArray<SymmArraySSE<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SymmObjArray<SymmArraySSE<double> >*) (soff+(sizeof(SymmObjArray<SymmArraySSE<double> >)*i)))->~G__TSymmObjArraylESymmArraySSElEdoublegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SymmObjArray<SymmArraySSE<double> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SymmObjArray<SymmArraySSE<double> >*) (soff))->~G__TSymmObjArraylESymmArraySSElEdoublegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SSeries<float> */
static int G__wave_dict_965_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SSeries<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SSeries<float>[n];
     } else {
       p = new((void*) gvp) SSeries<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SSeries<float>;
     } else {
       p = new((void*) gvp) SSeries<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SSeries<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SSeries<float>(*(Wavelet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SSeries<float>(*(Wavelet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SSeries<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SSeries<float>(*(wavearray<float>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) SSeries<float>(*(wavearray<float>*) libp->para[0].ref, *(Wavelet*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SSeries<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SSeries<float>(*(WSeries<float>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SSeries<float>(*(WSeries<float>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<float>*) G__getstructoffset())->SetMap((WSeries<float>*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((SSeries<float>*) G__getstructoffset())->AddCore((size_t) G__int(libp->para[0]), (netcluster*) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((SSeries<float>*) G__getstructoffset())->AddCore((size_t) G__int(libp->para[0]), (netcluster*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((SSeries<float>*) G__getstructoffset())->SetHalo((double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((SSeries<float>*) G__getstructoffset())->SetHalo((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SSeries<float>*) G__getstructoffset())->SetHalo((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SSeries<float>*) G__getstructoffset())->SetHalo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((SSeries<float>*) G__getstructoffset())->GetHaloSlice((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((SSeries<float>*) G__getstructoffset())->GetHaloSlice());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<float>*) G__getstructoffset())->GetHaloLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SSeries<float>*) G__getstructoffset())->GetHaloDelay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((SSeries<float>*) G__getstructoffset())->GetSparseSize((bool) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((SSeries<float>*) G__getstructoffset())->GetSparseSize());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((SSeries<float>*) G__getstructoffset())->GetSTFdata((int) G__int(libp->para[0]), (SymmArraySSE<float>*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         wavearray<int>* pobj;
         wavearray<int> xobj = ((SSeries<float>*) G__getstructoffset())->GetSparseIndex((bool) G__int(libp->para[0]));
         pobj = new wavearray<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         wavearray<int>* pobj;
         wavearray<int> xobj = ((SSeries<float>*) G__getstructoffset())->GetSparseIndex();
         pobj = new wavearray<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<float>*) G__getstructoffset())->ResetSparseTable();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<float>*) G__getstructoffset())->UpdateSparseTable();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SSeries<float>*) G__getstructoffset())->Expand((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SSeries<float>*) G__getstructoffset())->Expand();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<float>*) G__getstructoffset())->Clean();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<float>*) G__getstructoffset())->Shrink();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<float>*) G__getstructoffset())->GetSlice((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<float>*) G__getstructoffset())->GetLayer((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((SSeries<float>*) G__getstructoffset())->Init((WSeries<float>*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SSeries<float>*) G__getstructoffset())->Init((WSeries<float>*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SSeries<float>*) G__getstructoffset())->Init();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<float>*) G__getstructoffset())->GetLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<float>*) G__getstructoffset())->GetSlices());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<float>*) G__getstructoffset())->GetFreqResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<float>*) G__getstructoffset())->GetTimeResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<float>*) G__getstructoffset())->GetMap00((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<float>*) G__getstructoffset())->GetMap90((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<float>*) G__getstructoffset())->GetMap00((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((SSeries<float>*) G__getstructoffset())->GetMap90((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<float>*) G__getstructoffset())->SetMap00((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<float>*) G__getstructoffset())->SetMap90((int) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<float>*) G__getstructoffset())->SetMap00((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<float>*) G__getstructoffset())->SetMap90((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (float) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((SSeries<float>*) G__getstructoffset())->Core((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((SSeries<float>*) G__getstructoffset())->Core((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<float>*) G__getstructoffset())->binarySearch((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]), (int) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SSeries<float>*) G__getstructoffset())->binarySearch((int*) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<float>*) G__getstructoffset())->CheckWaveletType(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SSeries<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SSeries<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SSeries<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SSeries<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SSeries<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SSeries<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SSeries<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SSeries<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_965_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SSeries<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__wave_dict_965_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SSeries<float>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SSeries<float>(*(SSeries<float>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SSeries<float> G__TSSerieslEfloatgR;
static int G__wave_dict_965_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SSeries<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SSeries<float>*) (soff+(sizeof(SSeries<float>)*i)))->~G__TSSerieslEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SSeries<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SSeries<float>*) (soff))->~G__TSSerieslEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__wave_dict_965_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SSeries<float>* dest = (SSeries<float>*) G__getstructoffset();
   *dest = *(SSeries<float>*) libp->para[0].ref;
   const SSeries<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > > */
static int G__wave_dict_967_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reference obj = ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->at((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_reference obj = ((const vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->at((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator* pobj;
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator xobj = ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->begin();
         pobj = new vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator* pobj;
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator xobj = ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->end();
         pobj = new vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reverse_iterator* pobj;
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reverse_iterator xobj = ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->rbegin();
         pobj = new vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reverse_iterator* pobj;
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reverse_iterator xobj = ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->rend();
         pobj = new vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->resize((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->resize((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[0]), *((SymmArraySSE<float>*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reference obj = ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->operator[]((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_reference obj = ((const vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->operator[]((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >[n];
     } else {
       p = new((void*) gvp) vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >;
     } else {
       p = new((void*) gvp) vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[0]), *(SymmArraySSE<float>*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[0]), *(SymmArraySSE<float>*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >(*(vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >(*(vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >(*((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_iterator*) G__int(libp->para[0])), *((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >(*((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_iterator*) G__int(libp->para[0])), *((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >& obj = ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->operator=(*(vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->reserve((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArraySSE<float>& obj = ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SymmArraySSE<float>& obj = ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->push_back(*(SymmArraySSE<float>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->swap(*(vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator* pobj;
         vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator xobj = ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->insert(*((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator*) G__int(libp->para[0])), *(SymmArraySSE<float>*) libp->para[1].ref);
         pobj = new vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->insert(*((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator*) G__int(libp->para[0])), *((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_iterator*) G__int(libp->para[1]))
, *((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->insert(*((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator*) G__int(libp->para[0])), (vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type) G__int(libp->para[1])
, *(SymmArraySSE<float>*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->erase(*((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->erase(*((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator*) G__int(libp->para[0])), *((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_967_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > > G__TvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR;
static int G__wave_dict_967_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) (soff+(sizeof(vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >)*i)))->~G__TvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*) (soff))->~G__TvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<WSeries<double>*,allocator<WSeries<double>*> > */
static int G__wave_dict_971_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WSeries<double>*,allocator<WSeries<double>*> >::reference obj = ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->at((vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WSeries<double>*,allocator<WSeries<double>*> >::const_reference obj = ((const vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->at((vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator* pobj;
         vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator xobj = ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->begin();
         pobj = new vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator* pobj;
         vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator xobj = ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->end();
         pobj = new vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WSeries<double>*,allocator<WSeries<double>*> >::reverse_iterator* pobj;
         vector<WSeries<double>*,allocator<WSeries<double>*> >::reverse_iterator xobj = ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->rbegin();
         pobj = new vector<WSeries<double>*,allocator<WSeries<double>*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WSeries<double>*,allocator<WSeries<double>*> >::reverse_iterator* pobj;
         vector<WSeries<double>*,allocator<WSeries<double>*> >::reverse_iterator xobj = ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->rend();
         pobj = new vector<WSeries<double>*,allocator<WSeries<double>*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->resize((vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->resize((vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[0]), (WSeries<double>*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WSeries<double>*,allocator<WSeries<double>*> >::reference obj = ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->operator[]((vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WSeries<double>*,allocator<WSeries<double>*> >::const_reference obj = ((const vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->operator[]((vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<WSeries<double>*,allocator<WSeries<double>*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<WSeries<double>*,allocator<WSeries<double>*> >[n];
     } else {
       p = new((void*) gvp) vector<WSeries<double>*,allocator<WSeries<double>*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<WSeries<double>*,allocator<WSeries<double>*> >;
     } else {
       p = new((void*) gvp) vector<WSeries<double>*,allocator<WSeries<double>*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<WSeries<double>*,allocator<WSeries<double>*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<WSeries<double>*,allocator<WSeries<double>*> >((vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(WSeries<double>**) libp->para[1].ref : *(WSeries<double>**) (void*) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) vector<WSeries<double>*,allocator<WSeries<double>*> >((vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(WSeries<double>**) libp->para[1].ref : *(WSeries<double>**) (void*) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<WSeries<double>*,allocator<WSeries<double>*> >((vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<WSeries<double>*,allocator<WSeries<double>*> >((vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<WSeries<double>*,allocator<WSeries<double>*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<WSeries<double>*,allocator<WSeries<double>*> >(*(vector<WSeries<double>*,allocator<WSeries<double>*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<WSeries<double>*,allocator<WSeries<double>*> >(*(vector<WSeries<double>*,allocator<WSeries<double>*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<WSeries<double>*,allocator<WSeries<double>*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<WSeries<double>*,allocator<WSeries<double>*> >(*((vector<WSeries<double>*,allocator<WSeries<double>*> >::const_iterator*) G__int(libp->para[0])), *((vector<WSeries<double>*,allocator<WSeries<double>*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<WSeries<double>*,allocator<WSeries<double>*> >(*((vector<WSeries<double>*,allocator<WSeries<double>*> >::const_iterator*) G__int(libp->para[0])), *((vector<WSeries<double>*,allocator<WSeries<double>*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<WSeries<double>*,allocator<WSeries<double>*> >& obj = ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->operator=(*(vector<WSeries<double>*,allocator<WSeries<double>*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->reserve((vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         WSeries<double>*& obj = ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         WSeries<double>*& obj = ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(WSeries<double>**) libp->para[0].ref : *(WSeries<double>**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->swap(*(vector<WSeries<double>*,allocator<WSeries<double>*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator* pobj;
         vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator xobj = ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->insert(*((vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(WSeries<double>**) libp->para[1].ref : *(WSeries<double>**) (void*) (&G__Mlong(libp->para[1])));
         pobj = new vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->insert(*((vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator*) G__int(libp->para[0])), *((vector<WSeries<double>*,allocator<WSeries<double>*> >::const_iterator*) G__int(libp->para[1]))
, *((vector<WSeries<double>*,allocator<WSeries<double>*> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->insert(*((vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator*) G__int(libp->para[0])), (vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(WSeries<double>**) libp->para[2].ref : *(WSeries<double>**) (void*) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->erase(*((vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->erase(*((vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator*) G__int(libp->para[0])), *((vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict_971_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<WSeries<double>*,allocator<WSeries<double>*> > G__TvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR;
static int G__wave_dict_971_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<WSeries<double>*,allocator<WSeries<double>*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) (soff+(sizeof(vector<WSeries<double>*,allocator<WSeries<double>*> >)*i)))->~G__TvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<WSeries<double>*,allocator<WSeries<double>*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<WSeries<double>*,allocator<WSeries<double>*> >*) (soff))->~G__TvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */
static int G__wave_dict__0_1824(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) Lagrange((const int) G__int(libp->para[0]), (const int) G__int(libp->para[1])
, (const double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_1825(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) signPDF((const size_t) G__int(libp->para[0]), (const size_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_1826(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) gammaCLa((double) G__double(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_1827(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) gammaCL((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_1828(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) logNormCL((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) logNormCL((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) logNormCL((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) logNormCL((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_1829(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) logNormArg((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) logNormArg((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) logNormArg((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) logNormArg((double) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_1830(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      fLagrange((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_1831(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) Gamma((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_1832(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) Gamma((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_1833(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) iGamma((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_2937(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GalacticToEquatorial((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_2938(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EquatorialToGalactic((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_2939(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EclipticToEquatorial((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_2940(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EquatorialToEcliptic((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_2941(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GeodeticToGeocentric((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4]), *(double*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_2943(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GeocentricToGeodetic((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, *(double*) G__Doubleref(&libp->para[4]), *(double*) G__Doubleref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_2944(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GetCartesianComponents((double*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_2945(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CwbToGeographic((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_2946(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GeographicToCwb((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_2947(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      CwbToCelestial((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      CwbToCelestial((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_2948(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      CelestialToCwb((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      CelestialToCwb((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]), *(double*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_3852(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const wavearray<double>& obj = operator>>(*(watplot*) libp->para[0].ref, *(wavearray<double>*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_3853(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const watplot& obj = operator>>(*(wavearray<double>*) libp->para[0].ref, *(watplot*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_3854(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = operator>>(*(watplot*) libp->para[0].ref, *(TString*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_3855(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         char*& obj = operator>>(*(watplot*) libp->para[0].ref, libp->para[1].ref ? *(char**) libp->para[1].ref : *(char**) (void*) (&G__Mlong(libp->para[1])));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_4097(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 67, (long) watversion((char) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) watversion());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_4574(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      waveAssign(*(wavearray<int>*) libp->para[0].ref, *(wavearray<float>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_4575(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      waveAssign(*(wavearray<int>*) libp->para[0].ref, *(wavearray<double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_4576(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      waveAssign(*(wavearray<float>*) libp->para[0].ref, *(wavearray<int>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_4577(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      waveAssign(*(wavearray<float>*) libp->para[0].ref, *(wavearray<double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_4578(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      waveAssign(*(wavearray<double>*) libp->para[0].ref, *(wavearray<float>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_4579(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      waveAssign(*(wavearray<double>*) libp->para[0].ref, *(wavearray<short>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_4580(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) Nevill((const double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (double*) G__int(libp->para[2]), (double*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__wave_dict__0_4581(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) Nevill((const double) G__double(libp->para[0]), (int) G__int(libp->para[1])
, (float*) G__int(libp->para[2]), (double*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}


/*********************************************************
* Member function Stub
*********************************************************/

/* slice */

/* Wavelet */

/* wavecomplex */

/* vector<int,allocator<int> > */

/* pixdata */

/* netpixel */

/* vector<pixdata,allocator<pixdata> > */

/* wavearray<float> */

/* wavearray<double> */

/* vector<wavearray<float>,allocator<wavearray<float> > > */

/* network */

/* clusterdata */

/* netcluster */

/* WSeries<double> */

/* WSeries<float> */

/* WaveDWT<float> */

/* SSeries<double> */

/* WaveDWT<double> */

/* vector<netpixel,allocator<netpixel> > */

/* vector<clusterdata,allocator<clusterdata> > */

/* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */

/* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */

/* wat::Alm_Base */

/* wat::Alm */

/* wat::Alm_Template<complex<double> > */

/* skymap */

/* wavearray<short> */

/* wavearray<int> */

/* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */

/* SymmArraySSE<float> */

/* delayFilter */

/* detectorParams */

/* detector */

/* vector<SSeries<double>,allocator<SSeries<double> > > */

/* vector<delayFilter,allocator<delayFilter> > */

/* monster */

/* WDM<double> */

/* SymmArray<double> */

/* SymmObjArray<SymmArraySSE<float> > */

/* waveSegment */

/* vector<detector*,allocator<detector*> > */

/* vector<netcluster,allocator<netcluster> > */

/* vector<string,allocator<string> > */

/* vector<waveSegment,allocator<waveSegment> > */

/* vector<WDM<double>*,allocator<WDM<double>*> > */

/* injection */

/* watplot */

/* vector<TGraph*,allocator<TGraph*> > */

/* wavepixel */

/* wavecluster */

/* wavecor */

/* WaveRDC */

/* wavearray<unsigned int> */

/* linefilter */

/* netevent */

/* regression */

/* wat::Time */

/* watconstants */

/* wavearray<long long> */

/* wavearray<long> */

/* Haar<float> */

/* Haar<double> */

/* Biorthogonal<float> */

/* Biorthogonal<double> */

/* Daubechies<float> */

/* Daubechies<double> */

/* Symlet<float> */

/* Symlet<double> */

/* Meyer<float> */

/* Meyer<double> */

/* WDM<float> */

/* SymmArray<int> */

/* SymmArray<float> */

/* SymmArraySSE<int> */

/* SymmArraySSE<double> */

/* SymmObjArray<SymmArray<int> > */

/* SymmObjArray<SymmArray<float> > */

/* SymmObjArray<SymmArray<double> > */

/* SymmObjArray<SymmArraySSE<int> > */

/* SymmObjArray<SymmArraySSE<double> > */

/* SSeries<float> */

/* vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > > */

/* vector<WSeries<double>*,allocator<WSeries<double>*> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncwave_dict {
 public:
  G__Sizep2memfuncwave_dict(): p(&G__Sizep2memfuncwave_dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncwave_dict::*p)();
};

size_t G__get_sizep2memfuncwave_dict()
{
  G__Sizep2memfuncwave_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancewave_dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_Wavelet))) {
     Wavelet *G__Lderived;
     G__Lderived=(Wavelet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_Wavelet),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_Wavelet),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_netpixel))) {
     netpixel *G__Lderived;
     G__Lderived=(netpixel*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_netpixel),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_netpixel),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR))) {
     wavearray<float> *G__Lderived;
     G__Lderived=(wavearray<float>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR))) {
     wavearray<double> *G__Lderived;
     G__Lderived=(wavearray<double>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_network))) {
     network *G__Lderived;
     G__Lderived=(network*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_network),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_network),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_clusterdata))) {
     clusterdata *G__Lderived;
     G__Lderived=(clusterdata*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_clusterdata),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_clusterdata),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_netcluster))) {
     netcluster *G__Lderived;
     G__Lderived=(netcluster*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_netcluster),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_netcluster),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR))) {
     WSeries<double> *G__Lderived;
     G__Lderived=(WSeries<double>*)0x1000;
     {
       wavearray<double> *G__Lpbase=(wavearray<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR))) {
     WSeries<float> *G__Lderived;
     G__Lderived=(WSeries<float>*)0x1000;
     {
       wavearray<float> *G__Lpbase=(wavearray<float>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR))) {
     WaveDWT<float> *G__Lderived;
     G__Lderived=(WaveDWT<float>*)0x1000;
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR))) {
     SSeries<double> *G__Lderived;
     G__Lderived=(SSeries<double>*)0x1000;
     {
       WSeries<double> *G__Lpbase=(WSeries<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       wavearray<double> *G__Lpbase=(wavearray<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR))) {
     WaveDWT<double> *G__Lderived;
     G__Lderived=(WaveDWT<double>*)0x1000;
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm))) {
     wat::Alm *G__Lderived;
     G__Lderived=(wat::Alm*)0x1000;
     {
       wat::Alm_Template<complex<double> > *G__Lpbase=(wat::Alm_Template<complex<double> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm),G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       wat::Alm_Base *G__Lpbase=(wat::Alm_Base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm),G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_Base),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR))) {
     wat::Alm_Template<complex<double> > *G__Lderived;
     G__Lderived=(wat::Alm_Template<complex<double> >*)0x1000;
     {
       wat::Alm_Base *G__Lpbase=(wat::Alm_Base*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR),G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_Base),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_skymap))) {
     skymap *G__Lderived;
     G__Lderived=(skymap*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_skymap),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_skymap),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR))) {
     wavearray<short> *G__Lderived;
     G__Lderived=(wavearray<short>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR))) {
     wavearray<int> *G__Lderived;
     G__Lderived=(wavearray<int>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR))) {
     SymmArraySSE<float> *G__Lderived;
     G__Lderived=(SymmArraySSE<float>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_detector))) {
     detector *G__Lderived;
     G__Lderived=(detector*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_detector),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_detector),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR))) {
     WDM<double> *G__Lderived;
     G__Lderived=(WDM<double>*)0x1000;
     {
       WaveDWT<double> *G__Lpbase=(WaveDWT<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR))) {
     SymmArray<double> *G__Lderived;
     G__Lderived=(SymmArray<double>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR))) {
     SymmObjArray<SymmArraySSE<float> > *G__Lderived;
     G__Lderived=(SymmObjArray<SymmArraySSE<float> >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_WaveRDC))) {
     WaveRDC *G__Lderived;
     G__Lderived=(WaveRDC*)0x1000;
     {
       wavearray<unsigned int> *G__Lpbase=(wavearray<unsigned int>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveRDC),G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveRDC),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveRDC),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR))) {
     wavearray<unsigned int> *G__Lderived;
     G__Lderived=(wavearray<unsigned int>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR))) {
     wavearray<long long> *G__Lderived;
     G__Lderived=(wavearray<long long>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR))) {
     wavearray<long> *G__Lderived;
     G__Lderived=(wavearray<long>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR))) {
     Haar<float> *G__Lderived;
     G__Lderived=(Haar<float>*)0x1000;
     {
       WaveDWT<float> *G__Lpbase=(WaveDWT<float>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR))) {
     Haar<double> *G__Lderived;
     G__Lderived=(Haar<double>*)0x1000;
     {
       WaveDWT<double> *G__Lpbase=(WaveDWT<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR))) {
     Biorthogonal<float> *G__Lderived;
     G__Lderived=(Biorthogonal<float>*)0x1000;
     {
       WaveDWT<float> *G__Lpbase=(WaveDWT<float>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR))) {
     Biorthogonal<double> *G__Lderived;
     G__Lderived=(Biorthogonal<double>*)0x1000;
     {
       WaveDWT<double> *G__Lpbase=(WaveDWT<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR))) {
     Daubechies<float> *G__Lderived;
     G__Lderived=(Daubechies<float>*)0x1000;
     {
       WaveDWT<float> *G__Lpbase=(WaveDWT<float>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR))) {
     Daubechies<double> *G__Lderived;
     G__Lderived=(Daubechies<double>*)0x1000;
     {
       WaveDWT<double> *G__Lpbase=(WaveDWT<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR))) {
     Symlet<float> *G__Lderived;
     G__Lderived=(Symlet<float>*)0x1000;
     {
       WaveDWT<float> *G__Lpbase=(WaveDWT<float>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR))) {
     Symlet<double> *G__Lderived;
     G__Lderived=(Symlet<double>*)0x1000;
     {
       WaveDWT<double> *G__Lpbase=(WaveDWT<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR))) {
     Meyer<float> *G__Lderived;
     G__Lderived=(Meyer<float>*)0x1000;
     {
       WaveDWT<float> *G__Lpbase=(WaveDWT<float>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR))) {
     Meyer<double> *G__Lderived;
     G__Lderived=(Meyer<double>*)0x1000;
     {
       WaveDWT<double> *G__Lpbase=(WaveDWT<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR))) {
     WDM<float> *G__Lderived;
     G__Lderived=(WDM<float>*)0x1000;
     {
       WaveDWT<float> *G__Lpbase=(WaveDWT<float>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       Wavelet *G__Lpbase=(Wavelet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_Wavelet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR))) {
     SymmArray<int> *G__Lderived;
     G__Lderived=(SymmArray<int>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR))) {
     SymmArray<float> *G__Lderived;
     G__Lderived=(SymmArray<float>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR))) {
     SymmArraySSE<int> *G__Lderived;
     G__Lderived=(SymmArraySSE<int>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR))) {
     SymmArraySSE<double> *G__Lderived;
     G__Lderived=(SymmArraySSE<double>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR))) {
     SymmObjArray<SymmArray<int> > *G__Lderived;
     G__Lderived=(SymmObjArray<SymmArray<int> >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR))) {
     SymmObjArray<SymmArray<float> > *G__Lderived;
     G__Lderived=(SymmObjArray<SymmArray<float> >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR))) {
     SymmObjArray<SymmArray<double> > *G__Lderived;
     G__Lderived=(SymmObjArray<SymmArray<double> >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR))) {
     SymmObjArray<SymmArraySSE<int> > *G__Lderived;
     G__Lderived=(SymmObjArray<SymmArraySSE<int> >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR))) {
     SymmObjArray<SymmArraySSE<double> > *G__Lderived;
     G__Lderived=(SymmObjArray<SymmArraySSE<double> >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR))) {
     SSeries<float> *G__Lderived;
     G__Lderived=(SSeries<float>*)0x1000;
     {
       WSeries<float> *G__Lpbase=(WSeries<float>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       wavearray<float> *G__Lpbase=(wavearray<float>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR),G__get_linked_tagnum(&G__wave_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablewave_dict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__wave_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__wave_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__wave_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__wave_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__wave_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__wave_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__wave_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__wave_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__wave_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("d_complex",117,G__get_linked_tagnum(&G__wave_dictLN_wavecomplex),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pixdata>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_pixdata),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_pixdata),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_pixdata),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_pixdata),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_pixdata),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<wavearray<float> >",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<netpixel>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_netpixel),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_netpixel),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_netpixel),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_netpixel),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_netpixel),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<clusterdata>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_clusterdata),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_clusterdata),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_clusterdata),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_clusterdata),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_clusterdata),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector_int>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector_float>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<float,allocator<float> > >",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vectorD",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vectorD>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SSeries<double> >",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<delayFilter>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_delayFilter),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_delayFilter),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_delayFilter),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_delayFilter),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_delayFilter),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<wavearray<double>*>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<xtalk>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlExtalkcOallocatorlExtalkgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlExtalkcOallocatorlExtalkgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlExtalkcOallocatorlExtalkgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlExtalkcOallocatorlExtalkgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlExtalkcOallocatorlExtalkgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixDSym",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__wave_dictLN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<detector*>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__wave_dictLN_detector),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_detector),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_detector),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__wave_dictLN_detector),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__wave_dictLN_detector),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<netcluster>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_netcluster),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_netcluster),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_netcluster),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_netcluster),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_netcluster),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_string),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_string),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_string),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_string),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_string),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<size_t>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<waveSegment>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_waveSegment),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_waveSegment),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_waveSegment),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_waveSegment),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_waveSegment),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<WDM<double>*>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<netpixel*>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TGraph*>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__wave_dictLN_TGraph),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_TGraph),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_TGraph),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__wave_dictLN_TGraph),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__wave_dictLN_TGraph),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH1F*>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETH1FmUcOallocatorlETH1FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETH1FmUcOallocatorlETH1FmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<wavepixel>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavepixelcOallocatorlEwavepixelgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavepixelcOallocatorlEwavepixelgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavepixelcOallocatorlEwavepixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavepixelcOallocatorlEwavepixelgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavepixelcOallocatorlEwavepixelgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector_int>",117,G__get_linked_tagnum(&G__wave_dictLN_listlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__wave_dictLN_listlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("waveShort",117,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("waveFloat",117,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("waveDouble",117,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("wavearray<wavereal>",117,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("WaveData",117,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<f_complex>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<complex<float> >",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<linedata>",117,G__get_linked_tagnum(&G__wave_dictLN_listlElinedatacOallocatorlElinedatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<WSeries<double> >",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<wavearray<int> >",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Wiener>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWienercOallocatorlEWienergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWienercOallocatorlEWienergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWienercOallocatorlEWienergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWienercOallocatorlEWienergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWienercOallocatorlEWienergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMatrixDSym>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMatrixTSym<double> >",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<wavearray<double> >",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("INT_4S",105,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("INT_4U",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("wavearray<Long64_t>",117,G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SymmArraySSE<float> >",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<WSeries<double>*>",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),1,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),257,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* slice */
static void G__setup_memvarslice(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_slice));
   { slice *p; p=(slice*)0x1000; if (p) { }
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,4,"_M_off=",0,"offset");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,4,"_M_sz=",0,"size");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,4,"_M_st=",0,"stride unit");
   }
   G__tag_memvar_reset();
}


   /* Wavelet */
static void G__setup_memvarWavelet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_Wavelet));
   { Wavelet *p; p=(Wavelet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_WaveType)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__wave_dictLN_WAVETYPE),-1,-1,1,"m_WaveType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_Border)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__wave_dictLN_BORDER),-1,-1,1,"m_Border=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_TreeType)-(long)(p)),105,0,0,-1,-1,-1,1,"m_TreeType=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_Level)-(long)(p)),105,0,0,-1,-1,-1,1,"m_Level=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_Layer)-(long)(p)),105,0,0,-1,-1,-1,1,"m_Layer=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_H)-(long)(p)),105,0,0,-1,-1,-1,1,"m_H=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_L)-(long)(p)),105,0,0,-1,-1,-1,1,"m_L=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_Heterodine)-(long)(p)),103,0,0,-1,-1,-1,1,"m_Heterodine=",0,"default is false");
   G__memvar_setup((void*)((long)(&p->m_Parity)-(long)(p)),103,0,0,-1,-1,-1,1,"m_Parity=",0,"default is true (0 delay for symmetric wavelets)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* wavecomplex */
static void G__setup_memvarwavecomplex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_wavecomplex));
   { wavecomplex *p; p=(wavecomplex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->re)-(long)(p)),100,0,0,-1,-1,-1,1,"re=",0,"real");
   G__memvar_setup((void*)((long)(&p->im)-(long)(p)),100,0,0,-1,-1,-1,1,"im=",0,"imagenary");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<int,allocator<int> > */
static void G__setup_memvarvectorlEintcOallocatorlEintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   { vector<int,allocator<int> > *p; p=(vector<int,allocator<int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pixdata */
static void G__setup_memvarpixdata(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_pixdata));
   { pixdata *p; p=(pixdata*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->noiserms)-(long)(p)),100,0,0,-1,-1,-1,1,"noiserms=",0,"average noise rms");
   G__memvar_setup((void*)((long)(&p->wave)-(long)(p)),100,0,0,-1,-1,-1,1,"wave=",0,"vector of 00 pixel's wavelet amplitudes");
   G__memvar_setup((void*)((long)(&p->w_90)-(long)(p)),100,0,0,-1,-1,-1,1,"w_90=",0,"vector of 90 pixel's wavelet amplitudes");
   G__memvar_setup((void*)((long)(&p->asnr)-(long)(p)),100,0,0,-1,-1,-1,1,"asnr=",0,"vector of 00 pixel's whitened amplitudes");
   G__memvar_setup((void*)((long)(&p->a_90)-(long)(p)),100,0,0,-1,-1,-1,1,"a_90=",0,"vector of 90 pixel's whitened amplitudes");
   G__memvar_setup((void*)((long)(&p->rank)-(long)(p)),102,0,0,-1,-1,-1,1,"rank=",0,"vector of pixel's rank amplitudes");
   G__memvar_setup((void*)((long)(&p->index)-(long)(p)),105,0,0,-1,-1,-1,1,"index=",0,"index in wavearray");
   }
   G__tag_memvar_reset();
}


   /* netpixel */
static void G__setup_memvarnetpixel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_netpixel));
   { netpixel *p; p=(netpixel*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->clusterID)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"clusterID=",0,"cluster ID");
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"time=",0,"time index for master detector");
   G__memvar_setup((void*)((long)(&p->frequency)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"frequency=",0,"frequency index (layer)");
   G__memvar_setup((void*)((long)(&p->layers)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"layers=",0,"number of frequency layers");
   G__memvar_setup((void*)((long)(&p->rate)-(long)(p)),102,0,0,-1,-1,-1,1,"rate=",0,"wavelet layer rate");
   G__memvar_setup((void*)((long)(&p->likelihood)-(long)(p)),102,0,0,-1,-1,-1,1,"likelihood=",0,"likelihood");
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),102,0,0,-1,-1,-1,1,"theta=",0,"source angle theta index");
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,"source angle phi index");
   G__memvar_setup((void*)((long)(&p->ellipticity)-(long)(p)),102,0,0,-1,-1,-1,1,"ellipticity=",0,"waveform ellipticity");
   G__memvar_setup((void*)((long)(&p->polarisation)-(long)(p)),102,0,0,-1,-1,-1,1,"polarisation=",0,"waveform polarisation");
   G__memvar_setup((void*)((long)(&p->core)-(long)(p)),103,0,0,-1,-1,-1,1,"core=",0,"pixel type: true - core , false - halo");
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR),G__defined_typename("vector<pixdata>"),-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdAmp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR),G__defined_typename("vector<wavearray<float> >"),-1,1,"tdAmp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->neighbors)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"neighbors=",0,"vector of links to neighbors");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<pixdata,allocator<pixdata> > */
static void G__setup_memvarvectorlEpixdatacOallocatorlEpixdatagRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   { vector<pixdata,allocator<pixdata> > *p; p=(vector<pixdata,allocator<pixdata> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* wavearray<float> */
static void G__setup_memvarwavearraylEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR));
   { wavearray<float> *p; p=(wavearray<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),70,0,0,-1,-1,-1,1,"data=",0,"! data array");
   G__memvar_setup((void*)((long)(&p->Size)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"Size=",0,"number of elements in the data array");
   G__memvar_setup((void*)((long)(&p->Rate)-(long)(p)),100,0,0,-1,-1,-1,1,"Rate=",0,"data sampling rate");
   G__memvar_setup((void*)((long)(&p->Start)-(long)(p)),100,0,0,-1,-1,-1,1,"Start=",0,"start time");
   G__memvar_setup((void*)((long)(&p->Stop)-(long)(p)),100,0,0,-1,-1,-1,1,"Stop=",0,"end time");
   G__memvar_setup((void*)((long)(&p->Edge)-(long)(p)),100,0,0,-1,-1,-1,1,"Edge=",0,"buffer length in seconds in the beginning and the end ");
   G__memvar_setup((void*)((long)(&p->Slice)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_slice),-1,-1,1,"Slice=",0,"the data slice structure");
   G__memvar_setup((void*)((long)(&p->fftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTRealComplex),-1,-1,1,"fftw=",0,"! pointer to direct  fftw object");
   G__memvar_setup((void*)((long)(&p->ifftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTComplexReal),-1,-1,1,"ifftw=",0,"! pointer to inverse fftw object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* wavearray<double> */
static void G__setup_memvarwavearraylEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR));
   { wavearray<double> *p; p=(wavearray<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),68,0,0,-1,-1,-1,1,"data=",0,"! data array");
   G__memvar_setup((void*)((long)(&p->Size)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"Size=",0,"number of elements in the data array");
   G__memvar_setup((void*)((long)(&p->Rate)-(long)(p)),100,0,0,-1,-1,-1,1,"Rate=",0,"data sampling rate");
   G__memvar_setup((void*)((long)(&p->Start)-(long)(p)),100,0,0,-1,-1,-1,1,"Start=",0,"start time");
   G__memvar_setup((void*)((long)(&p->Stop)-(long)(p)),100,0,0,-1,-1,-1,1,"Stop=",0,"end time");
   G__memvar_setup((void*)((long)(&p->Edge)-(long)(p)),100,0,0,-1,-1,-1,1,"Edge=",0,"buffer length in seconds in the beginning and the end ");
   G__memvar_setup((void*)((long)(&p->Slice)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_slice),-1,-1,1,"Slice=",0,"the data slice structure");
   G__memvar_setup((void*)((long)(&p->fftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTRealComplex),-1,-1,1,"fftw=",0,"! pointer to direct  fftw object");
   G__memvar_setup((void*)((long)(&p->ifftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTComplexReal),-1,-1,1,"ifftw=",0,"! pointer to inverse fftw object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<wavearray<float>,allocator<wavearray<float> > > */
static void G__setup_memvarvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   { vector<wavearray<float>,allocator<wavearray<float> > > *p; p=(vector<wavearray<float>,allocator<wavearray<float> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* network */
static void G__setup_memvarnetwork(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_network));
   { network *p; p=(network*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nRun)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"nRun=",0,"run number");
   G__memvar_setup((void*)((long)(&p->nLag)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"nLag=",0,"number of time lags");
   G__memvar_setup((void*)((long)(&p->nSky)-(long)(p)),108,0,0,-1,-1,-1,1,"nSky=",0,"number of pixels for sky probability area");
   G__memvar_setup((void*)((long)(&p->mIFO)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"mIFO=",0,"master IFO");
   G__memvar_setup((void*)((long)(&p->rTDF)-(long)(p)),100,0,0,-1,-1,-1,1,"rTDF=",0,"effective rate of time-delay filter");
   G__memvar_setup((void*)((long)(&p->Step)-(long)(p)),100,0,0,-1,-1,-1,1,"Step=",0,"time shift step");
   G__memvar_setup((void*)((long)(&p->Edge)-(long)(p)),100,0,0,-1,-1,-1,1,"Edge=",0,"time offset at the boundaries");
   G__memvar_setup((void*)((long)(&p->gNET)-(long)(p)),100,0,0,-1,-1,-1,1,"gNET=",0,"network sensitivity");
   G__memvar_setup((void*)((long)(&p->aNET)-(long)(p)),100,0,0,-1,-1,-1,1,"aNET=",0,"network alignment");
   G__memvar_setup((void*)((long)(&p->iNET)-(long)(p)),100,0,0,-1,-1,-1,1,"iNET=",0,"network index");
   G__memvar_setup((void*)((long)(&p->eCOR)-(long)(p)),100,0,0,-1,-1,-1,1,"eCOR=",0,"correlation energy");
   G__memvar_setup((void*)((long)(&p->norm)-(long)(p)),100,0,0,-1,-1,-1,1,"norm=",0,"norm factor");
   G__memvar_setup((void*)((long)(&p->e2or)-(long)(p)),100,0,0,-1,-1,-1,1,"e2or=",0,"threshold on double OR energy");
   G__memvar_setup((void*)((long)(&p->acor)-(long)(p)),100,0,0,-1,-1,-1,1,"acor=",0,"threshold on coherent pixel energy");
   G__memvar_setup((void*)((long)(&p->pOUT)-(long)(p)),103,0,0,-1,-1,-1,1,"pOUT=",0,"true/false printout flag");
   G__memvar_setup((void*)((long)(&p->EFEC)-(long)(p)),103,0,0,-1,-1,-1,1,"EFEC=",0,"true/false - EFEC/selestial coordinate system");
   G__memvar_setup((void*)((long)(&p->tYPe)-(long)(p)),99,0,0,-1,-1,-1,1,"tYPe=",0,"likelihood type");
   G__memvar_setup((void*)((long)(&p->local)-(long)(p)),103,0,0,-1,-1,-1,1,"local=",0,"true/false - local/global normalization");
   G__memvar_setup((void*)((long)(&p->optim)-(long)(p)),103,0,0,-1,-1,-1,1,"optim=",0,"true/false - process optimal/all resolutions");
   G__memvar_setup((void*)((long)(&p->delta)-(long)(p)),100,0,0,-1,-1,-1,1,"delta=",0,"weak constraint parameter:");
   G__memvar_setup((void*)((long)(&p->gamma)-(long)(p)),100,0,0,-1,-1,-1,1,"gamma=",0,"hard constraint parameter:");
   G__memvar_setup((void*)((long)(&p->precision)-(long)(p)),100,0,0,-1,-1,-1,1,"precision=",0,"precision of energy calculation");
   G__memvar_setup((void*)((long)(&p->pSigma)-(long)(p)),100,0,0,-1,-1,-1,1,"pSigma=",0,"integration limit in sigmas for probability");
   G__memvar_setup((void*)((long)(&p->penalty)-(long)(p)),100,0,0,-1,-1,-1,1,"penalty=",0,"penalty factor:");
   G__memvar_setup((void*)((long)(&p->netCC)-(long)(p)),100,0,0,-1,-1,-1,1,"netCC=",0,"threshold on netcc:");
   G__memvar_setup((void*)((long)(&p->netRHO)-(long)(p)),100,0,0,-1,-1,-1,1,"netRHO=",0,"threshold on rho:");
   G__memvar_setup((void*)((long)(&p->eDisbalance)-(long)(p)),103,0,0,-1,-1,-1,1,"eDisbalance=",0,"true/false - enable/disable energy disbalance ECED");
   G__memvar_setup((void*)((long)(&p->MRA)-(long)(p)),103,0,0,-1,-1,-1,1,"MRA=",0,"true/false - used/not-used likelihoodMRA");
   G__memvar_setup((void*)((long)(&p->NDM)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vectorD>"),-1,1,"NDM=",0,"network data matrix");
   G__memvar_setup((void*)((long)(&p->whp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),-1,-1,1,"whp=",0,"+ polarization");
   G__memvar_setup((void*)((long)(&p->whx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),-1,-1,1,"whx=",0,"x polarization");
   G__memvar_setup((void*)((long)(&p->ifoList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR),G__defined_typename("vector<detector*>"),-1,1,"ifoList=",0,"detectors");
   G__memvar_setup((void*)((long)(&p->ifoName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEcharmUcOallocatorlEcharmUgRsPgR),G__defined_typename("vector<char*>"),-1,1,"ifoName=",0,"detector's names");
   G__memvar_setup((void*)((long)(&p->wc_List)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR),G__defined_typename("vector<netcluster>"),-1,1,"wc_List=",0,"netcluster structures for time shifts");
   G__memvar_setup((void*)((long)(&p->livTime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"livTime=",0,"live time for time shifts");
   G__memvar_setup((void*)((long)(&p->mdcList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,1,"mdcList=",0,"list of injections");
   G__memvar_setup((void*)((long)(&p->mdcType)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,1,"mdcType=",0,"list of injection types");
   G__memvar_setup((void*)((long)(&p->mdcTime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"mdcTime=",0,"gps time of selected injections");
   G__memvar_setup((void*)((long)(&p->mdc__ID)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR),G__defined_typename("vector<size_t>"),-1,1,"mdc__ID=",0,"ID of selected injections");
   G__memvar_setup((void*)((long)(&p->segList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR),G__defined_typename("vector<waveSegment>"),-1,1,"segList=",0,"DQ segment list");
   G__memvar_setup((void*)((long)(&p->wdmList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR),G__defined_typename("vector<WDM<double>*>"),-1,1,"wdmList=",0,"! list of wdm tranformations  ");
   G__memvar_setup((void*)((long)(&p->nSensitivity)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nSensitivity=",0,"network sensitivity");
   G__memvar_setup((void*)((long)(&p->nAlignment)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nAlignment=",0,"network alignment factor");
   G__memvar_setup((void*)((long)(&p->nCorrelation)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nCorrelation=",0,"network correlation coefficient");
   G__memvar_setup((void*)((long)(&p->nLikelihood)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nLikelihood=",0,"network likelihood");
   G__memvar_setup((void*)((long)(&p->nNullEnergy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nNullEnergy=",0,"network null energy");
   G__memvar_setup((void*)((long)(&p->nPenalty)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nPenalty=",0,"signal * noise penalty factor");
   G__memvar_setup((void*)((long)(&p->nCorrEnergy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nCorrEnergy=",0,"reduced correlated energy");
   G__memvar_setup((void*)((long)(&p->nNetIndex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nNetIndex=",0,"network index");
   G__memvar_setup((void*)((long)(&p->nDisbalance)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nDisbalance=",0,"energy disbalance");
   G__memvar_setup((void*)((long)(&p->nSkyStat)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nSkyStat=",0,"sky optimization statistic");
   G__memvar_setup((void*)((long)(&p->nEllipticity)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nEllipticity=",0,"waveform ellipticity");
   G__memvar_setup((void*)((long)(&p->nPolarisation)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nPolarisation=",0,"polarisation angle");
   G__memvar_setup((void*)((long)(&p->nProbability)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"nProbability=",0,"probability skymap");
   G__memvar_setup((void*)((long)(&p->pixeLHood)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),-1,-1,1,"pixeLHood=",0,"pixel likelihood statistic");
   G__memvar_setup((void*)((long)(&p->pixeLNull)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),-1,-1,1,"pixeLNull=",0,"pixel null statistic");
   G__memvar_setup((void*)((long)(&p->filter)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR),G__defined_typename("vector<delayFilter>"),-1,1,"filter=",0,"delay filter (1G)");
   G__memvar_setup((void*)((long)(&p->filter90)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR),G__defined_typename("vector<delayFilter>"),-1,1,"filter90=",0,"phase shifted delay filter (1G)");
   G__memvar_setup((void*)((long)(&p->index)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR),-1,-1,1,"index=",0,"theta, phi mask index array");
   G__memvar_setup((void*)((long)(&p->skyMask)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR),-1,-1,1,"skyMask=",0,"index array for setting sky mask");
   G__memvar_setup((void*)((long)(&p->skyMaskCC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"skyMaskCC=",0,"index array for setting sky mask Celestial Coordinates");
   G__memvar_setup((void*)((long)(&p->skyHole)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"skyHole=",0,"static sky mask describing \"holes\"");
   G__memvar_setup((void*)((long)(&p->veto)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR),-1,-1,1,"veto=",0,"veto array for pixel selection");
   G__memvar_setup((void*)((long)(&p->skyProb)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"skyProb=",0,"sky probability");
   G__memvar_setup((void*)((long)(&p->skyENRG)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"skyENRG=",0,"energy skymap");
   G__memvar_setup((void*)((long)(&p->pList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgR),G__defined_typename("vector<netpixel*>"),-1,1,"pList=",0,"! list of pixel pointers for MRA");
   G__memvar_setup((void*)((long)(&p->wdmMRA)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_monster),-1,-1,1,"wdmMRA=",0,"! wdm multi-resolution analysis");
   G__memvar_setup((void*)((long)(&p->a_00)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"a_00=",0,"! buffer for cluster sky 00 amplitude");
   G__memvar_setup((void*)((long)(&p->a_90)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"a_90=",0,"! buffer for cluster sky 90 amplitudes");
   G__memvar_setup((void*)((long)(&p->rNRG)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"rNRG=",0,"! buffers for cluster residual energy ");
   G__memvar_setup((void*)((long)(&p->pNRG)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"pNRG=",0,"! buffers for cluster MRA energy ");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_WDM=",0,"true/false - used/not-used WDM");
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,4,"_LIKE=",0,"X=likelihoodX, M=likelihoodM, ''=others");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* clusterdata */
static void G__setup_memvarclusterdata(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_clusterdata));
   { clusterdata *p; p=(clusterdata*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->energy)-(long)(p)),102,0,0,-1,-1,-1,1,"energy=",0,"total cluster energy");
   G__memvar_setup((void*)((long)(&p->Eallres)-(long)(p)),102,0,0,-1,-1,-1,1,"Eallres=",0,"cluster energy in all resolutions");
   G__memvar_setup((void*)((long)(&p->likenet)-(long)(p)),102,0,0,-1,-1,-1,1,"likenet=",0,"signal energy");
   G__memvar_setup((void*)((long)(&p->netecor)-(long)(p)),102,0,0,-1,-1,-1,1,"netecor=",0,"network coherent energy");
   G__memvar_setup((void*)((long)(&p->netnull)-(long)(p)),102,0,0,-1,-1,-1,1,"netnull=",0,"null energy in the sky loop");
   G__memvar_setup((void*)((long)(&p->netED)-(long)(p)),102,0,0,-1,-1,-1,1,"netED=",0,"energy disbalance");
   G__memvar_setup((void*)((long)(&p->isoED)-(long)(p)),102,0,0,-1,-1,-1,1,"isoED=",0,"energy disbalance with isolation correction");
   G__memvar_setup((void*)((long)(&p->skycc)-(long)(p)),102,0,0,-1,-1,-1,1,"skycc=",0,"network cc from the sky loop");
   G__memvar_setup((void*)((long)(&p->isocc)-(long)(p)),102,0,0,-1,-1,-1,1,"isocc=",0,"netcc wit isolation correction");
   G__memvar_setup((void*)((long)(&p->subnet)-(long)(p)),102,0,0,-1,-1,-1,1,"subnet=",0,"first subNetCut statistic");
   G__memvar_setup((void*)((long)(&p->SUBNET)-(long)(p)),102,0,0,-1,-1,-1,1,"SUBNET=",0,"second subNetCut statistic");
   G__memvar_setup((void*)((long)(&p->skyStat)-(long)(p)),102,0,0,-1,-1,-1,1,"skyStat=",0,"localization statistic");
   G__memvar_setup((void*)((long)(&p->netRHO)-(long)(p)),102,0,0,-1,-1,-1,1,"netRHO=",0,"coherent SNR per detector");
   G__memvar_setup((void*)((long)(&p->netrho)-(long)(p)),102,0,0,-1,-1,-1,1,"netrho=",0,"reduced coherent SNR per detector");
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),102,0,0,-1,-1,-1,1,"theta=",0,"source angle theta index");
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),102,0,0,-1,-1,-1,1,"phi=",0,"source angle phi index");
   G__memvar_setup((void*)((long)(&p->iota)-(long)(p)),102,0,0,-1,-1,-1,1,"iota=",0,"inclination angle ");
   G__memvar_setup((void*)((long)(&p->polarisation)-(long)(p)),102,0,0,-1,-1,-1,1,"polarisation=",0,"waveform polarisation");
   G__memvar_setup((void*)((long)(&p->ellipticity)-(long)(p)),102,0,0,-1,-1,-1,1,"ellipticity=",0,"waveform ellipticity");
   G__memvar_setup((void*)((long)(&p->cTime)-(long)(p)),102,0,0,-1,-1,-1,1,"cTime=",0,"supercluster central time");
   G__memvar_setup((void*)((long)(&p->cFreq)-(long)(p)),102,0,0,-1,-1,-1,1,"cFreq=",0,"supercluster central frequency");
   G__memvar_setup((void*)((long)(&p->gNET)-(long)(p)),102,0,0,-1,-1,-1,1,"gNET=",0,"network acceptance");
   G__memvar_setup((void*)((long)(&p->aNET)-(long)(p)),102,0,0,-1,-1,-1,1,"aNET=",0,"network alignment");
   G__memvar_setup((void*)((long)(&p->iNET)-(long)(p)),102,0,0,-1,-1,-1,1,"iNET=",0,"network index");
   G__memvar_setup((void*)((long)(&p->tmrgr)-(long)(p)),102,0,0,-1,-1,-1,1,"tmrgr=",0,"merger time");
   G__memvar_setup((void*)((long)(&p->tmrgrerr)-(long)(p)),102,0,0,-1,-1,-1,1,"tmrgrerr=",0,"merger time error");
   G__memvar_setup((void*)((long)(&p->mchirp)-(long)(p)),102,0,0,-1,-1,-1,1,"mchirp=",0,"chirp mass");
   G__memvar_setup((void*)((long)(&p->mchirperr)-(long)(p)),102,0,0,-1,-1,-1,1,"mchirperr=",0,"chirp mass error");
   G__memvar_setup((void*)((long)(&p->chi2chirp)-(long)(p)),102,0,0,-1,-1,-1,1,"chi2chirp=",0,"chi2 over NDF");
   G__memvar_setup((void*)((long)(&p->skySize)-(long)(p)),105,0,0,-1,-1,-1,1,"skySize=",0,"number of sky pixels");
   G__memvar_setup((void*)((long)(&p->skyIndex)-(long)(p)),105,0,0,-1,-1,-1,1,"skyIndex=",0,"index in the skymap");
   G__memvar_setup((void*)((long)(&p->fit)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_TF1),-1,-1,1,"fit=",0,"! chirp fit parameters (don't remove ! fix crash when exit from CINT)");
   G__memvar_setup((void*)((long)(&p->chirp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_TGraphErrors),-1,-1,1,"chirp=",0,"chirp graph ");
   G__memvar_setup((void*)((long)(&p->mchpdf)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"mchpdf=",0,"chirp mass PDF");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* netcluster */
static void G__setup_memvarnetcluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_netcluster));
   { netcluster *p; p=(netcluster*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->rate)-(long)(p)),100,0,0,-1,-1,-1,1,"rate=",0,"original Time series rate ");
   G__memvar_setup((void*)((long)(&p->start)-(long)(p)),100,0,0,-1,-1,-1,1,"start=",0,"interval start GPS time");
   G__memvar_setup((void*)((long)(&p->stop)-(long)(p)),100,0,0,-1,-1,-1,1,"stop=",0,"interval stop  GPS time ");
   G__memvar_setup((void*)((long)(&p->bpp)-(long)(p)),100,0,0,-1,-1,-1,1,"bpp=",0,"black pixel probability");
   G__memvar_setup((void*)((long)(&p->shift)-(long)(p)),100,0,0,-1,-1,-1,1,"shift=",0,"time shift");
   G__memvar_setup((void*)((long)(&p->flow)-(long)(p)),100,0,0,-1,-1,-1,1,"flow=",0,"low frequency boundary");
   G__memvar_setup((void*)((long)(&p->fhigh)-(long)(p)),100,0,0,-1,-1,-1,1,"fhigh=",0,"high frequency boundary");
   G__memvar_setup((void*)((long)(&p->nPIX)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"nPIX=",0,"minimum number of pixels at all resolutions");
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,-1,-1,1,"run=",0,"run ID");
   G__memvar_setup((void*)((long)(&p->pair)-(long)(p)),103,0,0,-1,-1,-1,1,"pair=",0,"true - 2 resolutions, false - 1 resolution");
   G__memvar_setup((void*)((long)(&p->pList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR),G__defined_typename("vector<netpixel>"),-1,1,"pList=",0,"pixel list");
   G__memvar_setup((void*)((long)(&p->cData)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR),G__defined_typename("vector<clusterdata>"),-1,1,"cData=",0,"cluster metadata");
   G__memvar_setup((void*)((long)(&p->sCuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"sCuts=",0,"cluster selection flags (cuts)");
   G__memvar_setup((void*)((long)(&p->cList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector_int>"),-1,1,"cList=",0,"cluster list defined by vector of pList references");
   G__memvar_setup((void*)((long)(&p->cRate)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector_int>"),-1,1,"cRate=",0,"cluster type defined by rate");
   G__memvar_setup((void*)((long)(&p->cTime)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"cTime=",0,"supercluster central time");
   G__memvar_setup((void*)((long)(&p->cFreq)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"cFreq=",0,"supercluster central frequency");
   G__memvar_setup((void*)((long)(&p->sArea)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),G__defined_typename("vector<vector_float>"),-1,1,"sArea=",0,"sky error regions");
   G__memvar_setup((void*)((long)(&p->p_Map)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),G__defined_typename("vector<vector_float>"),-1,1,"p_Map=",0,"sky pixel map");
   G__memvar_setup((void*)((long)(&p->p_Ind)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector_int>"),-1,1,"p_Ind=",0,"sky pixel index");
   G__memvar_setup((void*)((long)(&p->nTofF)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector_int>"),-1,1,"nTofF=",0,"sky time delay configuration for waveform backward correction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* WSeries<double> */
static void G__setup_memvarWSerieslEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR));
   { WSeries<double> *p; p=(WSeries<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pWavelet)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR),-1,-1,1,"pWavelet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->w_mode)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"w_mode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bpp)-(long)(p)),100,0,0,-1,-1,-1,1,"bpp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wRate)-(long)(p)),100,0,0,-1,-1,-1,1,"wRate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->f_low)-(long)(p)),100,0,0,-1,-1,-1,1,"f_low=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->f_high)-(long)(p)),100,0,0,-1,-1,-1,1,"f_high=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* WSeries<float> */
static void G__setup_memvarWSerieslEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR));
   { WSeries<float> *p; p=(WSeries<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pWavelet)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR),-1,-1,1,"pWavelet=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->w_mode)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"w_mode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->bpp)-(long)(p)),100,0,0,-1,-1,-1,1,"bpp=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wRate)-(long)(p)),100,0,0,-1,-1,-1,1,"wRate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->f_low)-(long)(p)),100,0,0,-1,-1,-1,1,"f_low=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->f_high)-(long)(p)),100,0,0,-1,-1,-1,1,"f_high=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* WaveDWT<float> */
static void G__setup_memvarWaveDWTlEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR));
   { WaveDWT<float> *p; p=(WaveDWT<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pWWS)-(long)(p)),70,0,0,-1,-1,-1,1,"pWWS=",0,"! pointer to wavelet work space      ");
   G__memvar_setup((void*)((long)(&p->nWWS)-(long)(p)),107,0,0,-1,-1,-1,1,"nWWS=",0,"size of the wavelet work space");
   G__memvar_setup((void*)((long)(&p->nSTS)-(long)(p)),107,0,0,-1,-1,-1,1,"nSTS=",0,"size of the original time series");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SSeries<double> */
static void G__setup_memvarSSerieslEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR));
   { SSeries<double> *p; p=(SSeries<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->core)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBits),-1,-1,1,"core=",0,"core pixel array 1/0 : core/not-core");
   G__memvar_setup((void*)((long)(&p->sparseLookup)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR),-1,-1,1,"sparseLookup=",0,"store the index pointer to the layers ");
   G__memvar_setup((void*)((long)(&p->sparseType)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBits),-1,-1,1,"sparseType=",0,"store pixel type 1/0  core/halo ");
   G__memvar_setup((void*)((long)(&p->sparseIndex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR),-1,-1,1,"sparseIndex=",0,"store pixel index");
   G__memvar_setup((void*)((long)(&p->sparseMap00)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"sparseMap00=",0,"store pixel 00 amp");
   G__memvar_setup((void*)((long)(&p->sparseMap90)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"sparseMap90=",0,"store pixel 90 amp;");
   G__memvar_setup((void*)((long)(&p->layerHalo)-(long)(p)),105,0,0,-1,-1,-1,1,"layerHalo=",0,"number of sparse layers associated to a pixel [+/- layerHalo]");
   G__memvar_setup((void*)((long)(&p->time_Halo)-(long)(p)),105,0,0,-1,-1,-1,1,"time_Halo=",0,"typically half length of time-delay filter");
   G__memvar_setup((void*)((long)(&p->extraHalo)-(long)(p)),105,0,0,-1,-1,-1,1,"extraHalo=",0,"number of extra sparse slices associated to a pixel [+/- (time_Halo+extraHalo)]");
   G__memvar_setup((void*)((long)(&p->net_Delay)-(long)(p)),100,0,0,-1,-1,-1,1,"net_Delay=",0,"delay time (sec) used to compute extraHalo = net_Delay*this->wrate()");
   G__memvar_setup((void*)((long)(&p->wdm_BetaOrder)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_BetaOrder=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_m_Layer)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_m_Layer=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_KWDM)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_KWDM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_precision)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_precision=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_rate)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_rate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_start)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_start=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_nSTS)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_nSTS=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* WaveDWT<double> */
static void G__setup_memvarWaveDWTlEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR));
   { WaveDWT<double> *p; p=(WaveDWT<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pWWS)-(long)(p)),68,0,0,-1,-1,-1,1,"pWWS=",0,"! pointer to wavelet work space      ");
   G__memvar_setup((void*)((long)(&p->nWWS)-(long)(p)),107,0,0,-1,-1,-1,1,"nWWS=",0,"size of the wavelet work space");
   G__memvar_setup((void*)((long)(&p->nSTS)-(long)(p)),107,0,0,-1,-1,-1,1,"nSTS=",0,"size of the original time series");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<netpixel,allocator<netpixel> > */
static void G__setup_memvarvectorlEnetpixelcOallocatorlEnetpixelgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   { vector<netpixel,allocator<netpixel> > *p; p=(vector<netpixel,allocator<netpixel> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<clusterdata,allocator<clusterdata> > */
static void G__setup_memvarvectorlEclusterdatacOallocatorlEclusterdatagRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   { vector<clusterdata,allocator<clusterdata> > *p; p=(vector<clusterdata,allocator<clusterdata> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
static void G__setup_memvarvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   { vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > *p; p=(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */
static void G__setup_memvarvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   { vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > *p; p=(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* wat::Alm_Base */
static void G__setup_memvarwatcLcLAlm_Base(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_Base));
   { wat::Alm_Base *p; p=(wat::Alm_Base*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"lmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"mmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"tval=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* wat::Alm */
static void G__setup_memvarwatcLcLAlm(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm));
   { wat::Alm *p; p=(wat::Alm*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* wat::Alm_Template<complex<double> > */
static void G__setup_memvarwatcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR));
   { wat::Alm_Template<complex<double> > *p; p=(wat::Alm_Template<complex<double> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* skymap */
static void G__setup_memvarskymap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_skymap));
   { skymap *p; p=(skymap*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vectorD>"),-1,1,"value=",0,"skymap map array");
   G__memvar_setup((void*)((long)(&p->index)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"index=",0,"sample index array");
   G__memvar_setup((void*)((long)(&p->sms)-(long)(p)),100,0,0,-1,-1,-1,1,"sms=",0,"step on phi and theta");
   G__memvar_setup((void*)((long)(&p->theta_1)-(long)(p)),100,0,0,-1,-1,-1,1,"theta_1=",0,"theta range begin");
   G__memvar_setup((void*)((long)(&p->theta_2)-(long)(p)),100,0,0,-1,-1,-1,1,"theta_2=",0,"theta range end");
   G__memvar_setup((void*)((long)(&p->phi_1)-(long)(p)),100,0,0,-1,-1,-1,1,"phi_1=",0,"phi range begin");
   G__memvar_setup((void*)((long)(&p->phi_2)-(long)(p)),100,0,0,-1,-1,-1,1,"phi_2=",0,"phi range end");
   G__memvar_setup((void*)((long)(&p->gps)-(long)(p)),100,0,0,-1,-1,-1,1,"gps=",0,"gps time ");
   G__memvar_setup((void*)((long)(&p->mTheta)-(long)(p)),105,0,0,-1,-1,-1,1,"mTheta=",0,"theta index");
   G__memvar_setup((void*)((long)(&p->mPhi)-(long)(p)),105,0,0,-1,-1,-1,1,"mPhi=",0,"phi index");
   G__memvar_setup((void*)((long)(&p->mIndex)-(long)(p)),105,0,0,-1,-1,-1,1,"mIndex=",0,"sky index");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"healpix_order=",0,"healpix order (if=0 healpix is disabled)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* wavearray<short> */
static void G__setup_memvarwavearraylEshortgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR));
   { wavearray<short> *p; p=(wavearray<short>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),83,0,0,-1,-1,-1,1,"data=",0,"! data array");
   G__memvar_setup((void*)((long)(&p->Size)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"Size=",0,"number of elements in the data array");
   G__memvar_setup((void*)((long)(&p->Rate)-(long)(p)),100,0,0,-1,-1,-1,1,"Rate=",0,"data sampling rate");
   G__memvar_setup((void*)((long)(&p->Start)-(long)(p)),100,0,0,-1,-1,-1,1,"Start=",0,"start time");
   G__memvar_setup((void*)((long)(&p->Stop)-(long)(p)),100,0,0,-1,-1,-1,1,"Stop=",0,"end time");
   G__memvar_setup((void*)((long)(&p->Edge)-(long)(p)),100,0,0,-1,-1,-1,1,"Edge=",0,"buffer length in seconds in the beginning and the end ");
   G__memvar_setup((void*)((long)(&p->Slice)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_slice),-1,-1,1,"Slice=",0,"the data slice structure");
   G__memvar_setup((void*)((long)(&p->fftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTRealComplex),-1,-1,1,"fftw=",0,"! pointer to direct  fftw object");
   G__memvar_setup((void*)((long)(&p->ifftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTComplexReal),-1,-1,1,"ifftw=",0,"! pointer to inverse fftw object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* wavearray<int> */
static void G__setup_memvarwavearraylEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR));
   { wavearray<int> *p; p=(wavearray<int>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),73,0,0,-1,-1,-1,1,"data=",0,"! data array");
   G__memvar_setup((void*)((long)(&p->Size)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"Size=",0,"number of elements in the data array");
   G__memvar_setup((void*)((long)(&p->Rate)-(long)(p)),100,0,0,-1,-1,-1,1,"Rate=",0,"data sampling rate");
   G__memvar_setup((void*)((long)(&p->Start)-(long)(p)),100,0,0,-1,-1,-1,1,"Start=",0,"start time");
   G__memvar_setup((void*)((long)(&p->Stop)-(long)(p)),100,0,0,-1,-1,-1,1,"Stop=",0,"end time");
   G__memvar_setup((void*)((long)(&p->Edge)-(long)(p)),100,0,0,-1,-1,-1,1,"Edge=",0,"buffer length in seconds in the beginning and the end ");
   G__memvar_setup((void*)((long)(&p->Slice)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_slice),-1,-1,1,"Slice=",0,"the data slice structure");
   G__memvar_setup((void*)((long)(&p->fftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTRealComplex),-1,-1,1,"fftw=",0,"! pointer to direct  fftw object");
   G__memvar_setup((void*)((long)(&p->ifftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTComplexReal),-1,-1,1,"ifftw=",0,"! pointer to inverse fftw object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
static void G__setup_memvarvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   { vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > *p; p=(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* SymmArraySSE<float> */
static void G__setup_memvarSymmArraySSElEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR));
   { SymmArraySSE<float> *p; p=(SymmArraySSE<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"last=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"SizeSSE=",0,"SizeSSE in bytes (multiple of 8)");
   G__memvar_setup((void*)0,70,0,0,-1,-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,70,0,0,-1,-1,-1,2,"zero=",0,"! always in the middle of the allocated space");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"recSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* delayFilter */
static void G__setup_memvardelayFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_delayFilter));
   { delayFilter *p; p=(delayFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->index)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<short>"),-1,1,"index=",0,"relative wavelet array index");
   G__memvar_setup((void*)((long)(&p->value)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"value=",0,"amplitude");
   }
   G__tag_memvar_reset();
}


   /* detectorParams */
static void G__setup_memvardetectorParams(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_detectorParams));
   { detectorParams *p; p=(detectorParams*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->name)-(long)(p)),99,0,0,-1,-1,-1,1,"name[32]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->latitude)-(long)(p)),100,0,0,-1,-1,-1,1,"latitude=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->longitude)-(long)(p)),100,0,0,-1,-1,-1,1,"longitude=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->elevation)-(long)(p)),100,0,0,-1,-1,-1,1,"elevation=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->AltX)-(long)(p)),100,0,0,-1,-1,-1,1,"AltX=",0,"elevation of the x arm");
   G__memvar_setup((void*)((long)(&p->AzX)-(long)(p)),100,0,0,-1,-1,-1,1,"AzX=",0,"azimut of the x arm  (angle-deg from nord)");
   G__memvar_setup((void*)((long)(&p->AltY)-(long)(p)),100,0,0,-1,-1,-1,1,"AltY=",0,"elevation of the y arm");
   G__memvar_setup((void*)((long)(&p->AzY)-(long)(p)),100,0,0,-1,-1,-1,1,"AzY=",0,"azimut of the y arm (angle-deg from nord)");
   }
   G__tag_memvar_reset();
}


   /* detector */
static void G__setup_memvardetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_detector));
   { detector *p; p=(detector*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Name)-(long)(p)),99,0,0,-1,-1,-1,1,"Name[16]=",0,"detector name");
   G__memvar_setup((void*)((long)(&p->ifoID)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"ifoID=",0,"detector ID in the network - set up by network method");
   G__memvar_setup((void*)((long)(&p->dP)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_detectorParams),-1,-1,1,"dP=",0,"user detector parameters");
   G__memvar_setup((void*)((long)(&p->Rv)-(long)(p)),100,0,0,-1,-1,-1,1,"Rv[3]=",0,"radius vector to beam splitter");
   G__memvar_setup((void*)((long)(&p->Ex)-(long)(p)),100,0,0,-1,-1,-1,1,"Ex[3]=",0,"vector along x-arm     ");
   G__memvar_setup((void*)((long)(&p->Ey)-(long)(p)),100,0,0,-1,-1,-1,1,"Ey[3]=",0,"vector along y-arm     ");
   G__memvar_setup((void*)((long)(&p->DT)-(long)(p)),100,0,0,-1,-1,-1,1,"DT[9]=",0,"detector tenzor");
   G__memvar_setup((void*)((long)(&p->ED)-(long)(p)),100,0,0,-1,-1,-1,1,"ED[5]=",0,"network energy disbalance  ");
   G__memvar_setup((void*)((long)(&p->sHIFt)-(long)(p)),100,0,0,-1,-1,-1,1,"sHIFt=",0,"time shifts for background analysis");
   G__memvar_setup((void*)((long)(&p->null)-(long)(p)),100,0,0,-1,-1,-1,1,"null=",0,"unbiased null stream");
   G__memvar_setup((void*)((long)(&p->enrg)-(long)(p)),100,0,0,-1,-1,-1,1,"enrg=",0,"total energy of PC components   ");
   G__memvar_setup((void*)((long)(&p->sSNR)-(long)(p)),100,0,0,-1,-1,-1,1,"sSNR=",0,"reconstructed response s-SNR  ");
   G__memvar_setup((void*)((long)(&p->xSNR)-(long)(p)),100,0,0,-1,-1,-1,1,"xSNR=",0,"reconstructed response x-SNR  ");
   G__memvar_setup((void*)((long)(&p->ekXk)-(long)(p)),100,0,0,-1,-1,-1,1,"ekXk=",0,"mean of reconstructed detector response  ");
   G__memvar_setup((void*)((long)(&p->rate)-(long)(p)),100,0,0,-1,-1,-1,1,"rate=",0,"original data rate (before downsampling)  ");
   G__memvar_setup((void*)((long)(&p->nDFS)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"nDFS=",0,"number of Delay Filter Samples");
   G__memvar_setup((void*)((long)(&p->nDFL)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"nDFL=",0,"number of Delay Filter Layers");
   G__memvar_setup((void*)((long)(&p->wfSAVE)-(long)(p)),105,0,0,-1,-1,-1,1,"wfSAVE=",0,"used in streamer method to save waveforms stuff");
   G__memvar_setup((void*)((long)(&p->tau)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"tau=",0,"detector delay with respect to ECEF");
   G__memvar_setup((void*)((long)(&p->mFp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"mFp=",0,"F+ skymap");
   G__memvar_setup((void*)((long)(&p->mFx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"mFx=",0,"Fx skymap");
   G__memvar_setup((void*)((long)(&p->HoT)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"HoT=",0,"detector time series");
   G__memvar_setup((void*)((long)(&p->vSS)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR),G__defined_typename("vector<SSeries<double> >"),-1,1,"vSS=",0,"sparse TFmap");
   G__memvar_setup((void*)((long)(&p->TFmap)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),-1,-1,1,"TFmap=",0,"wavelet data");
   G__memvar_setup((void*)((long)(&p->waveForm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),-1,-1,1,"waveForm=",0,"buffer for a waveform");
   G__memvar_setup((void*)((long)(&p->waveBand)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),-1,-1,1,"waveBand=",0,"buffer for a bandlimited waveform");
   G__memvar_setup((void*)((long)(&p->waveNull)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),-1,-1,1,"waveNull=",0,"buffer for noise = data - signal");
   G__memvar_setup((void*)((long)(&p->nRMS)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),-1,-1,1,"nRMS=",0,"noise RMS");
   G__memvar_setup((void*)((long)(&p->nVAR)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR),-1,-1,1,"nVAR=",0,"noise variability");
   G__memvar_setup((void*)((long)(&p->filter)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR),G__defined_typename("vector<delayFilter>"),-1,1,"filter=",0,"delay filter ");
   G__memvar_setup((void*)((long)(&p->fp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"fp=",0,"sorted F+ pattern");
   G__memvar_setup((void*)((long)(&p->fx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"fx=",0,"sorted Fx pattern");
   G__memvar_setup((void*)((long)(&p->ffp)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"ffp=",0,"sorted F+ * F+ + Fx * Fx");
   G__memvar_setup((void*)((long)(&p->ffm)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"ffm=",0,"sorted F+ * F+ - Fx * Fx");
   G__memvar_setup((void*)((long)(&p->fpx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"fpx=",0,"sorted F+ * Fx * 2");
   G__memvar_setup((void*)((long)(&p->index)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR),-1,-1,1,"index=",0,"index array for delayed amplitude (network)");
   G__memvar_setup((void*)((long)(&p->lagShift)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"lagShift=",0,"time shifts for background analysis");
   G__memvar_setup((void*)((long)(&p->HRSS)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"HRSS=",0,"hrss of injected signals");
   G__memvar_setup((void*)((long)(&p->ISNR)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"ISNR=",0,"injected SNR");
   G__memvar_setup((void*)((long)(&p->FREQ)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"FREQ=",0,"frequency of injected signals");
   G__memvar_setup((void*)((long)(&p->BAND)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"BAND=",0,"bandwith of injected signals");
   G__memvar_setup((void*)((long)(&p->TIME)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"TIME=",0,"central time of injected signals");
   G__memvar_setup((void*)((long)(&p->TDUR)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"TDUR=",0,"duration of injected signals");
   G__memvar_setup((void*)((long)(&p->IWFID)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"IWFID=",0,"injected waveforms ID");
   G__memvar_setup((void*)((long)(&p->IWFP)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgR),G__defined_typename("vector<wavearray<double>*>"),-1,1,"IWFP=",0,"injected waveforms pointers ");
   G__memvar_setup((void*)((long)(&p->RWFID)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"RWFID=",0,"reconstructed waveforms ID");
   G__memvar_setup((void*)((long)(&p->RWFP)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgR),G__defined_typename("vector<wavearray<double>*>"),-1,1,"RWFP=",0,"reconstructed waveforms pointers ");
   G__memvar_setup((void*)((long)(&p->polarization)-(long)(p)),105,0,0,G__get_linked_tagnum(&G__wave_dictLN_POLARIZATION),-1,-1,1,"polarization=",0,"gw polarization states : TENSOR (fp,fx) SCALAR (fo)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<SSeries<double>,allocator<SSeries<double> > > */
static void G__setup_memvarvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   { vector<SSeries<double>,allocator<SSeries<double> > > *p; p=(vector<SSeries<double>,allocator<SSeries<double> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<delayFilter,allocator<delayFilter> > */
static void G__setup_memvarvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   { vector<delayFilter,allocator<delayFilter> > *p; p=(vector<delayFilter,allocator<delayFilter> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* monster */
static void G__setup_memvarmonster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_monster));
   { monster *p; p=(monster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->catalog)-(long)(p)),85,2,0,G__get_linked_tagnum(&G__wave_dictLN_xtalkArray),-1,-1,1,"catalog[][2]=",0,"stores overlap values [r1][r2][r1_freq][parity] ; r2<=r1   ");
   G__memvar_setup((void*)((long)(&p->nRes)-(long)(p)),105,0,0,-1,-1,-1,1,"nRes=",0,"number of resolutions");
   G__memvar_setup((void*)((long)(&p->layers)-(long)(p)),73,0,0,-1,-1,-1,1,"layers=",0,"! M for each resolution");
   G__memvar_setup((void*)((long)(&p->clusterCC)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR),G__defined_typename("vector<wavearray<float> >"),-1,1,"clusterCC=",0,"cluster coupling coefficients");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* WDM<double> */
static void G__setup_memvarWDMlEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR));
   { WDM<double> *p; p=(WDM<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)(&WDM<double>::Cos),68,0,0,-1,-1,-2,1,"Cos[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<double>::Cos2),68,0,0,-1,-1,-2,1,"Cos2[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<double>::SinCos),68,0,0,-1,-1,-2,1,"SinCos[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<double>::CosSize),100,0,0,-1,-1,-2,1,"CosSize[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<double>::Cos2Size),100,0,0,-1,-1,-2,1,"Cos2Size[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<double>::SinCosSize),100,0,0,-1,-1,-2,1,"SinCosSize[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<double>::objCounter),105,0,0,-1,-1,-2,1,"objCounter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BetaOrder)-(long)(p)),105,0,0,-1,-1,-1,1,"BetaOrder=",0,"beta function order for Meyer ");
   G__memvar_setup((void*)((long)(&p->precision)-(long)(p)),105,0,0,-1,-1,-1,1,"precision=",0,"wavelet precision");
   G__memvar_setup((void*)((long)(&p->KWDM)-(long)(p)),105,0,0,-1,-1,-1,1,"KWDM=",0,"K - parameter");
   G__memvar_setup((void*)((long)(&p->LWDM)-(long)(p)),105,0,0,-1,-1,-1,1,"LWDM=",0,"unit time delay is tau/LWDM where tau is 1/hot_rate ");
   G__memvar_setup((void*)((long)(&p->wdmFilter)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"wdmFilter=",0,"WDM filter");
   G__memvar_setup((void*)((long)(&p->T0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR),-1,-1,1,"T0=",0,"time-delay filters");
   G__memvar_setup((void*)((long)(&p->Tx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR),-1,-1,1,"Tx=",0,"time-delay filters");
   G__memvar_setup((void*)((long)(&p->sinTD)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"sinTD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cosTD)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"cosTD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sinTDx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"sinTDx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TFMap00)-(long)(p)),68,2,0,-1,-1,-1,1,"TFMap00=",0,"! pointer to 0-phase data, by default not initialized");
   G__memvar_setup((void*)((long)(&p->TFMap90)-(long)(p)),68,2,0,-1,-1,-1,1,"TFMap90=",0,"! pointer to 90-phase data, by default not initialized");
   G__memvar_setup((void*)((long)(&p->SSE_TDF)-(long)(p)),49,0,0,-1,G__defined_typename("void (*)()"),-1,1,"SSE_TDF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->td_buffer)-(long)(p)),70,0,0,-1,-1,-1,1,"td_buffer=",0,"!");
   G__memvar_setup((void*)((long)(&p->td_data)-(long)(p)),70,0,0,-1,-1,-1,1,"td_data=",0,"!");
   G__memvar_setup((void*)((long)(&p->td_halo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR),-1,-1,1,"td_halo[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SymmArray<double> */
static void G__setup_memvarSymmArraylEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR));
   { SymmArray<double> *p; p=(SymmArray<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Size=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,2,"zero=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"recSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SymmObjArray<SymmArraySSE<float> > */
static void G__setup_memvarSymmObjArraylESymmArraySSElEfloatgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR));
   { SymmObjArray<SymmArraySSE<float> > *p; p=(SymmObjArray<SymmArraySSE<float> >*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Size=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR),-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR),-1,-1,2,"zero=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* waveSegment */
static void G__setup_memvarwaveSegment(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_waveSegment));
   { waveSegment *p; p=(waveSegment*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->index)-(long)(p)),105,0,0,-1,-1,-1,1,"index=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->start)-(long)(p)),100,0,0,-1,-1,-1,1,"start=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stop)-(long)(p)),100,0,0,-1,-1,-1,1,"stop=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<detector*,allocator<detector*> > */
static void G__setup_memvarvectorlEdetectormUcOallocatorlEdetectormUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   { vector<detector*,allocator<detector*> > *p; p=(vector<detector*,allocator<detector*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<netcluster,allocator<netcluster> > */
static void G__setup_memvarvectorlEnetclustercOallocatorlEnetclustergRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   { vector<netcluster,allocator<netcluster> > *p; p=(vector<netcluster,allocator<netcluster> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<string,allocator<string> > */
static void G__setup_memvarvectorlEstringcOallocatorlEstringgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   { vector<string,allocator<string> > *p; p=(vector<string,allocator<string> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<waveSegment,allocator<waveSegment> > */
static void G__setup_memvarvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   { vector<waveSegment,allocator<waveSegment> > *p; p=(vector<waveSegment,allocator<waveSegment> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<WDM<double>*,allocator<WDM<double>*> > */
static void G__setup_memvarvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   { vector<WDM<double>*,allocator<WDM<double>*> > *p; p=(vector<WDM<double>*,allocator<WDM<double>*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* injection */
static void G__setup_memvarinjection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_injection));
   { injection *p; p=(injection*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->iFile)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFile),-1,-1,1,"iFile=",0,"!root input file cointainig the mdc TTree");
   G__memvar_setup((void*)((long)(&p->fChain)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TTree),-1,-1,1,"fChain=",0,"!pointer to the analyzed TTree or TChain");
   G__memvar_setup((void*)((long)(&p->fCurrent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fCurrent=",0,"!current Tree number in a TChain");
   G__memvar_setup((void*)((long)(&p->ndim)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ndim=",0,"! number of detectors");
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run=",0,"run ID                                                       ");
   G__memvar_setup((void*)((long)(&p->nevent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nevent=",0,"event count                                                  ");
   G__memvar_setup((void*)((long)(&p->eventID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"eventID=",0,"event ID                                                     ");
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"type=",0,"injection type                                              ");
   G__memvar_setup((void*)((long)(&p->name)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_string),-1,-1,1,"name=",0,"! injection name");
   G__memvar_setup((void*)((long)(&p->factor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"factor=",0,"simulation factor				  ");
   G__memvar_setup((void*)((long)(&p->distance)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"distance=",0,"distance to source in Mpc");
   G__memvar_setup((void*)((long)(&p->mchirp)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"mchirp=",0,"chirp mass in Mo");
   G__memvar_setup((void*)((long)(&p->rp0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"rp0=",0,"eBBH binary distance");
   G__memvar_setup((void*)((long)(&p->e0)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"e0=",0,"eBBH eccentricity");
   G__memvar_setup((void*)((long)(&p->gps)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"gps=",0,"start time of data segment                         ");
   G__memvar_setup((void*)((long)(&p->strain)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"strain=",0,"strain of injected simulated signals                         ");
   G__memvar_setup((void*)((long)(&p->psi)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"psi=",0,"! source psi angle");
   G__memvar_setup((void*)((long)(&p->iota)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"iota=",0,"! source iota angle");
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,"! source phi angle");
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta=",0,"! source theta angle");
   G__memvar_setup((void*)((long)(&p->bp)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"bp=",0,"! beam pattern coefficients for hp");
   G__memvar_setup((void*)((long)(&p->bx)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"bx=",0,"! beam pattern coefficients for hx ");
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"time=",0,"! injection gps time");
   G__memvar_setup((void*)((long)(&p->duration)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"duration=",0,"! estimated duration");
   G__memvar_setup((void*)((long)(&p->frequency)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"frequency=",0,"! average center_of_hrss frequency");
   G__memvar_setup((void*)((long)(&p->bandwidth)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"bandwidth=",0,"! estimated bandwidth");
   G__memvar_setup((void*)((long)(&p->hrss)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"hrss=",0,"! injected hrss in the detectors");
   G__memvar_setup((void*)((long)(&p->snr)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"snr=",0,"! injected snr in the detectors");
   G__memvar_setup((void*)((long)(&p->Deff)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"Deff=",0,"! detector specific effective distance");
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,"! [m1,m2], binary mass parameters");
   G__memvar_setup((void*)((long)(&p->spin)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"spin=",0,"! [x1,y1,z1,x2,y2,z2] components of spin vector ");
   G__memvar_setup((void*)((long)(&p->pwf)-(long)(p)),85,2,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"pwf=",0,"! pointer to the reconstructed waveform ");
   G__memvar_setup((void*)((long)(&p->b_ndim)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_ndim=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_run)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_run=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_nevent)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_nevent=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_eventID)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_eventID=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_type)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_type=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_name)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_name=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_factor)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_factor=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_distance)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_distance=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_mchirp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_mchirp=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_rp0)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_rp0=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_e0)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_e0=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_gps)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_gps=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_strain)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_strain=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_psi)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_psi=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_iota)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_iota=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_phi)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_phi=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_theta)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_theta=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_bp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_bp=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_bx)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_bx=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_time)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_time=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_duration)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_duration=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_frequency)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_frequency=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_bandwidth)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_bandwidth=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_hrss)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_hrss=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_snr)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_snr=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_Deff)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_Deff=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_mass)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_mass=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_spin)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_spin=",0,"!");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* watplot */
static void G__setup_memvarwatplot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_watplot));
   { watplot *p; p=(watplot*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->canvas)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TCanvas),-1,-1,1,"canvas=",0,"pointer to TCanvas object");
   G__memvar_setup((void*)((long)(&p->hist2D)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TH2F),-1,-1,1,"hist2D=",0,"pointer to TH2F object");
   G__memvar_setup((void*)((long)(&p->graph)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR),G__defined_typename("vector<TGraph*>"),-1,1,"graph=",0,"vector of pointers to TGraph objects");
   G__memvar_setup((void*)((long)(&p->hist1D)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR),G__defined_typename("vector<TH1F*>"),-1,1,"hist1D=",0,"vector of pointers to TH1F objects");
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->title)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_TString),-1,-1,1,"title=",0,"graph title");
   G__memvar_setup((void*)((long)(&p->xtitle)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_TString),-1,-1,1,"xtitle=",0,"x axis name");
   G__memvar_setup((void*)((long)(&p->ytitle)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_TString),-1,-1,1,"ytitle=",0,"y axis name");
   G__memvar_setup((void*)((long)(&p->ncol)-(long)(p)),105,0,0,-1,-1,-1,1,"ncol=",0,"color index of TGraph plots");
   G__memvar_setup((void*)((long)(&p->opt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_TString),-1,-1,1,"opt=",0,"TGraph::Draw options");
   G__memvar_setup((void*)((long)(&p->col)-(long)(p)),105,0,0,-1,-1,-1,1,"col=",0,"TGraph line color");
   G__memvar_setup((void*)((long)(&p->t1)-(long)(p)),100,0,0,-1,-1,-1,1,"t1=",0,"start of time interval in seconds");
   G__memvar_setup((void*)((long)(&p->t2)-(long)(p)),100,0,0,-1,-1,-1,1,"t2=",0,"end of time interval in seconds");
   G__memvar_setup((void*)((long)(&p->fft)-(long)(p)),103,0,0,-1,-1,-1,1,"fft=",0,"true -> plot fft");
   G__memvar_setup((void*)((long)(&p->f1)-(long)(p)),100,0,0,-1,-1,-1,1,"f1=",0,"set begin frequency (Hz)");
   G__memvar_setup((void*)((long)(&p->f2)-(long)(p)),100,0,0,-1,-1,-1,1,"f2=",0,"set end frequency (Hz)");
   G__memvar_setup((void*)((long)(&p->psd)-(long)(p)),103,0,0,-1,-1,-1,1,"psd=",0,"true -> plot psd using blackmanharris window");
   G__memvar_setup((void*)((long)(&p->t3)-(long)(p)),100,0,0,-1,-1,-1,1,"t3=",0,"is the chunk length (sec) used to produce the psd");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<TGraph*,allocator<TGraph*> > */
static void G__setup_memvarvectorlETGraphmUcOallocatorlETGraphmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   { vector<TGraph*,allocator<TGraph*> > *p; p=(vector<TGraph*,allocator<TGraph*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* wavepixel */
static void G__setup_memvarwavepixel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_wavepixel));
   { wavepixel *p; p=(wavepixel*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->clusterID)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"clusterID=",0,"cluster ID");
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"time=",0,"time index");
   G__memvar_setup((void*)((long)(&p->frequency)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"frequency=",0,"frequency index (layer)");
   G__memvar_setup((void*)((long)(&p->index)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"index=",0,"position in list");
   G__memvar_setup((void*)((long)(&p->rate)-(long)(p)),102,0,0,-1,-1,-1,1,"rate=",0,"wavelet layer rate");
   G__memvar_setup((void*)((long)(&p->variability)-(long)(p)),102,0,0,-1,-1,-1,1,"variability=",0,"average noise variability");
   G__memvar_setup((void*)((long)(&p->noiserms)-(long)(p)),100,0,0,-1,-1,-1,1,"noiserms=",0,"average noise rms");
   G__memvar_setup((void*)((long)(&p->core)-(long)(p)),103,0,0,-1,-1,-1,1,"core=",0,"pixel type: true - core , false - halo");
   G__memvar_setup((void*)((long)(&p->neighbors)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"neighbors=",0,"vector of links to neighbors");
   G__memvar_setup((void*)((long)(&p->amplitude)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"amplitude=",0,"vector of pixel's amplitudes");
   }
   G__tag_memvar_reset();
}


   /* wavecluster */
static void G__setup_memvarwavecluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_wavecluster));
   { wavecluster *p; p=(wavecluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->start)-(long)(p)),100,0,0,-1,-1,-1,1,"start=",0,"interval start GPS time");
   G__memvar_setup((void*)((long)(&p->stop)-(long)(p)),100,0,0,-1,-1,-1,1,"stop=",0,"interval stop GPS time ");
   G__memvar_setup((void*)((long)(&p->low)-(long)(p)),100,0,0,-1,-1,-1,1,"low=",0,"low frequency boubdary");
   G__memvar_setup((void*)((long)(&p->high)-(long)(p)),100,0,0,-1,-1,-1,1,"high=",0,"high frequency boundary");
   G__memvar_setup((void*)((long)(&p->bpp)-(long)(p)),100,0,0,-1,-1,-1,1,"bpp=",0,"black pixel probability");
   G__memvar_setup((void*)((long)(&p->shift)-(long)(p)),100,0,0,-1,-1,-1,1,"shift=",0,"time shift");
   G__memvar_setup((void*)((long)(&p->ifo)-(long)(p)),105,0,0,-1,-1,-1,1,"ifo=",0,"detector index: 1/2/3 - L1/H1/H2");
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,-1,-1,1,"run=",0,"run ID");
   G__memvar_setup((void*)((long)(&p->pList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavepixelcOallocatorlEwavepixelgRsPgR),G__defined_typename("vector<wavepixel>"),-1,1,"pList=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sCuts)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,1,"sCuts=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_listlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("list<vector_int>"),-1,1,"cList=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cRate)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector_int>"),-1,1,"cRate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nRMS)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),-1,-1,1,"nRMS=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nVAR)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"nVAR=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* wavecor */
static void G__setup_memvarwavecor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_wavecor));
   { wavecor *p; p=(wavecor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->shift)-(long)(p)),102,0,0,-1,-1,-1,1,"shift=",0,"time shift");
   G__memvar_setup((void*)((long)(&p->ifo)-(long)(p)),105,0,0,-1,-1,-1,1,"ifo=",0,"detector index: 1/2/3 - L1H1/H1H2/H2L1");
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,-1,-1,1,"run=",0,"run ID");
   G__memvar_setup((void*)((long)(&p->window)-(long)(p)),100,0,0,-1,-1,-1,1,"window=",0,"integration window in seconds");
   G__memvar_setup((void*)((long)(&p->lagint)-(long)(p)),100,0,0,-1,-1,-1,1,"lagint=",0,"lag interval in seconds");
   G__memvar_setup((void*)((long)(&p->xcor)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"xcor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xlag)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"xlag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_listlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("list<vector_int>"),-1,1,"cList=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* WaveRDC */
static void G__setup_memvarWaveRDC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveRDC));
   { WaveRDC *p; p=(WaveRDC*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nSample)-(long)(p)),105,0,0,-1,-1,-1,1,"nSample=",0,"number of samples in comressed data array");
   G__memvar_setup((void*)((long)(&p->nLayer)-(long)(p)),105,0,0,-1,-1,-1,1,"nLayer=",0,"number of layers in comressed data array");
   G__memvar_setup((void*)((long)(&p->optz)-(long)(p)),105,0,0,-1,-1,-1,1,"optz=",0,"current layer compression options");
   G__memvar_setup((void*)((long)(&p->freebits)-(long)(p)),105,0,0,-1,-1,-1,1,"freebits=",0,"free bits in the last word of current block");
   G__memvar_setup((void*)((long)(&p->kLong)-(long)(p)),105,0,0,-1,-1,-1,1,"kLong=",0,"encoding bit length for large integers");
   G__memvar_setup((void*)((long)(&p->kShort)-(long)(p)),105,0,0,-1,-1,-1,1,"kShort=",0,"encoding bit length of short word");
   G__memvar_setup((void*)((long)(&p->kBSW)-(long)(p)),105,0,0,-1,-1,-1,1,"kBSW=",0,"length of the Block Service Word");
   G__memvar_setup((void*)((long)(&p->Bias)-(long)(p)),115,0,0,-1,-1,-1,1,"Bias=",0,"constant bias subtracted from the data");
   G__memvar_setup((void*)((long)(&p->Zero)-(long)(p)),115,0,0,-1,-1,-1,1,"Zero=",0,"number that encodes 0;      ");
   G__memvar_setup((void*)((long)(&p->Scale)-(long)(p)),102,0,0,-1,-1,-1,1,"Scale=",0,"coefficient to scale data");
   G__memvar_setup((void*)((long)(&p->rmsLimit)-(long)(p)),102,0,0,-1,-1,-1,1,"rmsLimit=",0,"limit on the data rms");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* wavearray<unsigned int> */
static void G__setup_memvarwavearraylEunsignedsPintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR));
   { wavearray<unsigned int> *p; p=(wavearray<unsigned int>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),72,0,0,-1,-1,-1,1,"data=",0,"! data array");
   G__memvar_setup((void*)((long)(&p->Size)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"Size=",0,"number of elements in the data array");
   G__memvar_setup((void*)((long)(&p->Rate)-(long)(p)),100,0,0,-1,-1,-1,1,"Rate=",0,"data sampling rate");
   G__memvar_setup((void*)((long)(&p->Start)-(long)(p)),100,0,0,-1,-1,-1,1,"Start=",0,"start time");
   G__memvar_setup((void*)((long)(&p->Stop)-(long)(p)),100,0,0,-1,-1,-1,1,"Stop=",0,"end time");
   G__memvar_setup((void*)((long)(&p->Edge)-(long)(p)),100,0,0,-1,-1,-1,1,"Edge=",0,"buffer length in seconds in the beginning and the end ");
   G__memvar_setup((void*)((long)(&p->Slice)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_slice),-1,-1,1,"Slice=",0,"the data slice structure");
   G__memvar_setup((void*)((long)(&p->fftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTRealComplex),-1,-1,1,"fftw=",0,"! pointer to direct  fftw object");
   G__memvar_setup((void*)((long)(&p->ifftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTComplexReal),-1,-1,1,"ifftw=",0,"! pointer to inverse fftw object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* linefilter */
static void G__setup_memvarlinefilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_linefilter));
   { linefilter *p; p=(linefilter*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->FilterID)-(long)(p)),105,0,0,-1,-1,-1,1,"FilterID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Frequency)-(long)(p)),100,0,0,-1,-1,-1,1,"Frequency=",0,"fundamental line frequency");
   G__memvar_setup((void*)((long)(&p->Window)-(long)(p)),100,0,0,-1,-1,-1,1,"Window=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Stride)-(long)(p)),100,0,0,-1,-1,-1,1,"Stride=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nFirst)-(long)(p)),104,0,0,-1,-1,-1,1,"nFirst=",0,"first line harmonic");
   G__memvar_setup((void*)((long)(&p->nLast)-(long)(p)),104,0,0,-1,-1,-1,1,"nLast=",0,"last line harmonic");
   G__memvar_setup((void*)((long)(&p->nStep)-(long)(p)),105,0,0,-1,-1,-1,1,"nStep=",0,"skip harmonics (take nF, nF+nS, nF+2nS,....) ");
   G__memvar_setup((void*)((long)(&p->nScan)-(long)(p)),105,0,0,-1,-1,-1,1,"nScan=",0,"# of frequency steps to scan frequency  ");
   G__memvar_setup((void*)((long)(&p->nBand)-(long)(p)),104,0,0,-1,-1,-1,1,"nBand=",0,"frequency band in fft bins to average noise  ");
   G__memvar_setup((void*)((long)(&p->nSubs)-(long)(p)),105,0,0,-1,-1,-1,1,"nSubs=",0,"number of data subsets to estimate signal PSD ");
   G__memvar_setup((void*)((long)(&p->fBand)-(long)(p)),100,0,0,-1,-1,-1,1,"fBand=",0,"frequency step in fft bins to scan frequency");
   G__memvar_setup((void*)((long)(&p->nLPF)-(long)(p)),105,0,0,-1,-1,-1,1,"nLPF=",0,"decimation factor");
   G__memvar_setup((void*)((long)(&p->nWave)-(long)(p)),105,0,0,-1,-1,-1,1,"nWave=",0,"order of the interpolating wavelet");
   G__memvar_setup((void*)((long)(&p->clean)-(long)(p)),103,0,0,-1,-1,-1,1,"clean=",0,"true if to clean data  ");
   G__memvar_setup((void*)((long)(&p->badData)-(long)(p)),103,0,0,-1,-1,-1,1,"badData=",0,"false if valid data  ");
   G__memvar_setup((void*)((long)(&p->noScan)-(long)(p)),103,0,0,-1,-1,-1,1,"noScan=",0,"true if Frequency is fixed ");
   G__memvar_setup((void*)((long)(&p->nRIF)-(long)(p)),105,0,0,-1,-1,-1,1,"nRIF=",0,"order of Resample Interpolating Filter");
   G__memvar_setup((void*)((long)(&p->SNR)-(long)(p)),100,0,0,-1,-1,-1,1,"SNR=",0,"limit on SNR used by makeFilter");
   G__memvar_setup((void*)((long)(&p->reFine)-(long)(p)),103,0,0,-1,-1,-1,1,"reFine=",0,"refine frequency if true  (set by SNR<0)");
   G__memvar_setup((void*)((long)(&p->dumpStart)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"dumpStart=",0,"first lineList index used to dump data");
   G__memvar_setup((void*)((long)(&p->FilterState)-(long)(p)),105,0,0,-1,-1,-1,1,"FilterState=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SeedFrequency)-(long)(p)),100,0,0,-1,-1,-1,1,"SeedFrequency=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CurrentTime)-(long)(p)),100,0,0,-1,-1,-1,1,"CurrentTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->StartTime)-(long)(p)),100,0,0,-1,-1,-1,1,"StartTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Sample)-(long)(p)),100,0,0,-1,-1,-1,1,"Sample=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ct)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"ct=",0,"tabulated cos() ");
   G__memvar_setup((void*)((long)(&p->st)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"st=",0,"tabulated cos() ");
   G__memvar_setup((void*)((long)(&p->wt)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"wt=",0,"tabulated window");
   G__memvar_setup((void*)((long)(&p->lineList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_listlElinedatacOallocatorlElinedatagRsPgR),G__defined_typename("list<linedata>"),-1,1,"lineList=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NoiseSD)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),G__defined_typename("WaveData"),-1,1,"NoiseSD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LineSD)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),G__defined_typename("WaveData"),-1,1,"LineSD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Filter)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),G__defined_typename("WaveData"),-1,1,"Filter=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* netevent */
static void G__setup_memvarnetevent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_netevent));
   { netevent *p; p=(netevent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->iFile)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFile),-1,-1,1,"iFile=",0,"!root input file cointainig the analyzed TTree ");
   G__memvar_setup((void*)((long)(&p->fChain)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TTree),-1,-1,1,"fChain=",0,"!pointer to the analyzed TTree or TChain");
   G__memvar_setup((void*)((long)(&p->fCurrent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fCurrent=",0,"!current Tree number in a TChain");
   G__memvar_setup((void*)((long)(&p->ndim)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ndim=",0,"! number of detectors");
   G__memvar_setup((void*)((long)(&p->Psave)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Psave=",0,"! max size used by allocate() for the probability maps  ");
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run=",0,"! run ID                                                       ");
   G__memvar_setup((void*)((long)(&p->nevent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nevent=",0,"! event count                                                  ");
   G__memvar_setup((void*)((long)(&p->eventID)-(long)(p)),73,0,0,-1,G__defined_typename("Int_t"),-1,1,"eventID=",0,"! event ID");
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),73,0,0,-1,G__defined_typename("Int_t"),-1,1,"type=",0,"! event type: [0] - prod, [1]-sim            ");
   G__memvar_setup((void*)((long)(&p->name)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_string),-1,-1,1,"name=",0,"! event name:  \"\" - prod, mdc_name - sim");
   G__memvar_setup((void*)((long)(&p->rate)-(long)(p)),73,0,0,-1,G__defined_typename("Int_t"),-1,1,"rate=",0,"! 1/rate - wavelet time resolution");
   G__memvar_setup((void*)((long)(&p->volume)-(long)(p)),73,0,0,-1,G__defined_typename("Int_t"),-1,1,"volume=",0,"! cluster volume                                               ");
   G__memvar_setup((void*)((long)(&p->size)-(long)(p)),73,0,0,-1,G__defined_typename("Int_t"),-1,1,"size=",0,"! cluster size (black pixels only)                             ");
   G__memvar_setup((void*)((long)(&p->usize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"usize=",0,"! cluster union size                                           ");
   G__memvar_setup((void*)((long)(&p->gap)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"gap=",0,"! time between consecutive events                              ");
   G__memvar_setup((void*)((long)(&p->lag)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"lag=",0,"! time lag [sec]                                                   ");
   G__memvar_setup((void*)((long)(&p->slag)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"slag=",0,"! time slag [sec]");
   G__memvar_setup((void*)((long)(&p->strain)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"strain=",0,"! sqrt(h+*h+ + hx*hx)                         ");
   G__memvar_setup((void*)((long)(&p->phi)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"phi=",0,"! [0]-reconstructed, [1]-injected phi angle, [2]-RA");
   G__memvar_setup((void*)((long)(&p->theta)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"theta=",0,"! [0]-reconstructed, [1]-injected theta angle, [2]-DEC");
   G__memvar_setup((void*)((long)(&p->psi)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"psi=",0,"! [0]-reconstructed psi or phase of gc, [1]-injected psi angle");
   G__memvar_setup((void*)((long)(&p->iota)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"iota=",0,"! [0]-reconstructed iota angle, [1]-injected iota angle");
   G__memvar_setup((void*)((long)(&p->bp)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"bp=",0,"! beam pattern coefficients for hp");
   G__memvar_setup((void*)((long)(&p->bx)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"bx=",0,"! beam pattern coefficients for hx ");
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"time=",0,"! average center_of_gravity time");
   G__memvar_setup((void*)((long)(&p->gps)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"gps=",0,"! segment start GPS time                           ");
   G__memvar_setup((void*)((long)(&p->right)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"right=",0,"! min cluster time relative to segment start");
   G__memvar_setup((void*)((long)(&p->left)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"left=",0,"! max cluster time relative to segment start");
   G__memvar_setup((void*)((long)(&p->duration)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"duration=",0,"! cluster duration = stopW-startW");
   G__memvar_setup((void*)((long)(&p->start)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"start=",0,"! GPS start time of the cluster");
   G__memvar_setup((void*)((long)(&p->stop)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"stop=",0,"! GPS stop time of the cluster ");
   G__memvar_setup((void*)((long)(&p->frequency)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"frequency=",0,"! average center_of_snr frequency");
   G__memvar_setup((void*)((long)(&p->low)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"low=",0,"! min frequency ");
   G__memvar_setup((void*)((long)(&p->high)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"high=",0,"! max frequency ");
   G__memvar_setup((void*)((long)(&p->bandwidth)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"bandwidth=",0,"! high-low ");
   G__memvar_setup((void*)((long)(&p->hrss)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"hrss=",0,"! hrss");
   G__memvar_setup((void*)((long)(&p->noise)-(long)(p)),68,0,0,-1,G__defined_typename("Double_t"),-1,1,"noise=",0,"! noise rms");
   G__memvar_setup((void*)((long)(&p->erA)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"erA=",0,"! error angle");
   G__memvar_setup((void*)((long)(&p->Psm)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_skymap),-1,-1,1,"Psm=",0,"! probability cc skymap");
   G__memvar_setup((void*)((long)(&p->null)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"null=",0,"! un-biased null statistics");
   G__memvar_setup((void*)((long)(&p->nill)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"nill=",0,"! biased null statistics");
   G__memvar_setup((void*)((long)(&p->rho)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"rho=",0,"! effective correlated SNR ");
   G__memvar_setup((void*)((long)(&p->netcc)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"netcc=",0,"! network correlation coefficients: 0-net,1-pc,2-cc,3-net2 ");
   G__memvar_setup((void*)((long)(&p->neted)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"neted=",0,"! network energy disbalance: 0 - total, 1 - 00-phase, 2 - 90-phase");
   G__memvar_setup((void*)((long)(&p->gnet)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"gnet=",0,"network sensitivity");
   G__memvar_setup((void*)((long)(&p->anet)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"anet=",0,"network alignment factor");
   G__memvar_setup((void*)((long)(&p->inet)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"inet=",0,"network index");
   G__memvar_setup((void*)((long)(&p->ecor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ecor=",0,"correlated energy");
   G__memvar_setup((void*)((long)(&p->norm)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"norm=",0,"norm Factor or ellipticity");
   G__memvar_setup((void*)((long)(&p->ECOR)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ECOR=",0,"effective correlated energy");
   G__memvar_setup((void*)((long)(&p->penalty)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"penalty=",0,"penalty factor");
   G__memvar_setup((void*)((long)(&p->likelihood)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"likelihood=",0,"network likelihood");
   G__memvar_setup((void*)((long)(&p->factor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"factor=",0,"Multiplicative amplitude factor - simulation only");
   G__memvar_setup((void*)((long)(&p->range)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"range=",0,"! range to source: [0/1]-rec/inj");
   G__memvar_setup((void*)((long)(&p->chirp)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"chirp=",0,"! chirp array: 0-injmass,1-recmass,2-merr,3-tmrgr,4-terr,5-chi2");
   G__memvar_setup((void*)((long)(&p->eBBH)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"eBBH=",0,"! eBBH array");
   G__memvar_setup((void*)((long)(&p->Deff)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"Deff=",0,"! effective range for each detector ");
   G__memvar_setup((void*)((long)(&p->mass)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"mass=",0,"! mass[2], binary mass parameters");
   G__memvar_setup((void*)((long)(&p->spin)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"spin=",0,"! spin[6], binary spin parameters");
   G__memvar_setup((void*)((long)(&p->snr)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"snr=",0,"! energy/noise_variance                                   ");
   G__memvar_setup((void*)((long)(&p->xSNR)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"xSNR=",0,"! data-signal correlation Xk*Sk");
   G__memvar_setup((void*)((long)(&p->sSNR)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"sSNR=",0,"! energy of reconstructed responses Sk*Sk ");
   G__memvar_setup((void*)((long)(&p->iSNR)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"iSNR=",0,"! injected snr waveform");
   G__memvar_setup((void*)((long)(&p->oSNR)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"oSNR=",0,"! reconstructed snr waveform");
   G__memvar_setup((void*)((long)(&p->ioSNR)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"ioSNR=",0,"! injected reconstructed xcor waveform				  ");
   G__memvar_setup((void*)((long)(&p->fP)-(long)(p)),69,0,0,-1,-1,-1,1,"fP=",0,"! dump file");
   G__memvar_setup((void*)((long)(&p->ifoList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR),G__defined_typename("vector<detector*>"),-1,1,"ifoList=",0,"detectors");
   G__memvar_setup((void*)((long)(&p->b_ndim)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_ndim=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_run)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_run=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_nevent)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_nevent=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_eventID)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_eventID=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_type)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_type=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_name)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_name=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_rate)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_rate=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_volume)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_volume=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_size)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_size=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_usize)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_usize=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_gap)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_gap=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_lag)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_lag=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_slag)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_slag=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_strain)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_strain=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_phi)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_phi=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_theta)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_theta=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_psi)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_psi=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_iota)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_iota=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_bp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_bp=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_bx)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_bx=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_time)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_time=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_gps)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_gps=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_right)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_right=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_left)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_left=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_duration)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_duration=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_start)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_start=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_stop)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_stop=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_frequency)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_frequency=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_low)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_low=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_high)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_high=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_bandwidth)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_bandwidth=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_hrss)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_hrss=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_noise)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_noise=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_erA)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_erA=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_Psm)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_Psm=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_null)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_null=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_nill)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_nill=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_netcc)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_netcc=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_neted)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_neted=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_rho)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_rho=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_gnet)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_gnet=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_anet)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_anet=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_inet)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_inet=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_ecor)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_ecor=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_norm)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_norm=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_ECOR)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_ECOR=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_penalty)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_penalty=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_likelihood)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_likelihood=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_factor)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_factor=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_range)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_range=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_chirp)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_chirp=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_eBBH)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_eBBH=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_Deff)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_Deff=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_mass)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_mass=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_spin)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_spin=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_snr)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_snr=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_xSNR)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_xSNR=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_sSNR)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_sSNR=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_iSNR)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_iSNR=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_oSNR)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_oSNR=",0,"!");
   G__memvar_setup((void*)((long)(&p->b_ioSNR)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBranch),-1,-1,1,"b_ioSNR=",0,"!");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* regression */
static void G__setup_memvarregression(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_regression));
   { regression *p; p=(regression*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->kSIZE)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"kSIZE=",0,"unit filter half-length");
   G__memvar_setup((void*)((long)(&p->Edge)-(long)(p)),100,0,0,-1,-1,-1,1,"Edge=",0,"time offset at the boundaries");
   G__memvar_setup((void*)((long)(&p->pOUT)-(long)(p)),103,0,0,-1,-1,-1,1,"pOUT=",0,"true/false printout flag");
   G__memvar_setup((void*)((long)(&p->chList)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgR),G__defined_typename("vector<WSeries<double> >"),-1,1,"chList=",0,"TF data: 0 - target, >0 - withess   ");
   G__memvar_setup((void*)((long)(&p->chName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEcharmUcOallocatorlEcharmUgRsPgR),G__defined_typename("vector<char*>"),-1,1,"chName=",0,"channel names: 0 - target, >0-witness");
   G__memvar_setup((void*)((long)(&p->chMask)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgR),G__defined_typename("vector<wavearray<int> >"),-1,1,"chMask=",0,"layer mask: 0 - target, >0-witness");
   G__memvar_setup((void*)((long)(&p->FILTER)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEWienercOallocatorlEWienergRsPgR),G__defined_typename("vector<Wiener>"),-1,1,"FILTER=",0,"total Wiener filter                 ");
   G__memvar_setup((void*)((long)(&p->matrix)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgR),G__defined_typename("vector<TMatrixDSym>"),-1,1,"matrix=",0,"symmetric matrix                    ");
   G__memvar_setup((void*)((long)(&p->vCROSS)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgR),G__defined_typename("vector<wavearray<double> >"),-1,1,"vCROSS=",0,"cross-correlation vector   ");
   G__memvar_setup((void*)((long)(&p->vEIGEN)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgR),G__defined_typename("vector<wavearray<double> >"),-1,1,"vEIGEN=",0,"vector of eigenvalues   ");
   G__memvar_setup((void*)((long)(&p->target)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"target=",0,"target time series                  ");
   G__memvar_setup((void*)((long)(&p->rnoise)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"rnoise=",0,"regressed out noise          ");
   G__memvar_setup((void*)((long)(&p->WNoise)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR),-1,-1,1,"WNoise=",0,"Wavelet series for regressed out noise       ");
   G__memvar_setup((void*)((long)(&p->vrank)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgR),G__defined_typename("vector<wavearray<double> >"),-1,1,"vrank=",0,"RANK");
   G__memvar_setup((void*)((long)(&p->vfreq)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"vfreq=",0,"RANK");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* wat::Time */
static void G__setup_memvarwatcLcLTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime));
   { wat::Time *p; p=(wat::Time*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("INT_4S"),-1,4,"mSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("INT_4U"),-1,4,"mNSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* watconstants */
static void G__setup_memvarwatconstants(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_watconstants));
   {
   }
   G__tag_memvar_reset();
}


   /* wavearray<long long> */
static void G__setup_memvarwavearraylElongsPlonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR));
   { wavearray<long long> *p; p=(wavearray<long long>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),78,0,0,-1,-1,-1,1,"data=",0,"! data array");
   G__memvar_setup((void*)((long)(&p->Size)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"Size=",0,"number of elements in the data array");
   G__memvar_setup((void*)((long)(&p->Rate)-(long)(p)),100,0,0,-1,-1,-1,1,"Rate=",0,"data sampling rate");
   G__memvar_setup((void*)((long)(&p->Start)-(long)(p)),100,0,0,-1,-1,-1,1,"Start=",0,"start time");
   G__memvar_setup((void*)((long)(&p->Stop)-(long)(p)),100,0,0,-1,-1,-1,1,"Stop=",0,"end time");
   G__memvar_setup((void*)((long)(&p->Edge)-(long)(p)),100,0,0,-1,-1,-1,1,"Edge=",0,"buffer length in seconds in the beginning and the end ");
   G__memvar_setup((void*)((long)(&p->Slice)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_slice),-1,-1,1,"Slice=",0,"the data slice structure");
   G__memvar_setup((void*)((long)(&p->fftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTRealComplex),-1,-1,1,"fftw=",0,"! pointer to direct  fftw object");
   G__memvar_setup((void*)((long)(&p->ifftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTComplexReal),-1,-1,1,"ifftw=",0,"! pointer to inverse fftw object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* wavearray<long> */
static void G__setup_memvarwavearraylElonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR));
   { wavearray<long> *p; p=(wavearray<long>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),76,0,0,-1,-1,-1,1,"data=",0,"! data array");
   G__memvar_setup((void*)((long)(&p->Size)-(long)(p)),107,0,0,-1,G__defined_typename("size_t"),-1,1,"Size=",0,"number of elements in the data array");
   G__memvar_setup((void*)((long)(&p->Rate)-(long)(p)),100,0,0,-1,-1,-1,1,"Rate=",0,"data sampling rate");
   G__memvar_setup((void*)((long)(&p->Start)-(long)(p)),100,0,0,-1,-1,-1,1,"Start=",0,"start time");
   G__memvar_setup((void*)((long)(&p->Stop)-(long)(p)),100,0,0,-1,-1,-1,1,"Stop=",0,"end time");
   G__memvar_setup((void*)((long)(&p->Edge)-(long)(p)),100,0,0,-1,-1,-1,1,"Edge=",0,"buffer length in seconds in the beginning and the end ");
   G__memvar_setup((void*)((long)(&p->Slice)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_slice),-1,-1,1,"Slice=",0,"the data slice structure");
   G__memvar_setup((void*)((long)(&p->fftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTRealComplex),-1,-1,1,"fftw=",0,"! pointer to direct  fftw object");
   G__memvar_setup((void*)((long)(&p->ifftw)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TFFTComplexReal),-1,-1,1,"ifftw=",0,"! pointer to inverse fftw object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Haar<float> */
static void G__setup_memvarHaarlEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR));
   { Haar<float> *p; p=(Haar<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Haar<double> */
static void G__setup_memvarHaarlEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR));
   { Haar<double> *p; p=(Haar<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Biorthogonal<float> */
static void G__setup_memvarBiorthogonallEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR));
   { Biorthogonal<float> *p; p=(Biorthogonal<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PForward)-(long)(p)),68,0,0,-1,-1,-1,1,"PForward=",0,"!");
   G__memvar_setup((void*)((long)(&p->PInverse)-(long)(p)),68,0,0,-1,-1,-1,1,"PInverse=",0,"!");
   G__memvar_setup((void*)((long)(&p->UForward)-(long)(p)),68,0,0,-1,-1,-1,1,"UForward=",0,"!");
   G__memvar_setup((void*)((long)(&p->UInverse)-(long)(p)),68,0,0,-1,-1,-1,1,"UInverse=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Biorthogonal<double> */
static void G__setup_memvarBiorthogonallEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR));
   { Biorthogonal<double> *p; p=(Biorthogonal<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PForward)-(long)(p)),68,0,0,-1,-1,-1,1,"PForward=",0,"!");
   G__memvar_setup((void*)((long)(&p->PInverse)-(long)(p)),68,0,0,-1,-1,-1,1,"PInverse=",0,"!");
   G__memvar_setup((void*)((long)(&p->UForward)-(long)(p)),68,0,0,-1,-1,-1,1,"UForward=",0,"!");
   G__memvar_setup((void*)((long)(&p->UInverse)-(long)(p)),68,0,0,-1,-1,-1,1,"UInverse=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Daubechies<float> */
static void G__setup_memvarDaubechieslEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR));
   { Daubechies<float> *p; p=(Daubechies<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLInverse=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHInverse=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Daubechies<double> */
static void G__setup_memvarDaubechieslEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR));
   { Daubechies<double> *p; p=(Daubechies<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLInverse=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHInverse=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Symlet<float> */
static void G__setup_memvarSymletlEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR));
   { Symlet<float> *p; p=(Symlet<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLInverse=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHInverse=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Symlet<double> */
static void G__setup_memvarSymletlEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR));
   { Symlet<double> *p; p=(Symlet<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLInverse=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHInverse=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Meyer<float> */
static void G__setup_memvarMeyerlEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR));
   { Meyer<float> *p; p=(Meyer<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLInverse=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHInverse=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Meyer<double> */
static void G__setup_memvarMeyerlEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR));
   { Meyer<double> *p; p=(Meyer<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pLInverse=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHForward=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"pHInverse=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* WDM<float> */
static void G__setup_memvarWDMlEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR));
   { WDM<float> *p; p=(WDM<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)(&WDM<float>::Cos),68,0,0,-1,-1,-2,1,"Cos[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<float>::Cos2),68,0,0,-1,-1,-2,1,"Cos2[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<float>::SinCos),68,0,0,-1,-1,-2,1,"SinCos[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<float>::CosSize),100,0,0,-1,-1,-2,1,"CosSize[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<float>::Cos2Size),100,0,0,-1,-1,-2,1,"Cos2Size[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<float>::SinCosSize),100,0,0,-1,-1,-2,1,"SinCosSize[8]=",0,(char*)NULL);
   G__memvar_setup((void*)(&WDM<float>::objCounter),105,0,0,-1,-1,-2,1,"objCounter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BetaOrder)-(long)(p)),105,0,0,-1,-1,-1,1,"BetaOrder=",0,"beta function order for Meyer ");
   G__memvar_setup((void*)((long)(&p->precision)-(long)(p)),105,0,0,-1,-1,-1,1,"precision=",0,"wavelet precision");
   G__memvar_setup((void*)((long)(&p->KWDM)-(long)(p)),105,0,0,-1,-1,-1,1,"KWDM=",0,"K - parameter");
   G__memvar_setup((void*)((long)(&p->LWDM)-(long)(p)),105,0,0,-1,-1,-1,1,"LWDM=",0,"unit time delay is tau/LWDM where tau is 1/hot_rate ");
   G__memvar_setup((void*)((long)(&p->wdmFilter)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR),-1,-1,1,"wdmFilter=",0,"WDM filter");
   G__memvar_setup((void*)((long)(&p->T0)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR),-1,-1,1,"T0=",0,"time-delay filters");
   G__memvar_setup((void*)((long)(&p->Tx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR),-1,-1,1,"Tx=",0,"time-delay filters");
   G__memvar_setup((void*)((long)(&p->sinTD)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"sinTD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cosTD)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"cosTD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sinTDx)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"sinTDx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TFMap00)-(long)(p)),70,2,0,-1,-1,-1,1,"TFMap00=",0,"! pointer to 0-phase data, by default not initialized");
   G__memvar_setup((void*)((long)(&p->TFMap90)-(long)(p)),70,2,0,-1,-1,-1,1,"TFMap90=",0,"! pointer to 90-phase data, by default not initialized");
   G__memvar_setup((void*)((long)(&p->SSE_TDF)-(long)(p)),49,0,0,-1,G__defined_typename("void (*)()"),-1,1,"SSE_TDF=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->td_buffer)-(long)(p)),70,0,0,-1,-1,-1,1,"td_buffer=",0,"!");
   G__memvar_setup((void*)((long)(&p->td_data)-(long)(p)),70,0,0,-1,-1,-1,1,"td_data=",0,"!");
   G__memvar_setup((void*)((long)(&p->td_halo)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR),-1,-1,1,"td_halo[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SymmArray<int> */
static void G__setup_memvarSymmArraylEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR));
   { SymmArray<int> *p; p=(SymmArray<int>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Size=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,73,0,0,-1,-1,-1,2,"zero=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"recSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SymmArray<float> */
static void G__setup_memvarSymmArraylEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR));
   { SymmArray<float> *p; p=(SymmArray<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Size=",0,(char*)NULL);
   G__memvar_setup((void*)0,70,0,0,-1,-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,70,0,0,-1,-1,-1,2,"zero=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"recSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SymmArraySSE<int> */
static void G__setup_memvarSymmArraySSElEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR));
   { SymmArraySSE<int> *p; p=(SymmArraySSE<int>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"last=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"SizeSSE=",0,"SizeSSE in bytes (multiple of 8)");
   G__memvar_setup((void*)0,73,0,0,-1,-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,73,0,0,-1,-1,-1,2,"zero=",0,"! always in the middle of the allocated space");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"recSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SymmArraySSE<double> */
static void G__setup_memvarSymmArraySSElEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR));
   { SymmArraySSE<double> *p; p=(SymmArraySSE<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"last=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"SizeSSE=",0,"SizeSSE in bytes (multiple of 8)");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,2,"zero=",0,"! always in the middle of the allocated space");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"recSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SymmObjArray<SymmArray<int> > */
static void G__setup_memvarSymmObjArraylESymmArraylEintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR));
   { SymmObjArray<SymmArray<int> > *p; p=(SymmObjArray<SymmArray<int> >*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Size=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR),-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR),-1,-1,2,"zero=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SymmObjArray<SymmArray<float> > */
static void G__setup_memvarSymmObjArraylESymmArraylEfloatgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR));
   { SymmObjArray<SymmArray<float> > *p; p=(SymmObjArray<SymmArray<float> >*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Size=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR),-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR),-1,-1,2,"zero=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SymmObjArray<SymmArray<double> > */
static void G__setup_memvarSymmObjArraylESymmArraylEdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR));
   { SymmObjArray<SymmArray<double> > *p; p=(SymmObjArray<SymmArray<double> >*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Size=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR),-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR),-1,-1,2,"zero=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SymmObjArray<SymmArraySSE<int> > */
static void G__setup_memvarSymmObjArraylESymmArraySSElEintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR));
   { SymmObjArray<SymmArraySSE<int> > *p; p=(SymmObjArray<SymmArraySSE<int> >*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Size=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR),-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR),-1,-1,2,"zero=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SymmObjArray<SymmArraySSE<double> > */
static void G__setup_memvarSymmObjArraylESymmArraySSElEdoublegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR));
   { SymmObjArray<SymmArraySSE<double> > *p; p=(SymmObjArray<SymmArraySSE<double> >*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"Size=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR),-1,-1,2,"rec=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR),-1,-1,2,"zero=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SSeries<float> */
static void G__setup_memvarSSerieslEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR));
   { SSeries<float> *p; p=(SSeries<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->core)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBits),-1,-1,1,"core=",0,"core pixel array 1/0 : core/not-core");
   G__memvar_setup((void*)((long)(&p->sparseLookup)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR),-1,-1,1,"sparseLookup=",0,"store the index pointer to the layers ");
   G__memvar_setup((void*)((long)(&p->sparseType)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_TBits),-1,-1,1,"sparseType=",0,"store pixel type 1/0  core/halo ");
   G__memvar_setup((void*)((long)(&p->sparseIndex)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR),-1,-1,1,"sparseIndex=",0,"store pixel index");
   G__memvar_setup((void*)((long)(&p->sparseMap00)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"sparseMap00=",0,"store pixel 00 amp");
   G__memvar_setup((void*)((long)(&p->sparseMap90)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR),-1,-1,1,"sparseMap90=",0,"store pixel 90 amp;");
   G__memvar_setup((void*)((long)(&p->layerHalo)-(long)(p)),105,0,0,-1,-1,-1,1,"layerHalo=",0,"number of sparse layers associated to a pixel [+/- layerHalo]");
   G__memvar_setup((void*)((long)(&p->time_Halo)-(long)(p)),105,0,0,-1,-1,-1,1,"time_Halo=",0,"typically half length of time-delay filter");
   G__memvar_setup((void*)((long)(&p->extraHalo)-(long)(p)),105,0,0,-1,-1,-1,1,"extraHalo=",0,"number of extra sparse slices associated to a pixel [+/- (time_Halo+extraHalo)]");
   G__memvar_setup((void*)((long)(&p->net_Delay)-(long)(p)),100,0,0,-1,-1,-1,1,"net_Delay=",0,"delay time (sec) used to compute extraHalo = net_Delay*this->wrate()");
   G__memvar_setup((void*)((long)(&p->wdm_BetaOrder)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_BetaOrder=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_m_Layer)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_m_Layer=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_KWDM)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_KWDM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_precision)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_precision=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_rate)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_rate=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_start)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_start=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wdm_nSTS)-(long)(p)),105,0,0,-1,-1,-1,1,"wdm_nSTS=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__wave_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > > */
static void G__setup_memvarvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   { vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > > *p; p=(vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<WSeries<double>*,allocator<WSeries<double>*> > */
static void G__setup_memvarvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   { vector<WSeries<double>*,allocator<WSeries<double>*> > *p; p=(vector<WSeries<double>*,allocator<WSeries<double>*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarwave_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncslice(void) {
   /* slice */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_slice));
   G__memfunc_setup("slice",528,G__wave_dict_532_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("slice",528,G__wave_dict_532_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - __o k - 'size_t' 0 - __d "
"k - 'size_t' 0 - __s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("start",558,G__wave_dict_532_0_3, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_532_0_4, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("stride",651,G__wave_dict_532_0_5, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("slice", 528, G__wave_dict_532_0_6, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~slice", 654, G__wave_dict_532_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_532_0_8, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 1, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWavelet(void) {
   /* Wavelet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_Wavelet));
   G__memfunc_setup("Wavelet",728,G__wave_dict_535_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_Wavelet), -1, 0, 4, 1, 1, 0, 
"i - - 0 '1' mH i - - 0 '1' mL "
"i - - 0 '0' tree i 'BORDER' - 0 'B_CYCLE' border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Wavelet",728,G__wave_dict_535_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_Wavelet), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,G__wave_dict_535_0_3, 85, G__get_linked_tagnum(&G__wave_dictLN_Wavelet), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getOffset",935,G__wave_dict_535_0_4, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("convertF2O",968,G__wave_dict_535_0_5, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("convertO2F",968,G__wave_dict_535_0_6, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("convertL2F",965,G__wave_dict_535_0_7, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("convertF2L",965,G__wave_dict_535_0_8, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reset",547,G__wave_dict_535_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setLevel",836,G__wave_dict_535_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - level", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLevel",824,G__wave_dict_535_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("maxLayer",835,G__wave_dict_535_0_12, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("parity",665,G__wave_dict_535_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - f", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("heterodine",1063,G__wave_dict_535_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - f", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("parity",665,G__wave_dict_535_0_15, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("heterodine",1063,G__wave_dict_535_0_16, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxLevel",1118,G__wave_dict_535_0_17, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BinaryTree",1013,G__wave_dict_535_0_18, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_535_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_535_0_21, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Wavelet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_535_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Wavelet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_535_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Wavelet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_535_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Wavelet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_535_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_535_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Wavelet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_535_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Wavelet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_535_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Wavelet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_535_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Wavelet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Wavelet", 854, G__wave_dict_535_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_535_0_34, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_Wavelet), -1, 1, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwavecomplex(void) {
   /* wavecomplex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_wavecomplex));
   G__memfunc_setup("wavecomplex",1195,G__wave_dict_569_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 - -", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("wavecomplex",1195,G__wave_dict_569_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 0, 1, 1, 0, "", "Default constructor", (void*) NULL, 0);
   G__memfunc_setup("wavecomplex",1195,G__wave_dict_569_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 1, 1, 1, 0, "u 'wavecomplex' - 11 - -", "copy Constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_569_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 1, 1, 1, 1, 0, "u 'wavecomplex' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_569_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 1, 1, 1, 1, 0, "u 'wavecomplex' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_569_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 1, 1, 1, 1, 0, "u 'wavecomplex' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_569_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 1, 1, 1, 1, 0, "u 'wavecomplex' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator/=",984,G__wave_dict_569_0_8, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 1, 1, 1, 1, 0, "u 'wavecomplex' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+",919,G__wave_dict_569_0_9, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 1, 1, 1, 0, "u 'wavecomplex' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-",921,G__wave_dict_569_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 1, 1, 1, 0, "u 'wavecomplex' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*",918,G__wave_dict_569_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 1, 1, 1, 0, "u 'wavecomplex' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator/",923,G__wave_dict_569_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 1, 1, 1, 0, "u 'wavecomplex' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__wave_dict_569_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_569_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_569_0_15, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_569_0_16, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator/=",984,G__wave_dict_569_0_17, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+",919,G__wave_dict_569_0_18, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-",921,G__wave_dict_569_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*",918,G__wave_dict_569_0_20, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator/",923,G__wave_dict_569_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("real",420,G__wave_dict_569_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("imag",414,G__wave_dict_569_0_23, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("arg",314,G__wave_dict_569_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("abs",310,G__wave_dict_569_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mod",320,G__wave_dict_569_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__wave_dict_569_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - x d - - 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("conj",426,G__wave_dict_569_0_28, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_569_0_29, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&wavecomplex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_569_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavecomplex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_569_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&wavecomplex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_569_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&wavecomplex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__wave_dict_569_0_33, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__wave_dict_569_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__wave_dict_569_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_569_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_569_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavecomplex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_569_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavecomplex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_569_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavecomplex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_569_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavecomplex::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~wavecomplex", 1321, G__wave_dict_569_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR(void) {
   /* vector<int,allocator<int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_570_0_1, 105, -1, G__defined_typename("vector<int,allocator<int> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_570_0_2, 105, -1, G__defined_typename("vector<int,allocator<int> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_570_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_570_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_570_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR), G__defined_typename("vector<int,allocator<int> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_570_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR), G__defined_typename("vector<int,allocator<int> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_570_0_7, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_570_0_8, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_570_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_570_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<int,allocator<int> >::size_type' 0 - sz i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_570_0_11, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_570_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_570_0_13, 105, -1, G__defined_typename("vector<int,allocator<int> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_570_0_14, 105, -1, G__defined_typename("vector<int,allocator<int> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__wave_dict_570_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__wave_dict_570_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<int,allocator<int> >::size_type' 0 - n i - - 11 'int()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__wave_dict_570_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__wave_dict_570_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - first u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_570_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_570_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_570_0_21, 105, -1, -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_570_0_22, 105, -1, -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_570_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_570_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_570_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_570_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - first "
"u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_570_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position k - 'vector<int,allocator<int> >::size_type' 0 - n "
"i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_570_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_570_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_570_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - first u 'vector<int,allocator<int> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_570_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<int,allocator<int> >", 2728, G__wave_dict_570_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpixdata(void) {
   /* pixdata */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_pixdata));
   // automatic default constructor
   G__memfunc_setup("pixdata", 747, G__wave_dict_617_0_1, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_pixdata), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pixdata", 747, G__wave_dict_617_0_2, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_pixdata), -1, 0, 1, 1, 1, 0, "u 'pixdata' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pixdata", 873, G__wave_dict_617_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_617_0_4, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_pixdata), -1, 1, 1, 1, 1, 0, "u 'pixdata' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncnetpixel(void) {
   /* netpixel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_netpixel));
   G__memfunc_setup("netpixel",873,G__wave_dict_618_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_netpixel), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("netpixel",873,G__wave_dict_618_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_netpixel), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__wave_dict_618_0_3, 103, -1, -1, 0, 1, 1, 1, 8, "u 'netpixel' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__wave_dict_618_0_4, 103, -1, -1, 0, 1, 1, 1, 8, "u 'netpixel' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_618_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_netpixel), -1, 1, 1, 1, 1, 0, "u 'netpixel' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setdata",742,G__wave_dict_618_0_6, 103, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - a c - - 0 ''R'' type "
"k - 'size_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getdata",730,G__wave_dict_618_0_7, 100, -1, -1, 0, 2, 1, 1, 0, 
"c - - 0 ''R'' type k - 'size_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_618_0_8, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_618_0_9, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_618_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clean",515,G__wave_dict_618_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_618_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__wave_dict_618_0_13, 103, -1, -1, 0, 1, 1, 1, 0, "E - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__wave_dict_618_0_14, 103, -1, -1, 0, 1, 1, 1, 0, "E - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_618_0_15, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&netpixel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_618_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&netpixel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_618_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&netpixel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_618_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&netpixel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_618_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_618_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&netpixel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_618_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&netpixel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_618_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&netpixel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_618_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&netpixel::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("netpixel", 873, G__wave_dict_618_0_27, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_netpixel), -1, 0, 1, 1, 1, 0, "u 'netpixel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~netpixel", 999, G__wave_dict_618_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEpixdatacOallocatorlEpixdatagRsPgR(void) {
   /* vector<pixdata,allocator<pixdata> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_620_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_pixdata), G__defined_typename("vector<pixdata,allocator<pixdata> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<pixdata,allocator<pixdata> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_620_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_pixdata), G__defined_typename("vector<pixdata,allocator<pixdata> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<pixdata,allocator<pixdata> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_620_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_620_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_620_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiteratorgR), G__defined_typename("vector<pixdata,allocator<pixdata> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_620_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiteratorgR), G__defined_typename("vector<pixdata,allocator<pixdata> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_620_0_7, 107, -1, G__defined_typename("vector<pixdata,allocator<pixdata> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_620_0_8, 107, -1, G__defined_typename("vector<pixdata,allocator<pixdata> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_620_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<pixdata,allocator<pixdata> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_620_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<pixdata,allocator<pixdata> >::size_type' 0 - sz u 'pixdata' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_620_0_11, 107, -1, G__defined_typename("vector<pixdata,allocator<pixdata> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_620_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_620_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_pixdata), G__defined_typename("vector<pixdata,allocator<pixdata> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<pixdata,allocator<pixdata> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_620_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_pixdata), G__defined_typename("vector<pixdata,allocator<pixdata> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<pixdata,allocator<pixdata> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pixdata,allocator<pixdata> >",3434,G__wave_dict_620_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pixdata,allocator<pixdata> >",3434,G__wave_dict_620_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<pixdata,allocator<pixdata> >::size_type' 0 - n u 'pixdata' - 11 'pixdata()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pixdata,allocator<pixdata> >",3434,G__wave_dict_620_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<pixdata,allocator<pixdata> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pixdata,allocator<pixdata> >",3434,G__wave_dict_620_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<pixdata,allocator<pixdata> >::iterator' 'vector<pixdata,allocator<pixdata> >::const_iterator' 10 - first u 'vector<pixdata,allocator<pixdata> >::iterator' 'vector<pixdata,allocator<pixdata> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_620_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<pixdata,allocator<pixdata> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_620_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<pixdata,allocator<pixdata> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_620_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_pixdata), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_620_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_pixdata), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_620_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'pixdata' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_620_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<pixdata,allocator<pixdata> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_620_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<pixdata,allocator<pixdata> >::iterator' - 0 - position u 'pixdata' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_620_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<pixdata,allocator<pixdata> >::iterator' - 0 - position u 'vector<pixdata,allocator<pixdata> >::iterator' 'vector<pixdata,allocator<pixdata> >::const_iterator' 10 - first "
"u 'vector<pixdata,allocator<pixdata> >::iterator' 'vector<pixdata,allocator<pixdata> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_620_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<pixdata,allocator<pixdata> >::iterator' - 0 - position k - 'vector<pixdata,allocator<pixdata> >::size_type' 0 - n "
"u 'pixdata' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_620_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_620_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<pixdata,allocator<pixdata> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_620_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<pixdata,allocator<pixdata> >::iterator' - 0 - first u 'vector<pixdata,allocator<pixdata> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_620_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<pixdata,allocator<pixdata> >", 3560, G__wave_dict_620_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwavearraylEfloatgR(void) {
   /* wavearray<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR));
   G__memfunc_setup("wavearray<float>",1634,G__wave_dict_623_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 1, 1, 1, 0, "i - - 0 - -", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<float>",1634,G__wave_dict_623_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 0, 1, 1, 0, "", "Default constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<float>",1634,G__wave_dict_623_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 1, 1, 1, 0, "u 'wavearray<float>' - 11 - -", "copy Constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_623_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_623_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator[]",1060,G__wave_dict_623_0_6, 102, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_623_0_7, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_623_0_8, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_623_0_9, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'wavearray<float>' - 11 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__wave_dict_623_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<float>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_623_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<float>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_623_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<float>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator<<",996,G__wave_dict_623_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<float>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__wave_dict_623_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 1, 1, 1, 0, "f - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_623_0_15, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 1, 1, 1, 0, "f - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_623_0_16, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 1, 1, 1, 0, "f - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_623_0_17, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 1, 1, 1, 0, "f - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator>>",1000,G__wave_dict_623_0_18, 67, -1, -1, 1, 1, 1, 1, 0, "C - - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Dump",406,G__wave_dict_623_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpBinary",1019,G__wave_dict_623_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpShort",934,G__wave_dict_623_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpObject",1005,G__wave_dict_623_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBinary",993,G__wave_dict_623_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadShort",908,G__wave_dict_623_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FFT",224,G__wave_dict_623_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform", (void*) NULL, 1);
   G__memfunc_setup("FFTW",311,G__wave_dict_623_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform West", (void*) NULL, 1);
   G__memfunc_setup("resetFFTW",858,G__wave_dict_623_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", "release FFTW memory", (void*) NULL, 1);
   G__memfunc_setup("Resample",825,G__wave_dict_623_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<float>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_623_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<float>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_623_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - i - - 0 '6' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_623_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_623_0_32, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_623_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_623_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_623_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_623_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_623_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_623_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("size",443,G__wave_dict_623_0_39, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSlice",828,G__wave_dict_623_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlice",816,G__wave_dict_623_0_41, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_623_0_42, 100, -1, -1, 0, 2, 1, 1, 8, 
"k - 'size_t' 0 '0' - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_623_0_43, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<float>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_623_0_44, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_623_0_45, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_623_0_46, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_623_0_47, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<float>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_623_0_48, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_623_0_49, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_623_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<float>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_623_0_51, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_623_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<float>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("min",324,G__wave_dict_623_0_53, 102, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SQRT",330,G__wave_dict_623_0_54, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("hann",421,G__wave_dict_623_0_55, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("waveSort",859,G__wave_dict_623_0_56, 121, -1, -1, 0, 3, 1, 1, 8, 
"F - - 2 - pp k - 'size_t' 0 '0' l "
"k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSort",859,G__wave_dict_623_0_57, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 '0' l k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_623_0_58, 121, -1, -1, 0, 4, 1, 1, 8, 
"F - - 2 - pp k - 'size_t' 0 - l "
"k - 'size_t' 0 - r k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_623_0_59, 102, -1, -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - l k - 'size_t' 0 - r "
"k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_623_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRank",1326,G__wave_dict_623_0_61, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRankE",1395,G__wave_dict_623_0_62, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rank",428,G__wave_dict_623_0_63, 102, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.5' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLPRFilter",1172,G__wave_dict_623_0_64, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("spesla",648,G__wave_dict_623_0_65, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_623_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_623_0_67, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("white",545,G__wave_dict_623_0_68, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 4, 1, 1, 8, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("exponential",1191,G__wave_dict_623_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get",320,G__wave_dict_623_0_70, 102, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__wave_dict_623_0_71, 102, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uniform",768,G__wave_dict_623_0_72, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rand48",529,G__wave_dict_623_0_73, 108, -1, -1, 0, 1, 1, 1, 0, "l - - 0 '1024' k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatistics",1387,G__wave_dict_623_0_74, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - mean d - - 1 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_623_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cpf",313,G__wave_dict_623_0_76, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<float>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_623_0_77, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<float>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__wave_dict_623_0_78, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<float>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_623_0_79, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'wavearray<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_623_0_80, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "f - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wavecount",988,G__wave_dict_623_0_81, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_623_0_82, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<float>' - 11 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_623_0_83, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<float>' - 11 - - i - - 0 - - "
"i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_623_0_84, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<float>' - 11 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_623_0_85, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("compare",743,G__wave_dict_623_0_87, 105, -1, -1, 0, 2, 3, 1, 0, 
"Y - - 10 - x Y - - 10 - y", (char*)NULL, (void*) G__func2void( (int (*)(const void*, const void*))(&wavearray<float>::compare) ), 0);
   G__memfunc_setup("Class",502,G__wave_dict_623_0_88, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&wavearray<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_623_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_623_0_90, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&wavearray<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_623_0_91, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&wavearray<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_623_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_623_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_623_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_623_0_98, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_623_0_99, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<float>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~wavearray<float>", 1760, G__wave_dict_623_0_100, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwavearraylEdoublegR(void) {
   /* wavearray<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR));
   G__memfunc_setup("wavearray<double>",1735,G__wave_dict_624_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 1, 1, 1, 0, "i - - 0 - -", "Constructor", (void*) NULL, 1);
   G__memfunc_setup("wavearray<double>",1735,G__wave_dict_624_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 0, 1, 1, 0, "", "Default constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<double>",1735,G__wave_dict_624_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' - 11 - -", "copy Constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_624_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 1, 1, 1, 1, 0, "u 'wavearray<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_624_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 1, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator[]",1060,G__wave_dict_624_0_6, 100, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_624_0_7, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_624_0_8, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_624_0_9, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'wavearray<double>' - 11 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__wave_dict_624_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 1, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_624_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 1, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_624_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 1, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator<<",996,G__wave_dict_624_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 1, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__wave_dict_624_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_624_0_15, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_624_0_16, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_624_0_17, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator>>",1000,G__wave_dict_624_0_18, 67, -1, -1, 1, 1, 1, 1, 0, "C - - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Dump",406,G__wave_dict_624_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpBinary",1019,G__wave_dict_624_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpShort",934,G__wave_dict_624_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpObject",1005,G__wave_dict_624_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBinary",993,G__wave_dict_624_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadShort",908,G__wave_dict_624_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FFT",224,G__wave_dict_624_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform", (void*) NULL, 1);
   G__memfunc_setup("FFTW",311,G__wave_dict_624_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform West", (void*) NULL, 1);
   G__memfunc_setup("resetFFTW",858,G__wave_dict_624_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", "release FFTW memory", (void*) NULL, 1);
   G__memfunc_setup("Resample",825,G__wave_dict_624_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<double>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_624_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<double>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_624_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - i - - 0 '6' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_624_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_624_0_32, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_624_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_624_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_624_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_624_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_624_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_624_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("size",443,G__wave_dict_624_0_39, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSlice",828,G__wave_dict_624_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlice",816,G__wave_dict_624_0_41, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_624_0_42, 100, -1, -1, 0, 2, 1, 1, 8, 
"k - 'size_t' 0 '0' - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_624_0_43, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<double>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_624_0_44, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_624_0_45, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_624_0_46, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_624_0_47, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<double>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_624_0_48, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_624_0_49, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_624_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<double>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_624_0_51, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_624_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("min",324,G__wave_dict_624_0_53, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SQRT",330,G__wave_dict_624_0_54, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("hann",421,G__wave_dict_624_0_55, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("waveSort",859,G__wave_dict_624_0_56, 121, -1, -1, 0, 3, 1, 1, 8, 
"D - - 2 - pp k - 'size_t' 0 '0' l "
"k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSort",859,G__wave_dict_624_0_57, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 '0' l k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_624_0_58, 121, -1, -1, 0, 4, 1, 1, 8, 
"D - - 2 - pp k - 'size_t' 0 - l "
"k - 'size_t' 0 - r k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_624_0_59, 100, -1, -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - l k - 'size_t' 0 - r "
"k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_624_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRank",1326,G__wave_dict_624_0_61, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRankE",1395,G__wave_dict_624_0_62, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rank",428,G__wave_dict_624_0_63, 100, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.5' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLPRFilter",1172,G__wave_dict_624_0_64, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("spesla",648,G__wave_dict_624_0_65, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_624_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_624_0_67, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("white",545,G__wave_dict_624_0_68, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 4, 1, 1, 8, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("exponential",1191,G__wave_dict_624_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get",320,G__wave_dict_624_0_70, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__wave_dict_624_0_71, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uniform",768,G__wave_dict_624_0_72, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rand48",529,G__wave_dict_624_0_73, 108, -1, -1, 0, 1, 1, 1, 0, "l - - 0 '1024' k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatistics",1387,G__wave_dict_624_0_74, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - mean d - - 1 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_624_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cpf",313,G__wave_dict_624_0_76, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<double>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_624_0_77, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<double>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__wave_dict_624_0_78, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<double>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_624_0_79, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'wavearray<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_624_0_80, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wavecount",988,G__wave_dict_624_0_81, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_624_0_82, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' - 11 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_624_0_83, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<double>' - 11 - - i - - 0 - - "
"i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_624_0_84, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' - 11 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_624_0_85, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("compare",743,G__wave_dict_624_0_87, 105, -1, -1, 0, 2, 3, 1, 0, 
"Y - - 10 - x Y - - 10 - y", (char*)NULL, (void*) G__func2void( (int (*)(const void*, const void*))(&wavearray<double>::compare) ), 0);
   G__memfunc_setup("Class",502,G__wave_dict_624_0_88, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&wavearray<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_624_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_624_0_90, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&wavearray<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_624_0_91, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&wavearray<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_624_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_624_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_624_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_624_0_98, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_624_0_99, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~wavearray<double>", 1861, G__wave_dict_624_0_100, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR(void) {
   /* vector<wavearray<float>,allocator<wavearray<float> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_626_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), G__defined_typename("vector<wavearray<float>,allocator<wavearray<float> > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<wavearray<float>,allocator<wavearray<float> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_626_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), G__defined_typename("vector<wavearray<float>,allocator<wavearray<float> > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<wavearray<float>,allocator<wavearray<float> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_626_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_626_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_626_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<wavearray<float>,allocator<wavearray<float> > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_626_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<wavearray<float>,allocator<wavearray<float> > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_626_0_7, 107, -1, G__defined_typename("vector<wavearray<float>,allocator<wavearray<float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_626_0_8, 107, -1, G__defined_typename("vector<wavearray<float>,allocator<wavearray<float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_626_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<wavearray<float>,allocator<wavearray<float> > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_626_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<wavearray<float>,allocator<wavearray<float> > >::size_type' 0 - sz u 'wavearray<float>' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_626_0_11, 107, -1, G__defined_typename("vector<wavearray<float>,allocator<wavearray<float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_626_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_626_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), G__defined_typename("vector<wavearray<float>,allocator<wavearray<float> > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<wavearray<float>,allocator<wavearray<float> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_626_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), G__defined_typename("vector<wavearray<float>,allocator<wavearray<float> > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<wavearray<float>,allocator<wavearray<float> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wavearray<float>,allocator<wavearray<float> > >",5240,G__wave_dict_626_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wavearray<float>,allocator<wavearray<float> > >",5240,G__wave_dict_626_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<wavearray<float>,allocator<wavearray<float> > >::size_type' 0 - n u 'wavearray<float>' - 11 '(wavearray<float>)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wavearray<float>,allocator<wavearray<float> > >",5240,G__wave_dict_626_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<wavearray<float>,allocator<wavearray<float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<wavearray<float>,allocator<wavearray<float> > >",5240,G__wave_dict_626_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<wavearray<float>,allocator<wavearray<float> > >::iterator' 'vector<wavearray<float>,allocator<wavearray<float> > >::const_iterator' 10 - first u 'vector<wavearray<float>,allocator<wavearray<float> > >::iterator' 'vector<wavearray<float>,allocator<wavearray<float> > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_626_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<wavearray<float>,allocator<wavearray<float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_626_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<wavearray<float>,allocator<wavearray<float> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_626_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_626_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_626_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<float>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_626_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<wavearray<float>,allocator<wavearray<float> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_626_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<wavearray<float>,allocator<wavearray<float> > >::iterator' - 0 - position u 'wavearray<float>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_626_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<wavearray<float>,allocator<wavearray<float> > >::iterator' - 0 - position u 'vector<wavearray<float>,allocator<wavearray<float> > >::iterator' 'vector<wavearray<float>,allocator<wavearray<float> > >::const_iterator' 10 - first "
"u 'vector<wavearray<float>,allocator<wavearray<float> > >::iterator' 'vector<wavearray<float>,allocator<wavearray<float> > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_626_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<wavearray<float>,allocator<wavearray<float> > >::iterator' - 0 - position k - 'vector<wavearray<float>,allocator<wavearray<float> > >::size_type' 0 - n "
"u 'wavearray<float>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_626_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_626_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<wavearray<float>,allocator<wavearray<float> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_626_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<wavearray<float>,allocator<wavearray<float> > >::iterator' - 0 - first u 'vector<wavearray<float>,allocator<wavearray<float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_626_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<wavearray<float>,allocator<wavearray<float> > >", 5366, G__wave_dict_626_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncnetwork(void) {
   /* network */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_network));
   G__memfunc_setup("network",778,G__wave_dict_629_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_network), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("network",778,G__wave_dict_629_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_network), -1, 0, 1, 1, 1, 0, "u 'network' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_629_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_network), -1, 1, 1, 1, 1, 0, "u 'network' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_629_0_4, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "U 'detector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Forward",725,G__wave_dict_629_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Inverse",732,G__wave_dict_629_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeShifts",1356,G__wave_dict_629_0_7, 105, -1, -1, 0, 7, 1, 1, 0, 
"k - 'size_t' 0 '1' - d - - 0 '1.' - "
"k - 'size_t' 0 '0' - k - 'size_t' 0 '0' - "
"C - - 10 'NULL' - C - - 10 '\"w\"' - "
"K - 'size_t' 0 'NULL' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printwc",775,G__wave_dict_629_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initwc",654,G__wave_dict_629_0_9, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSkyMaps",1044,G__wave_dict_629_0_10, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - - 0 - - d - - 0 '0.' - "
"d - - 0 '180.' - d - - 0 '0.' - "
"d - - 0 '360.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSkyMaps",1044,G__wave_dict_629_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setndm",651,G__wave_dict_629_0_12, 103, -1, -1, 0, 4, 1, 1, 0, 
"k - 'size_t' 0 - - k - 'size_t' 0 - - "
"g - - 0 'true' - i - - 0 '1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SETNDM",459,G__wave_dict_629_0_13, 103, -1, -1, 0, 4, 1, 1, 0, 
"k - 'size_t' 0 - - k - 'size_t' 0 - - "
"g - - 0 'true' - i - - 0 '1' -", "used with likelihoodI", (void*) NULL, 0);
   G__memfunc_setup("getNDM",543,G__wave_dict_629_0_14, 100, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - i k - 'size_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFilter",946,G__wave_dict_629_0_15, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "U 'detector' - 0 'NULL' -", "from detector object", (void*) NULL, 0);
   G__memfunc_setup("setDelayFilters",1556,G__wave_dict_629_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'detector' - 0 'NULL' -", "from detector", (void*) NULL, 0);
   G__memfunc_setup("setDelayFilters",1556,G__wave_dict_629_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - - C - - 0 'NULL' -", "from detector filter files", (void*) NULL, 0);
   G__memfunc_setup("setFilter",946,G__wave_dict_629_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - - C - - 0 'NULL' -", "from network filter files", (void*) NULL, 0);
   G__memfunc_setup("writeFilter",1169,G__wave_dict_629_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readFilter",1026,G__wave_dict_629_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVeto",746,G__wave_dict_629_0_21, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '5.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readMDClog",946,G__wave_dict_629_0_22, 107, -1, G__defined_typename("size_t"), 0, 4, 1, 1, 0, 
"C - - 0 - - d - - 0 '0.' - "
"i - - 0 '11' - i - - 0 '12' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSEGlist",1079,G__wave_dict_629_0_23, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"C - - 0 - - i - - 0 '1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDelayIndex",1331,G__wave_dict_629_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDelayIndex",1331,G__wave_dict_629_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndexMode",1225,G__wave_dict_629_0_26, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__wave_dict_629_0_27, 105, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - theta d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAntenna",1041,G__wave_dict_629_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "U 'detector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAntenna",1041,G__wave_dict_629_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delay",527,G__wave_dict_629_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - theta d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delay",527,G__wave_dict_629_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'detector' - 0 - - k - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("coherence",940,G__wave_dict_629_0_32, 108, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 '0.' - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNetworkPixels",1695,G__wave_dict_629_0_33, 108, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - LAG d - - 0 - Eo "
"d - - 0 '1.e12' E2 U 'TH1F' - 0 'NULL' hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("netcut",659,G__wave_dict_629_0_34, 107, -1, G__defined_typename("size_t"), 0, 4, 1, 1, 0, 
"d - - 0 - - c - - 0 ''L'' - "
"k - 'size_t' 0 '0' - i - - 0 '1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("subNetCut",925,G__wave_dict_629_0_35, 108, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - lag f - - 0 '0.1' TH "
"U 'TH2F' - 0 'NULL' hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("likelihoodB",1126,G__wave_dict_629_0_36, 108, -1, -1, 0, 6, 1, 1, 0, 
"c - - 0 ''E'' - d - - 0 'sqrt(2.)' - "
"i - - 0 '0' - k - 'size_t' 0 '0' - "
"i - - 0 '-1' - g - - 0 'false' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("likelihoodI",1133,G__wave_dict_629_0_37, 108, -1, -1, 0, 6, 1, 1, 0, 
"c - - 0 ''P'' - d - - 0 'sqrt(2.)' - "
"i - - 0 '0' - k - 'size_t' 0 '0' - "
"i - - 0 '-1' - g - - 0 'false' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("likelihood2G",1181,G__wave_dict_629_0_38, 108, -1, -1, 0, 4, 1, 1, 0, 
"c - - 0 - mode i - - 0 - lag "
"i - - 0 - ID U 'TH2F' - 0 'NULL' hist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("likelihood",1060,G__wave_dict_629_0_39, 108, -1, -1, 0, 6, 1, 1, 0, 
"c - - 0 ''E'' - d - - 0 'sqrt(2.)' - "
"i - - 0 '0' - k - 'size_t' 0 '0' - "
"i - - 0 '-1' - g - - 0 'false' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRank",728,G__wave_dict_629_0_40, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMRAcatalog",1287,G__wave_dict_629_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - fn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cluster",770,G__wave_dict_629_0_42, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"i - - 0 - kt i - - 0 - kf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("events",661,G__wave_dict_629_0_43, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("events",661,G__wave_dict_629_0_44, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"i - - 0 - type i - - 0 '-1' lag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRMS",574,G__wave_dict_629_0_45, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delink",631,G__wave_dict_629_0_46, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getwave",755,G__wave_dict_629_0_47, 103, -1, -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - - k - 'size_t' 0 - - "
"c - - 0 ''W'' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMRAwave",979,G__wave_dict_629_0_48, 103, -1, -1, 0, 5, 1, 1, 0, 
"k - 'size_t' 0 - ID k - 'size_t' 0 - lag "
"c - - 0 ''S'' atype i - - 0 '0' mode "
"g - - 0 'false' tof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSkyArea",1008,G__wave_dict_629_0_49, 121, -1, -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - id k - 'size_t' 0 - lag "
"d - - 0 - T", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSkyArea",1008,G__wave_dict_629_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"k - 'size_t' 0 - id k - 'size_t' 0 - lag "
"d - - 0 - T i - - 0 - nDoF", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSkyMask",1039,G__wave_dict_629_0_51, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"d - - 0 '0.' - C - - 0 'NULL' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSkyMaskCC",1173,G__wave_dict_629_0_52, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "C - - 0 'NULL' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSkyMaskCC",1173,G__wave_dict_629_0_53, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'skymap' - 0 - sm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAcore",822,G__wave_dict_629_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mdcListSize",1131,G__wave_dict_629_0_55, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mdcTypeSize",1137,G__wave_dict_629_0_56, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mdcTimeSize",1118,G__wave_dict_629_0_57, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mdc__IDSize",1050,G__wave_dict_629_0_58, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("livTimeSize",1141,G__wave_dict_629_0_59, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getmdcList",1040,G__wave_dict_629_0_60, 117, G__get_linked_tagnum(&G__wave_dictLN_string), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getmdcType",1046,G__wave_dict_629_0_61, 117, G__get_linked_tagnum(&G__wave_dictLN_string), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getmdcTime",1027,G__wave_dict_629_0_62, 85, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getmdcTime",1027,G__wave_dict_629_0_63, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getmdc__ID",959,G__wave_dict_629_0_64, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getliveTime",1151,G__wave_dict_629_0_65, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ifoListSize",1141,G__wave_dict_629_0_66, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wc_ListSize",1136,G__wave_dict_629_0_67, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getifo",638,G__wave_dict_629_0_68, 85, G__get_linked_tagnum(&G__wave_dictLN_detector), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getwc",538,G__wave_dict_629_0_69, 85, G__get_linked_tagnum(&G__wave_dictLN_netcluster), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_629_0_70, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "U 'WDM<double>' - 0 - wdm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wdmListSize",1151,G__wave_dict_629_0_71, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getwdm",648,G__wave_dict_629_0_72, 85, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - M", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRunID",782,G__wave_dict_629_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffset",947,G__wave_dict_629_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("constraint",1093,G__wave_dict_629_0_75, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 '1.' d d - - 0 '0.0001' g", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set2or",607,G__wave_dict_629_0_76, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("threshold",973,G__wave_dict_629_0_77, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("THRESHOLD",685,G__wave_dict_629_0_78, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - bpp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDelay",815,G__wave_dict_629_0_79, 100, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDelay",827,G__wave_dict_629_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"L1\"' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wdm",328,G__wave_dict_629_0_81, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("like",421,G__wave_dict_629_0_82, 99, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_629_0_83, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("sumx",461,G__wave_dict_629_0_85, 100, -1, -1, 0, 1, 3, 1, 0, "D - - 0 - a", (char*)NULL, (void*) G__func2void( (double (*)(double*))(&network::sumx) ), 0);
   G__memfunc_setup("dotx",447,G__wave_dict_629_0_86, 100, -1, -1, 0, 2, 3, 1, 0, 
"D - - 0 - a D - - 0 - b", (char*)NULL, (void*) G__func2void( (double (*)(double*, double*))(&network::dotx) ), 0);
   G__memfunc_setup("dotx",447,G__wave_dict_629_0_87, 100, -1, -1, 0, 2, 3, 1, 0, 
"F - - 0 - a F - - 0 - b", (char*)NULL, (void*) G__func2void( (double (*)(float*, float*))(&network::dotx) ), 0);
   G__memfunc_setup("dot4",379,G__wave_dict_629_0_88, 100, -1, -1, 0, 2, 3, 1, 0, 
"D - - 0 - a D - - 0 - b", (char*)NULL, (void*) G__func2void( (double (*)(double*, double*))(&network::dot4) ), 0);
   G__memfunc_setup("dotx",447,G__wave_dict_629_0_89, 100, -1, -1, 0, 3, 3, 1, 0, 
"D - - 0 - a D - - 0 - b "
"D - - 0 - c", (char*)NULL, (void*) G__func2void( (double (*)(double*, double*, double*))(&network::dotx) ), 0);
   G__memfunc_setup("dotx",447,G__wave_dict_629_0_90, 100, -1, -1, 0, 3, 3, 1, 0, 
"F - - 0 - a F - - 0 - b "
"F - - 0 - c", (char*)NULL, (void*) G__func2void( (double (*)(float*, float*, float*))(&network::dotx) ), 0);
   G__memfunc_setup("dot4",379,G__wave_dict_629_0_91, 100, -1, -1, 0, 3, 3, 1, 0, 
"D - - 0 - a D - - 0 - b "
"D - - 0 - c", (char*)NULL, (void*) G__func2void( (double (*)(double*, double*, double*))(&network::dot4) ), 0);
   G__memfunc_setup("dotx",447,G__wave_dict_629_0_92, 100, -1, -1, 0, 3, 3, 1, 0, 
"D - - 0 - a D - - 2 - b "
"k - 'size_t' 0 - j", (char*)NULL, (void*) G__func2void( (double (*)(double*, double**, size_t))(&network::dotx) ), 0);
   G__memfunc_setup("dotx",447,G__wave_dict_629_0_93, 100, -1, -1, 0, 3, 3, 1, 0, 
"D - - 2 - a k - 'size_t' 0 - i "
"D - - 0 - b", (char*)NULL, (void*) G__func2void( (double (*)(double**, size_t, double*))(&network::dotx) ), 0);
   G__memfunc_setup("dotx",447,G__wave_dict_629_0_94, 100, -1, -1, 0, 4, 3, 1, 0, 
"D - - 2 - a k - 'size_t' 0 - i "
"D - - 2 - b k - 'size_t' 0 - j", (char*)NULL, (void*) G__func2void( (double (*)(double**, size_t, double**, size_t))(&network::dotx) ), 0);
   G__memfunc_setup("dotx",447,G__wave_dict_629_0_95, 100, -1, -1, 0, 5, 3, 1, 0, 
"D - - 2 - a k - 'size_t' 0 - i "
"D - - 2 - b k - 'size_t' 0 - j "
"D - - 0 - p", (char*)NULL, (void*) G__func2void( (double (*)(double**, size_t, double**, size_t, double*))(&network::dotx) ), 0);
   G__memfunc_setup("dotx",447,G__wave_dict_629_0_96, 100, -1, -1, 0, 3, 3, 1, 0, 
"D - - 0 - a D - - 0 - b "
"d - - 0 - c", (char*)NULL, (void*) G__func2void( (double (*)(double*, double*, double))(&network::dotx) ), 0);
   G__memfunc_setup("dotx",447,G__wave_dict_629_0_97, 100, -1, -1, 0, 3, 3, 1, 0, 
"F - - 0 - a F - - 0 - b "
"f - - 0 - c", (char*)NULL, (void*) G__func2void( (double (*)(float*, float*, float))(&network::dotx) ), 0);
   G__memfunc_setup("addx",417,G__wave_dict_629_0_98, 121, -1, -1, 0, 3, 3, 1, 0, 
"D - - 0 - a D - - 0 - b "
"D - - 0 - p", (char*)NULL, (void*) G__func2void( (void (*)(double*, double*, double*))(&network::addx) ), 0);
   G__memfunc_setup("addx",417,G__wave_dict_629_0_99, 121, -1, -1, 0, 4, 3, 1, 0, 
"D - - 0 - a D - - 2 - b "
"k - 'size_t' 0 - j D - - 0 - p", (char*)NULL, (void*) G__func2void( (void (*)(double*, double**, size_t, double*))(&network::addx) ), 0);
   G__memfunc_setup("addx",417,G__wave_dict_629_0_100, 121, -1, -1, 0, 5, 3, 1, 0, 
"D - - 2 - a k - 'size_t' 0 - i "
"D - - 2 - b k - 'size_t' 0 - j "
"D - - 0 - p", (char*)NULL, (void*) G__func2void( (void (*)(double**, size_t, double**, size_t, double*))(&network::addx) ), 0);
   G__memfunc_setup("dotx",447,G__wave_dict_629_0_101, 100, -1, -1, 0, 4, 3, 1, 0, 
"D - - 0 - a D - - 2 - b "
"k - 'size_t' 0 - j D - - 0 - p", (char*)NULL, (void*) G__func2void( (double (*)(double*, double**, size_t, double*))(&network::dotx) ), 0);
   G__memfunc_setup("dot32",428,G__wave_dict_629_0_102, 100, -1, -1, 0, 3, 3, 1, 0, 
"U 'vector<float,allocator<float> >' 'vector<float>' 0 - F D - - 0 - p "
"U 'vector<short,allocator<short> >' 'vector<short>' 0 - J", (char*)NULL, (void*) G__func2void( (double (*)(vector<float>*, double*, vector<short>*))(&network::dot32) ), 0);
   G__memfunc_setup("dot32",428,G__wave_dict_629_0_103, 100, -1, -1, 0, 3, 3, 1, 0, 
"D - - 0 - F D - - 0 - p "
"I - - 0 - J", (char*)NULL, (void*) G__func2void( (double (*)(double*, double*, int*))(&network::dot32) ), 0);
   G__memfunc_setup("divx",443,G__wave_dict_629_0_104, 100, -1, -1, 0, 2, 3, 1, 0, 
"D - - 0 - a D - - 0 - b", (char*)NULL, (void*) G__func2void( (double (*)(double*, double*))(&network::divx) ), 0);
   G__memfunc_setup("rotx",461,G__wave_dict_629_0_105, 100, -1, -1, 0, 5, 3, 1, 0, 
"D - - 0 - u d - - 0 - c "
"D - - 0 - v d - - 0 - s "
"D - - 0 - e", (char*)NULL, (void*) G__func2void( (double (*)(double*, double, double*, double, double*))(&network::rotx) ), 0);
   G__memfunc_setup("rotx",461,G__wave_dict_629_0_106, 100, -1, -1, 0, 5, 3, 1, 0, 
"F - - 0 - u f - - 0 - c "
"F - - 0 - v f - - 0 - s "
"F - - 0 - e", (char*)NULL, (void*) G__func2void( (double (*)(float*, float, float*, float, float*))(&network::rotx) ), 0);
   G__memfunc_setup("rot4",393,G__wave_dict_629_0_107, 100, -1, -1, 0, 5, 3, 1, 0, 
"D - - 0 - u d - - 0 - c "
"D - - 0 - v d - - 0 - s "
"D - - 0 - e", (char*)NULL, (void*) G__func2void( (double (*)(double*, double, double*, double, double*))(&network::rot4) ), 0);
   G__memfunc_setup("rots",456,G__wave_dict_629_0_108, 102, -1, -1, 0, 5, 3, 1, 0, 
"F - - 0 - u f - - 0 - c "
"F - - 0 - v f - - 0 - s "
"F - - 0 - e", (char*)NULL, (void*) G__func2void( (float (*)(float*, float, float*, float, float*))(&network::rots) ), 0);
   G__memfunc_setup("mulx",454,G__wave_dict_629_0_109, 121, -1, -1, 0, 5, 3, 1, 0, 
"D - - 2 - a k - 'size_t' 0 - i "
"D - - 2 - b k - 'size_t' 0 - j "
"D - - 0 - p", (char*)NULL, (void*) G__func2void( (void (*)(double**, size_t, double**, size_t, double*))(&network::mulx) ), 0);
   G__memfunc_setup("mulx",454,G__wave_dict_629_0_110, 121, -1, -1, 0, 3, 3, 1, 0, 
"D - - 0 - a d - - 0 - b "
"D - - 0 - p", (char*)NULL, (void*) G__func2void( (void (*)(double*, double, double*))(&network::mulx) ), 0);
   G__memfunc_setup("mulx",454,G__wave_dict_629_0_111, 121, -1, -1, 0, 3, 3, 1, 0, 
"F - - 0 - a f - - 0 - b "
"F - - 0 - p", (char*)NULL, (void*) G__func2void( (void (*)(float*, float, float*))(&network::mulx) ), 0);
   G__memfunc_setup("mulx",454,G__wave_dict_629_0_112, 121, -1, -1, 0, 2, 3, 1, 0, 
"D - - 0 - a d - - 0 - b", (char*)NULL, (void*) G__func2void( (void (*)(double*, double))(&network::mulx) ), 0);
   G__memfunc_setup("mulx",454,G__wave_dict_629_0_113, 121, -1, -1, 0, 2, 3, 1, 0, 
"F - - 0 - a f - - 0 - b", (char*)NULL, (void*) G__func2void( (void (*)(float*, float))(&network::mulx) ), 0);
   G__memfunc_setup("inix",440,G__wave_dict_629_0_114, 121, -1, -1, 0, 3, 3, 1, 0, 
"D - - 2 - a k - 'size_t' 0 - j "
"D - - 0 - p", (char*)NULL, (void*) G__func2void( (void (*)(double**, size_t, double*))(&network::inix) ), 0);
   G__memfunc_setup("inix",440,G__wave_dict_629_0_115, 121, -1, -1, 0, 2, 3, 1, 0, 
"D - - 0 - p d - - 0 - a", (char*)NULL, (void*) G__func2void( (void (*)(double*, double))(&network::inix) ), 0);
   G__memfunc_setup("inix",440,G__wave_dict_629_0_116, 121, -1, -1, 0, 2, 3, 1, 0, 
"F - - 0 - p f - - 0 - a", (char*)NULL, (void*) G__func2void( (void (*)(float*, float))(&network::inix) ), 0);
   G__memfunc_setup("netx",447,G__wave_dict_629_0_117, 105, -1, -1, 0, 5, 3, 1, 0, 
"D - - 0 - u d - - 0 - um "
"D - - 0 - v d - - 0 - vm "
"d - - 0 - g", (char*)NULL, (void*) G__func2void( (int (*)(double*, double, double*, double, double))(&network::netx) ), 0);
   G__memfunc_setup("netx",447,G__wave_dict_629_0_118, 105, -1, -1, 0, 5, 3, 1, 0, 
"F - - 0 - u f - - 0 - um "
"F - - 0 - v f - - 0 - vm "
"f - - 0 - g", (char*)NULL, (void*) G__func2void( (int (*)(float*, float, float*, float, float))(&network::netx) ), 0);
   G__memfunc_setup("pnt_",433,G__wave_dict_629_0_119, 121, -1, -1, 0, 5, 3, 1, 0, 
"F - - 2 - q F - - 2 - p "
"S - - 2 - m i - - 0 - l "
"i - - 0 - n", (char*)NULL, (void*) G__func2void( (void (*)(float**, float**, short**, int, int))(&network::pnt_) ), 0);
   G__memfunc_setup("cpp_",418,G__wave_dict_629_0_120, 121, -1, -1, 0, 2, 3, 1, 0, 
"F - - 1 - a F - - 2 - p", (char*)NULL, (void*) G__func2void( (void (*)(float*&, float**))(&network::cpp_) ), 0);
   G__memfunc_setup("cpf_",408,G__wave_dict_629_0_121, 121, -1, -1, 0, 2, 3, 1, 0, 
"F - - 1 - a D - - 2 - p", (char*)NULL, (void*) G__func2void( (void (*)(float*&, double**))(&network::cpf_) ), 0);
   G__memfunc_setup("cpf_",408,G__wave_dict_629_0_122, 121, -1, -1, 0, 3, 3, 1, 0, 
"F - - 1 - a D - - 2 - p "
"k - 'size_t' 0 - i", (char*)NULL, (void*) G__func2void( (void (*)(float*&, double**, size_t))(&network::cpf_) ), 0);
   G__memfunc_setup("dpfx",434,G__wave_dict_629_0_123, 121, -1, -1, 0, 2, 3, 1, 0, 
"F - - 0 - fp F - - 0 - fx", (char*)NULL, (void*) G__func2void( (void (*)(float*, float*))(&network::dpfx) ), 0);
   G__memfunc_setup("pnpx",454,G__wave_dict_629_0_124, 121, -1, -1, 0, 6, 3, 1, 0, 
"F - - 0 - fp F - - 0 - fx "
"F - - 0 - am F - - 0 - AM "
"F - - 0 - u F - - 0 - v", (char*)NULL, (void*) G__func2void( (void (*)(float*, float*, float*, float*, float*, float*))(&network::pnpx) ), 0);
   G__memfunc_setup("dspx",447,G__wave_dict_629_0_125, 121, -1, -1, 0, 4, 3, 1, 0, 
"F - - 0 - u F - - 0 - v "
"F - - 0 - am F - - 0 - AM", (char*)NULL, (void*) G__func2void( (void (*)(float*, float*, float*, float*))(&network::dspx) ), 0);
   G__memfunc_setup("dspx",447,G__wave_dict_629_0_126, 121, -1, -1, 0, 6, 3, 1, 0, 
"F - - 0 - fp F - - 0 - fx "
"F - - 0 - am F - - 0 - AM "
"F - - 0 - u F - - 0 - v", (char*)NULL, (void*) G__func2void( (void (*)(float*, float*, float*, float*, float*, float*))(&network::dspx) ), 0);
   G__memfunc_setup("_sse_MRA_ps",1067,G__wave_dict_629_0_127, 105, -1, -1, 0, 4, 1, 1, 0, 
"F - - 0 - amp F - - 0 - AMP "
"f - - 0 - Eo i - - 0 - K", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_sse_core_ps",1268,G__wave_dict_629_0_128, 105, -1, -1, 0, 2, 1, 1, 0, 
"f - - 0 - Eo f - - 0 - EE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("test_sse",874,G__wave_dict_629_0_129, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMRA",544,G__wave_dict_629_0_130, 105, -1, -1, 0, 4, 1, 1, 0, 
"F - - 0 - amp F - - 0 - AMP "
"f - - 0 - Eo i - - 0 - K", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cleanMRA",739,G__wave_dict_629_0_131, 105, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - Eo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("like",421,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "c - - 0 - _LIKE", "set likelihood type	", (void*) NULL, 0);
   G__memfunc_setup("wdm",328,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "g - - 0 - _WDM", "set wdm used/unused	", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_629_0_134, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&network::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_629_0_135, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&network::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_629_0_136, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&network::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_629_0_137, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&network::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_629_0_141, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_629_0_142, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&network::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_629_0_143, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&network::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_629_0_144, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&network::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_629_0_145, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&network::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~network", 904, G__wave_dict_629_0_146, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncclusterdata(void) {
   /* clusterdata */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_clusterdata));
   G__memfunc_setup("clusterdata",1180,G__wave_dict_630_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_clusterdata), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_630_0_2, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&clusterdata::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_630_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&clusterdata::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_630_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&clusterdata::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_630_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&clusterdata::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_630_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_630_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&clusterdata::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_630_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&clusterdata::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_630_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&clusterdata::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_630_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&clusterdata::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~clusterdata", 1306, G__wave_dict_630_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncnetcluster(void) {
   /* netcluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_netcluster));
   G__memfunc_setup("netcluster",1097,G__wave_dict_631_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_netcluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("netcluster",1097,G__wave_dict_631_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_netcluster), -1, 0, 1, 1, 1, 0, "u 'netcluster' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_631_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_netcluster), -1, 1, 1, 1, 1, 0, "u 'netcluster' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cpf",313,G__wave_dict_631_0_4, 107, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 0, 
"u 'netcluster' - 11 - - g - - 0 'false' - "
"i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_631_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clean",515,G__wave_dict_631_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' cID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_631_0_7, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_631_0_8, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("csize",542,G__wave_dict_631_0_9, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("esize",544,G__wave_dict_631_0_10, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "i - - 0 '2' k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("psize",555,G__wave_dict_631_0_11, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "i - - 0 '2' k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPixel",834,G__wave_dict_631_0_12, 85, G__get_linked_tagnum(&G__wave_dictLN_netpixel), -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - n k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setbpp",654,G__wave_dict_631_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - P", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getbpp",642,G__wave_dict_631_0_14, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setcore",757,G__wave_dict_631_0_15, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"g - - 0 - core i - - 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ignore",644,G__wave_dict_631_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setcuts",779,G__wave_dict_631_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cleanhalo",935,G__wave_dict_631_0_18, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "g - - 0 'false' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addhalo",717,G__wave_dict_631_0_19, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "g - - 0 'true' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_631_0_20, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'netcluster' - 1 - wc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("append",632,G__wave_dict_631_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'netpixel' - 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delink",631,G__wave_dict_631_0_22, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("select",640,G__wave_dict_631_0_23, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("supercluster",1329,G__wave_dict_631_0_24, 107, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 0, 
"c - - 0 - atype d - - 0 - S "
"g - - 0 - core", "used in 1G pipeline", (void*) NULL, 1);
   G__memfunc_setup("supercluster",1329,G__wave_dict_631_0_25, 107, -1, G__defined_typename("size_t"), 0, 5, 1, 1, 0, 
"c - - 0 - atype d - - 0 - S "
"d - - 0 - gap g - - 0 - core "
"U 'TH1F' - 0 'NULL' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("defragment",1053,G__wave_dict_631_0_26, 107, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 0, 
"d - - 0 - T d - - 0 - F "
"U 'TH2F' - 0 'NULL' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PlotClusters",1268,G__wave_dict_631_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cluster",770,G__wave_dict_631_0_28, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cluster",770,G__wave_dict_631_0_29, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "U 'netpixel' - 0 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cluster",770,G__wave_dict_631_0_30, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"i - - 0 - kt i - - 0 - kf", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get",320,G__wave_dict_631_0_31, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 5, 1, 1, 0, 
"C - - 0 - name k - 'size_t' 0 '0' index "
"c - - 0 ''R'' atype i - - 0 '1' type "
"g - - 0 'true' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getwave",755,G__wave_dict_631_0_32, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - - u 'WSeries<double>' - 1 - - "
"c - - 0 ''W'' - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMRAwave",979,G__wave_dict_631_0_33, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 5, 1, 1, 0, 
"U 'network' - 0 - net i - - 0 - ID "
"k - 'size_t' 0 - n c - - 0 ''S'' atype "
"i - - 0 '0' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__wave_dict_631_0_34, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"C - - 10 - file i - - 0 '0' app", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__wave_dict_631_0_35, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"E - - 0 - fp i - - 0 '0' app", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__wave_dict_631_0_36, 107, -1, G__defined_typename("size_t"), 0, 6, 1, 1, 0, 
"U 'TFile' - 0 - froot u 'TString' - 0 - tdir "
"u 'TString' - 0 - tname i - - 0 '0' app "
"i - - 0 '0' cycle i - - 0 '0' cID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__wave_dict_631_0_37, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__wave_dict_631_0_38, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"E - - 0 - file i - - 0 - maxPix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__wave_dict_631_0_39, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 7, 1, 1, 0, 
"U 'TFile' - 0 - froot u 'TString' - 0 - tdir "
"u 'TString' - 0 - tname i - - 0 '0' nmax "
"i - - 0 '0' cycle i - - 0 '0' rate "
"i - - 0 '0' cID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setlow",670,G__wave_dict_631_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sethigh",748,G__wave_dict_631_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getlow",658,G__wave_dict_631_0_42, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gethigh",736,G__wave_dict_631_0_43, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadTDamp",886,G__wave_dict_631_0_44, 107, -1, G__defined_typename("size_t"), 0, 4, 1, 1, 0, 
"u 'network' - 1 - net c - - 0 - c "
"k - 'size_t' 0 '10000' BATCH k - 'size_t' 0 '0' LOUD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadTDampSSE",1121,G__wave_dict_631_0_45, 107, -1, G__defined_typename("size_t"), 0, 4, 1, 1, 0, 
"u 'network' - 1 - net c - - 0 - c "
"k - 'size_t' 0 '10000' BATCH k - 'size_t' 0 '0' LOUD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mchirp",643,G__wave_dict_631_0_46, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mchirp5",696,G__wave_dict_631_0_47, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mchirp6",697,G__wave_dict_631_0_48, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("chirpDraw",932,G__wave_dict_631_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_631_0_50, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_631_0_52, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&netcluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_631_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&netcluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_631_0_54, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&netcluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_631_0_55, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&netcluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_631_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_631_0_60, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&netcluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_631_0_61, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&netcluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_631_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&netcluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_631_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&netcluster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~netcluster", 1223, G__wave_dict_631_0_64, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWSerieslEdoublegR(void) {
   /* WSeries<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR));
   G__memfunc_setup("WSeries<double>",1463,G__wave_dict_632_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WSeries<double>",1463,G__wave_dict_632_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 0, 1, 5, 1, 0, "u 'Wavelet' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WSeries<double>",1463,G__wave_dict_632_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 0, 2, 5, 1, 0, 
"u 'wavearray<double>' - 11 - value u 'Wavelet' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WSeries<double>",1463,G__wave_dict_632_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 0, 1, 1, 1, 0, "u 'WSeries<double>' - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_632_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'wavearray<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_632_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'WSeries<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_632_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__wave_dict_632_0_9, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'WSeries<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_632_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'WSeries<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_632_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'WSeries<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mul",334,G__wave_dict_632_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'WSeries<double>' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxLevel",1118,G__wave_dict_632_0_20, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLevel",824,G__wave_dict_632_0_21, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLevel",836,G__wave_dict_632_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setbpp",654,G__wave_dict_632_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getbpp",642,G__wave_dict_632_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wrate",547,G__wave_dict_632_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wrate",547,G__wave_dict_632_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setlow",670,G__wave_dict_632_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getlow",658,G__wave_dict_632_0_28, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sethigh",748,G__wave_dict_632_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gethigh",736,G__wave_dict_632_0_30, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxLayer",835,G__wave_dict_632_0_31, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sizeZero",859,G__wave_dict_632_0_32, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIndex",830,G__wave_dict_632_0_33, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlice",816,G__wave_dict_632_0_34, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 1, 1, 1, 0, "d - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resolution",1108,G__wave_dict_632_0_35, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("frequency",978,G__wave_dict_632_0_36, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("layer",541,G__wave_dict_632_0_37, 105, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayer",829,G__wave_dict_632_0_38, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' - 1 - w d - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putLayer",854,G__wave_dict_632_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' - 1 - - d - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSample",930,G__wave_dict_632_0_40, 100, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - n d - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putSample",955,G__wave_dict_632_0_41, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - a i - - 0 - n "
"d - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("resample",857,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - i - - 0 '6' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setWavelet",1060,G__wave_dict_632_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isWDM",452,G__wave_dict_632_0_45, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Forward",725,G__wave_dict_632_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Forward",725,G__wave_dict_632_0_47, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' - 1 - - i - - 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Forward",725,G__wave_dict_632_0_48, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<double>' - 1 - - u 'Wavelet' - 1 - - "
"i - - 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Inverse",732,G__wave_dict_632_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("bandpass",844,G__wave_dict_632_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<double>' - 1 - ts d - - 0 - flow "
"d - - 0 - fhigh i - - 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("bandpass",844,G__wave_dict_632_0_51, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - flow d - - 0 - fhigh "
"d - - 0 '0.' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxEnergy",944,G__wave_dict_632_0_52, 107, -1, G__defined_typename("size_t"), 0, 4, 1, 1, 0, 
"u 'wavearray<double>' - 1 - ts u 'Wavelet' - 1 - w "
"d - - 0 - t i - - 0 '1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scan",421,G__wave_dict_632_0_53, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'WSeries<double>' - 1 - - i - - 0 '-1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("median",622,G__wave_dict_632_0_54, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - t g - - 0 'false' norm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("white",545,G__wave_dict_632_0_56, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 0, 4, 1, 1, 0, 
"d - - 0 - - i - - 0 - - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("white",545,G__wave_dict_632_0_57, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'WSeries<double>' - 0 - ws i - - 0 '0' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("filter",646,G__wave_dict_632_0_58, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("variability",1184,G__wave_dict_632_0_59, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 0, 3, 1, 1, 0, 
"d - - 0 '0.' - d - - 0 '-1.' - "
"d - - 0 '-1.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fraction",854,G__wave_dict_632_0_60, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 '0.' - d - - 0 '0.' - "
"i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("significance",1251,G__wave_dict_632_0_61, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 '1.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rsignificance",1365,G__wave_dict_632_0_62, 100, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 '0' - d - - 0 '1.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rSignificance",1333,G__wave_dict_632_0_63, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 '1.' - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("gSignificance",1322,G__wave_dict_632_0_64, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 '1.' - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("percentile",1067,G__wave_dict_632_0_65, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 '0.' - i - - 0 '0' - "
"U 'WSeries<double>' - 0 'NULL' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("pixclean",852,G__wave_dict_632_0_66, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("coincidence",1140,G__wave_dict_632_0_67, 100, -1, -1, 0, 4, 1, 1, 0, 
"u 'WSeries<double>' - 1 - - i - - 0 '0' - "
"i - - 0 '0' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Coincidence",1108,G__wave_dict_632_0_68, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'WSeries<double>' - 1 - - d - - 0 '0.' - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calibrate",935,G__wave_dict_632_0_69, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 0, 7, 1, 1, 0, 
"k - 'size_t' 0 - - d - - 0 - - "
"U 'wavecomplex' 'd_complex' 0 - - U 'wavecomplex' 'd_complex' 0 - - "
"u 'wavearray<double>' - 1 - - u 'wavearray<double>' - 1 - - "
"k - 'size_t' 0 '0' ch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,G__wave_dict_632_0_70, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_632_0_72, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&WSeries<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_632_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WSeries<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_632_0_74, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&WSeries<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_632_0_75, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&WSeries<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_632_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_632_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WSeries<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_632_0_81, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WSeries<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_632_0_82, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WSeries<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_632_0_83, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WSeries<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~WSeries<double>", 1589, G__wave_dict_632_0_84, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWSerieslEfloatgR(void) {
   /* WSeries<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR));
   G__memfunc_setup("WSeries<float>",1362,G__wave_dict_633_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WSeries<float>",1362,G__wave_dict_633_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 0, 1, 5, 1, 0, "u 'Wavelet' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WSeries<float>",1362,G__wave_dict_633_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 0, 2, 5, 1, 0, 
"u 'wavearray<float>' - 11 - value u 'Wavelet' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WSeries<float>",1362,G__wave_dict_633_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 0, 1, 1, 1, 0, "u 'WSeries<float>' - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_633_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_633_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'WSeries<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_633_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "f - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__wave_dict_633_0_9, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'WSeries<float>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_633_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'WSeries<float>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_633_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'WSeries<float>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<float>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<float>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<float>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "f - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "f - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "f - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mul",334,G__wave_dict_633_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'WSeries<float>' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxLevel",1118,G__wave_dict_633_0_20, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLevel",824,G__wave_dict_633_0_21, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLevel",836,G__wave_dict_633_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setbpp",654,G__wave_dict_633_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getbpp",642,G__wave_dict_633_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wrate",547,G__wave_dict_633_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wrate",547,G__wave_dict_633_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setlow",670,G__wave_dict_633_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getlow",658,G__wave_dict_633_0_28, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sethigh",748,G__wave_dict_633_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gethigh",736,G__wave_dict_633_0_30, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxLayer",835,G__wave_dict_633_0_31, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sizeZero",859,G__wave_dict_633_0_32, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxIndex",830,G__wave_dict_633_0_33, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlice",816,G__wave_dict_633_0_34, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 1, 1, 1, 0, "d - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resolution",1108,G__wave_dict_633_0_35, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("frequency",978,G__wave_dict_633_0_36, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("layer",541,G__wave_dict_633_0_37, 105, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLayer",829,G__wave_dict_633_0_38, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<float>' - 1 - w d - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putLayer",854,G__wave_dict_633_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<float>' - 1 - - d - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSample",930,G__wave_dict_633_0_40, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - n d - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putSample",955,G__wave_dict_633_0_41, 102, -1, -1, 0, 3, 1, 1, 0, 
"f - - 0 - a i - - 0 - n "
"d - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("resample",857,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - i - - 0 '6' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setWavelet",1060,G__wave_dict_633_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isWDM",452,G__wave_dict_633_0_45, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Forward",725,G__wave_dict_633_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Forward",725,G__wave_dict_633_0_47, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<float>' - 1 - - i - - 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Forward",725,G__wave_dict_633_0_48, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<float>' - 1 - - u 'Wavelet' - 1 - - "
"i - - 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Inverse",732,G__wave_dict_633_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("bandpass",844,G__wave_dict_633_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<float>' - 1 - ts d - - 0 - flow "
"d - - 0 - fhigh i - - 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("bandpass",844,G__wave_dict_633_0_51, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - flow d - - 0 - fhigh "
"d - - 0 '0.' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxEnergy",944,G__wave_dict_633_0_52, 107, -1, G__defined_typename("size_t"), 0, 4, 1, 1, 0, 
"u 'wavearray<float>' - 1 - ts u 'Wavelet' - 1 - w "
"d - - 0 - t i - - 0 '1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scan",421,G__wave_dict_633_0_53, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'WSeries<float>' - 1 - - i - - 0 '-1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("median",622,G__wave_dict_633_0_54, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - t g - - 0 'false' norm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,(G__InterfaceMethod) NULL,121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("white",545,G__wave_dict_633_0_56, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 0, 4, 1, 1, 0, 
"d - - 0 - - i - - 0 - - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("white",545,G__wave_dict_633_0_57, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'WSeries<double>' - 0 - ws i - - 0 '0' mode", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("filter",646,G__wave_dict_633_0_58, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("variability",1184,G__wave_dict_633_0_59, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEfloatgR), -1, 0, 3, 1, 1, 0, 
"d - - 0 '0.' - d - - 0 '-1.' - "
"d - - 0 '-1.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fraction",854,G__wave_dict_633_0_60, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 '0.' - d - - 0 '0.' - "
"i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("significance",1251,G__wave_dict_633_0_61, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 '1.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rsignificance",1365,G__wave_dict_633_0_62, 100, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 '0' - d - - 0 '1.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rSignificance",1333,G__wave_dict_633_0_63, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 '1.' - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("gSignificance",1322,G__wave_dict_633_0_64, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 '1.' - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("percentile",1067,G__wave_dict_633_0_65, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 '0.' - i - - 0 '0' - "
"U 'WSeries<float>' - 0 'NULL' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("pixclean",852,G__wave_dict_633_0_66, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("coincidence",1140,G__wave_dict_633_0_67, 100, -1, -1, 0, 4, 1, 1, 0, 
"u 'WSeries<float>' - 1 - - i - - 0 '0' - "
"i - - 0 '0' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Coincidence",1108,G__wave_dict_633_0_68, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'WSeries<float>' - 1 - - d - - 0 '0.' - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calibrate",935,G__wave_dict_633_0_69, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 0, 7, 1, 1, 0, 
"k - 'size_t' 0 - - d - - 0 - - "
"U 'wavecomplex' 'd_complex' 0 - - U 'wavecomplex' 'd_complex' 0 - - "
"u 'wavearray<double>' - 1 - - u 'wavearray<double>' - 1 - - "
"k - 'size_t' 0 '0' ch", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,G__wave_dict_633_0_70, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_633_0_72, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&WSeries<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_633_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WSeries<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_633_0_74, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&WSeries<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_633_0_75, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&WSeries<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_633_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_633_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WSeries<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_633_0_81, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WSeries<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_633_0_82, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WSeries<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_633_0_83, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WSeries<float>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~WSeries<float>", 1488, G__wave_dict_633_0_84, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWaveDWTlEfloatgR(void) {
   /* WaveDWT<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR));
   G__memfunc_setup("WaveDWT<float>",1298,G__wave_dict_634_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR), -1, 0, 4, 1, 1, 0, 
"i - - 0 '1' mH i - - 0 '1' mL "
"i - - 0 '0' tree i 'BORDER' - 0 'B_CYCLE' border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WaveDWT<float>",1298,G__wave_dict_634_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WaveDWT<float>",1298,G__wave_dict_634_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'WaveDWT<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,G__wave_dict_634_0_5, 85, G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxLevel",1118,G__wave_dict_634_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxLevel",1118,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlice",816,G__wave_dict_634_0_8, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlice",816,G__wave_dict_634_0_9, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 2, 1, 1, 0, 
"i - - 10 - - i - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDamp",790,G__wave_dict_634_0_10, 102, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - j i - - 0 - k "
"c - - 0 ''p'' c", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDvec",790,G__wave_dict_634_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 3, 1, 1, 0, 
"i - - 0 - j i - - 0 - k "
"c - - 0 ''p'' c", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDvecSSE",1025,G__wave_dict_634_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 4, 1, 1, 0, 
"i - - 0 - j i - - 0 - k "
"c - - 0 - c U 'SSeries<double>' - 0 - pss", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTFvec",792,G__wave_dict_634_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - j u 'wavearray<float>' - 1 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDFsize",985,G__wave_dict_634_0_14, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("allocate",837,G__wave_dict_634_0_15, 103, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - - F - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__wave_dict_634_0_16, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("release",737,G__wave_dict_634_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("t2w",285,G__wave_dict_634_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("w2t",285,G__wave_dict_634_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forwardFWT",998,G__wave_dict_634_0_20, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"D - - 10 - - D - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverseFWT",1005,G__wave_dict_634_0_21, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"D - - 10 - - D - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("predict",747,G__wave_dict_634_0_22, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"D - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("update",643,G__wave_dict_634_0_23, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"D - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,G__wave_dict_634_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,G__wave_dict_634_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_634_0_26, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&WaveDWT<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_634_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WaveDWT<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_634_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&WaveDWT<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_634_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&WaveDWT<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_634_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_634_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WaveDWT<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_634_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WaveDWT<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_634_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WaveDWT<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_634_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WaveDWT<float>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~WaveDWT<float>", 1424, G__wave_dict_634_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_634_0_39, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEfloatgR), -1, 1, 1, 1, 1, 0, "u 'WaveDWT<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSSerieslEdoublegR(void) {
   /* SSeries<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR));
   G__memfunc_setup("SSeries<double>",1459,G__wave_dict_635_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSeries<double>",1459,G__wave_dict_635_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSeries<double>",1459,G__wave_dict_635_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' - 11 - value u 'Wavelet' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSeries<double>",1459,G__wave_dict_635_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), -1, 0, 1, 1, 1, 0, "u 'WSeries<double>' - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__wave_dict_635_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'WSeries<double>' - 0 - pws", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCore",658,G__wave_dict_635_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - ifoID U 'netcluster' - 0 - pwc "
"i - - 0 '0' ID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHalo",688,G__wave_dict_635_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 '0.042' maxTau i - - 0 '1' lHalo "
"i - - 0 '-1' tHalo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHaloSlice",1172,G__wave_dict_635_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' eslice", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHaloLayer",1185,G__wave_dict_635_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHaloDelay",1171,G__wave_dict_635_0_10, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSparseSize",1321,G__wave_dict_635_0_11, 105, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' bcore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSTFdata",935,G__wave_dict_635_0_12, 103, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - index U 'SymmArraySSE<float>' - 0 - pS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSparseIndex",1414,G__wave_dict_635_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 0, 1, 1, 1, 0, "g - - 0 'true' bcore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetSparseTable",1625,G__wave_dict_635_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateSparseTable",1721,G__wave_dict_635_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Expand",608,G__wave_dict_635_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' bcore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clean",483,G__wave_dict_635_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Shrink",623,G__wave_dict_635_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlice",784,G__wave_dict_635_0_19, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayer",797,G__wave_dict_635_0_20, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_635_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'WSeries<double>' - 0 'NULL' pws g - - 0 'true' reset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayers",912,G__wave_dict_635_0_22, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlices",899,G__wave_dict_635_0_23, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFreqResolution",1762,G__wave_dict_635_0_24, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeResolution",1763,G__wave_dict_635_0_25, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap00",670,G__wave_dict_635_0_26, 102, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap90",679,G__wave_dict_635_0_27, 102, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap00",670,G__wave_dict_635_0_28, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - slice i - - 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap90",679,G__wave_dict_635_0_29, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - slice i - - 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap00",682,G__wave_dict_635_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - index d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap90",691,G__wave_dict_635_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - index d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap00",682,G__wave_dict_635_0_32, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - slice i - - 0 - layer "
"d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap90",691,G__wave_dict_635_0_33, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - slice i - - 0 - layer "
"d - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Core",393,G__wave_dict_635_0_34, 115, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - slice i - - 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Core",393,G__wave_dict_635_0_35, 115, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("binarySearch",1243,G__wave_dict_635_0_36, 105, -1, -1, 0, 4, 1, 1, 0, 
"I - - 0 - array i - - 0 - start "
"i - - 0 - end i - - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("binarySearch",1243,G__wave_dict_635_0_37, 105, -1, -1, 0, 3, 1, 1, 0, 
"I - - 0 - array i - - 0 - size "
"i - - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckWaveletType",1624,G__wave_dict_635_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_635_0_39, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SSeries<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_635_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SSeries<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_635_0_41, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SSeries<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_635_0_42, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SSeries<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_635_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_635_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SSeries<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_635_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SSeries<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_635_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SSeries<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_635_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SSeries<double>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SSeries<double>", 1459, G__wave_dict_635_0_51, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), -1, 0, 1, 1, 1, 0, "u 'SSeries<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SSeries<double>", 1585, G__wave_dict_635_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_635_0_53, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'SSeries<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWaveDWTlEdoublegR(void) {
   /* WaveDWT<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR));
   G__memfunc_setup("WaveDWT<double>",1399,G__wave_dict_636_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR), -1, 0, 4, 1, 1, 0, 
"i - - 0 '1' mH i - - 0 '1' mL "
"i - - 0 '0' tree i 'BORDER' - 0 'B_CYCLE' border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WaveDWT<double>",1399,G__wave_dict_636_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WaveDWT<double>",1399,G__wave_dict_636_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'WaveDWT<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,G__wave_dict_636_0_5, 85, G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxLevel",1118,G__wave_dict_636_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxLevel",1118,(G__InterfaceMethod) NULL,105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlice",816,G__wave_dict_636_0_8, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlice",816,G__wave_dict_636_0_9, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 2, 1, 1, 0, 
"i - - 10 - - i - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDamp",790,G__wave_dict_636_0_10, 102, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - j i - - 0 - k "
"c - - 0 ''p'' c", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDvec",790,G__wave_dict_636_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 3, 1, 1, 0, 
"i - - 0 - j i - - 0 - k "
"c - - 0 ''p'' c", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDvecSSE",1025,G__wave_dict_636_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 4, 1, 1, 0, 
"i - - 0 - j i - - 0 - k "
"c - - 0 - c U 'SSeries<double>' - 0 - pss", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTFvec",792,G__wave_dict_636_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - j u 'wavearray<float>' - 1 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDFsize",985,G__wave_dict_636_0_14, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("allocate",837,G__wave_dict_636_0_15, 103, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - - D - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__wave_dict_636_0_16, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("release",737,G__wave_dict_636_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("t2w",285,G__wave_dict_636_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("w2t",285,G__wave_dict_636_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forwardFWT",998,G__wave_dict_636_0_20, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"D - - 10 - - D - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverseFWT",1005,G__wave_dict_636_0_21, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"D - - 10 - - D - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("predict",747,G__wave_dict_636_0_22, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"D - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("update",643,G__wave_dict_636_0_23, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"D - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,G__wave_dict_636_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,G__wave_dict_636_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_636_0_26, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&WaveDWT<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_636_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WaveDWT<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_636_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&WaveDWT<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_636_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&WaveDWT<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_636_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_636_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WaveDWT<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_636_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WaveDWT<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_636_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WaveDWT<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_636_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WaveDWT<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~WaveDWT<double>", 1525, G__wave_dict_636_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_636_0_39, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_WaveDWTlEdoublegR), -1, 1, 1, 1, 1, 0, "u 'WaveDWT<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEnetpixelcOallocatorlEnetpixelgRsPgR(void) {
   /* vector<netpixel,allocator<netpixel> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_638_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_netpixel), G__defined_typename("vector<netpixel,allocator<netpixel> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<netpixel,allocator<netpixel> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_638_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_netpixel), G__defined_typename("vector<netpixel,allocator<netpixel> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<netpixel,allocator<netpixel> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_638_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_638_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_638_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiteratorgR), G__defined_typename("vector<netpixel,allocator<netpixel> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_638_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiteratorgR), G__defined_typename("vector<netpixel,allocator<netpixel> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_638_0_7, 107, -1, G__defined_typename("vector<netpixel,allocator<netpixel> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_638_0_8, 107, -1, G__defined_typename("vector<netpixel,allocator<netpixel> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_638_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<netpixel,allocator<netpixel> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_638_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<netpixel,allocator<netpixel> >::size_type' 0 - sz u 'netpixel' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_638_0_11, 107, -1, G__defined_typename("vector<netpixel,allocator<netpixel> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_638_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_638_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_netpixel), G__defined_typename("vector<netpixel,allocator<netpixel> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<netpixel,allocator<netpixel> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_638_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_netpixel), G__defined_typename("vector<netpixel,allocator<netpixel> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<netpixel,allocator<netpixel> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<netpixel,allocator<netpixel> >",3686,G__wave_dict_638_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<netpixel,allocator<netpixel> >",3686,G__wave_dict_638_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<netpixel,allocator<netpixel> >::size_type' 0 - n u 'netpixel' - 11 'netpixel()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<netpixel,allocator<netpixel> >",3686,G__wave_dict_638_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<netpixel,allocator<netpixel> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<netpixel,allocator<netpixel> >",3686,G__wave_dict_638_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<netpixel,allocator<netpixel> >::iterator' 'vector<netpixel,allocator<netpixel> >::const_iterator' 10 - first u 'vector<netpixel,allocator<netpixel> >::iterator' 'vector<netpixel,allocator<netpixel> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_638_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<netpixel,allocator<netpixel> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_638_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<netpixel,allocator<netpixel> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_638_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_netpixel), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_638_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_netpixel), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_638_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'netpixel' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_638_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<netpixel,allocator<netpixel> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_638_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<netpixel,allocator<netpixel> >::iterator' - 0 - position u 'netpixel' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_638_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<netpixel,allocator<netpixel> >::iterator' - 0 - position u 'vector<netpixel,allocator<netpixel> >::iterator' 'vector<netpixel,allocator<netpixel> >::const_iterator' 10 - first "
"u 'vector<netpixel,allocator<netpixel> >::iterator' 'vector<netpixel,allocator<netpixel> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_638_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<netpixel,allocator<netpixel> >::iterator' - 0 - position k - 'vector<netpixel,allocator<netpixel> >::size_type' 0 - n "
"u 'netpixel' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_638_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_638_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<netpixel,allocator<netpixel> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_638_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<netpixel,allocator<netpixel> >::iterator' - 0 - first u 'vector<netpixel,allocator<netpixel> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_638_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<netpixel,allocator<netpixel> >", 3812, G__wave_dict_638_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEclusterdatacOallocatorlEclusterdatagRsPgR(void) {
   /* vector<clusterdata,allocator<clusterdata> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_642_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_clusterdata), G__defined_typename("vector<clusterdata,allocator<clusterdata> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<clusterdata,allocator<clusterdata> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_642_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_clusterdata), G__defined_typename("vector<clusterdata,allocator<clusterdata> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<clusterdata,allocator<clusterdata> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_642_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_642_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_642_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiteratorgR), G__defined_typename("vector<clusterdata,allocator<clusterdata> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_642_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiteratorgR), G__defined_typename("vector<clusterdata,allocator<clusterdata> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_642_0_7, 107, -1, G__defined_typename("vector<clusterdata,allocator<clusterdata> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_642_0_8, 107, -1, G__defined_typename("vector<clusterdata,allocator<clusterdata> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_642_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<clusterdata,allocator<clusterdata> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_642_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<clusterdata,allocator<clusterdata> >::size_type' 0 - sz u 'clusterdata' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_642_0_11, 107, -1, G__defined_typename("vector<clusterdata,allocator<clusterdata> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_642_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_642_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_clusterdata), G__defined_typename("vector<clusterdata,allocator<clusterdata> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<clusterdata,allocator<clusterdata> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_642_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_clusterdata), G__defined_typename("vector<clusterdata,allocator<clusterdata> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<clusterdata,allocator<clusterdata> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<clusterdata,allocator<clusterdata> >",4300,G__wave_dict_642_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<clusterdata,allocator<clusterdata> >",4300,G__wave_dict_642_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<clusterdata,allocator<clusterdata> >::size_type' 0 - n u 'clusterdata' - 11 'clusterdata()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<clusterdata,allocator<clusterdata> >",4300,G__wave_dict_642_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<clusterdata,allocator<clusterdata> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<clusterdata,allocator<clusterdata> >",4300,G__wave_dict_642_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<clusterdata,allocator<clusterdata> >::iterator' 'vector<clusterdata,allocator<clusterdata> >::const_iterator' 10 - first u 'vector<clusterdata,allocator<clusterdata> >::iterator' 'vector<clusterdata,allocator<clusterdata> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_642_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<clusterdata,allocator<clusterdata> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_642_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<clusterdata,allocator<clusterdata> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_642_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_clusterdata), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_642_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_clusterdata), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_642_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'clusterdata' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_642_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<clusterdata,allocator<clusterdata> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_642_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<clusterdata,allocator<clusterdata> >::iterator' - 0 - position u 'clusterdata' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_642_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<clusterdata,allocator<clusterdata> >::iterator' - 0 - position u 'vector<clusterdata,allocator<clusterdata> >::iterator' 'vector<clusterdata,allocator<clusterdata> >::const_iterator' 10 - first "
"u 'vector<clusterdata,allocator<clusterdata> >::iterator' 'vector<clusterdata,allocator<clusterdata> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_642_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<clusterdata,allocator<clusterdata> >::iterator' - 0 - position k - 'vector<clusterdata,allocator<clusterdata> >::size_type' 0 - n "
"u 'clusterdata' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_642_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_642_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<clusterdata,allocator<clusterdata> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_642_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<clusterdata,allocator<clusterdata> >::iterator' - 0 - first u 'vector<clusterdata,allocator<clusterdata> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_642_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<clusterdata,allocator<clusterdata> >", 4426, G__wave_dict_642_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR(void) {
   /* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_646_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_646_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_646_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_646_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_646_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_646_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_646_0_7, 107, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_646_0_8, 107, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_646_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_646_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - sz u 'vector<int,allocator<int> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_646_0_11, 107, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_646_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_646_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_646_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__wave_dict_646_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__wave_dict_646_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n u 'vector<int,allocator<int> >' - 11 '(vector<int,allocator<int> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__wave_dict_646_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__wave_dict_646_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - first u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_646_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_646_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_646_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_646_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_646_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_646_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_646_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_646_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - first "
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_646_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position k - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n "
"u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_646_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_646_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_646_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - first u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_646_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >", 7302, G__wave_dict_646_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR(void) {
   /* vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_650_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_650_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_650_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_650_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_650_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_650_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_650_0_7, 107, -1, G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_650_0_8, 107, -1, G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_650_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_650_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - sz u 'vector<float,allocator<float> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_650_0_11, 107, -1, G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_650_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_650_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_650_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), G__defined_typename("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__wave_dict_650_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__wave_dict_650_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n u 'vector<float,allocator<float> >' - 11 '(vector<float,allocator<float> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__wave_dict_650_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >",7988,G__wave_dict_650_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - first u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_650_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_650_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_650_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_650_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_650_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<float,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_650_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_650_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position u 'vector<float,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_650_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - first "
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_650_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position k - 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::size_type' 0 - n "
"u 'vector<float,allocator<float> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_650_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_650_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_650_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - first u 'vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_650_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >", 8114, G__wave_dict_650_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwatcLcLAlm_Base(void) {
   /* wat::Alm_Base */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_Base));
   G__memfunc_setup("Alm_Base",756,G__wave_dict_654_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_Base), -1, 0, 2, 1, 1, 0, 
"i - - 0 '0' lmax_ i - - 0 '0' mmax_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Num_Alms",796,G__wave_dict_654_0_2, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - l i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__wave_dict_654_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - lmax_ i - - 0 - mmax_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Lmax",402,G__wave_dict_654_0_4, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Mmax",403,G__wave_dict_654_0_5, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("index_l0",787,G__wave_dict_654_0_6, 105, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("index",536,G__wave_dict_654_0_7, 105, -1, -1, 0, 2, 1, 1, 8, 
"i - - 0 - l i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("conformable",1160,G__wave_dict_654_0_8, 103, -1, -1, 0, 1, 1, 1, 8, "u 'wat::Alm_Base' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_654_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wat::Alm_Base' - 1 - other", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Alm_Base", 756, G__wave_dict_654_0_10, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_Base), -1, 0, 1, 1, 1, 0, "u 'wat::Alm_Base' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Alm_Base", 882, G__wave_dict_654_0_11, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_654_0_12, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_Base), -1, 1, 1, 1, 1, 0, "u 'wat::Alm_Base' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwatcLcLAlm(void) {
   /* wat::Alm */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm));
   G__memfunc_setup("Alm",282,G__wave_dict_655_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm), -1, 0, 2, 1, 1, 0, 
"i - - 0 '0' lmax_ i - - 0 '0' mmax_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Alm",282,G__wave_dict_655_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm), -1, 0, 1, 1, 1, 0, "u 'wat::Alm' - 11 - alm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("smoothWithGauss",1593,G__wave_dict_655_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - fwhm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__wave_dict_655_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - psi d - - 0 - theta "
"d - - 0 - phi", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Alm", 408, G__wave_dict_655_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_655_0_6, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm), -1, 1, 1, 1, 1, 0, "u 'wat::Alm' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwatcLcLAlm_TemplatelEcomplexlEdoublegRsPgR(void) {
   /* wat::Alm_Template<complex<double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR));
   G__memfunc_setup("Alm_Template<complex<double> >",2876,G__wave_dict_656_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR), -1, 0, 2, 1, 1, 0, 
"i - - 0 '0' lmax_ i - - 0 '0' mmax_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G__wave_dict_656_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - lmax_ i - - 0 - mmax_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetToZero",911,G__wave_dict_656_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__wave_dict_656_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_complexlEdoublegR), -1, 1, 2, 1, 1, 0, 
"i - - 0 - l i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__wave_dict_656_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_complexlEdoublegR), -1, 1, 2, 1, 1, 9, 
"i - - 0 - l i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mstart",667,G__wave_dict_656_0_6, 85, G__get_linked_tagnum(&G__wave_dictLN_complexlEdoublegR), -1, 0, 1, 1, 1, 0, "i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mstart",667,G__wave_dict_656_0_7, 85, G__get_linked_tagnum(&G__wave_dictLN_complexlEdoublegR), -1, 0, 1, 1, 1, 9, "i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_656_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wat::Alm_Template<complex<double> >' - 1 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__wave_dict_656_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wat::Alm_Template<complex<double> >' - 11 - other", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Alm_Template<complex<double> >", 2876, G__wave_dict_656_0_10, (int) ('i'), 
G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR), -1, 0, 1, 1, 1, 0, "u 'wat::Alm_Template<complex<double> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Alm_Template<complex<double> >", 3002, G__wave_dict_656_0_11, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_656_0_12, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'wat::Alm_Template<complex<double> >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncskymap(void) {
   /* skymap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_skymap));
   G__memfunc_setup("skymap",661,G__wave_dict_657_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("skymap",661,G__wave_dict_657_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 0, 5, 1, 1, 0, 
"d - - 0 - - d - - 0 '0.' - "
"d - - 0 '180.' - d - - 0 '0.' - "
"d - - 0 '360.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("skymap",661,G__wave_dict_657_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("skymap",661,G__wave_dict_657_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 0, 1, 1, 1, 0, "C - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("skymap",661,G__wave_dict_657_0_5, 105, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - ifile u 'TString' - 0 '\"skymap\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("skymap",661,G__wave_dict_657_0_6, 105, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 0, 1, 1, 1, 0, "u 'skymap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_657_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 1, 1, 1, 1, 0, "u 'skymap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_657_0_8, 117, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 1, 1, 1, 1, 0, "u 'skymap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__wave_dict_657_0_9, 117, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 1, 1, 1, 1, 0, "u 'skymap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__wave_dict_657_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 1, 1, 1, 1, 0, "u 'skymap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__wave_dict_657_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 1, 1, 1, 1, 0, "u 'skymap' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_657_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__wave_dict_657_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_657_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_skymap), -1, 1, 1, 1, 1, 0, "d - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__wave_dict_657_0_15, 67, -1, -1, 1, 1, 1, 1, 0, "C - - 1 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__wave_dict_657_0_16, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__wave_dict_657_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - i d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_657_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - i d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_657_0_19, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_657_0_20, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "k - 'size_t' 0 - k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSkyIndex",1135,G__wave_dict_657_0_21, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"d - - 0 - th d - - 0 - ph", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__wave_dict_657_0_22, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - th d - - 0 - ph", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__wave_dict_657_0_23, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiStep",1021,G__wave_dict_657_0_24, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phiRA",468,G__wave_dict_657_0_25, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - ph d - - 0 - gps "
"g - - 0 'false' inverse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("phi2RA",518,G__wave_dict_657_0_26, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - ph d - - 0 - gps", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RA2phi",518,G__wave_dict_657_0_27, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - ph d - - 0 - gps", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRA",467,G__wave_dict_657_0_28, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__wave_dict_657_0_29, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaStep",1234,G__wave_dict_657_0_30, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDEC",524,G__wave_dict_657_0_31, 100, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max",326,G__wave_dict_657_0_32, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("min",324,G__wave_dict_657_0_33, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mean",417,G__wave_dict_657_0_34, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fraction",854,G__wave_dict_657_0_35, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("norm",444,G__wave_dict_657_0_36, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '0.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("downsample",1082,G__wave_dict_657_0_37, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<short>' - 1 - - k - 'size_t' 0 '4' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpBinary",1019,G__wave_dict_657_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump2fits",894,G__wave_dict_657_0_39, 121, -1, -1, 0, 6, 1, 1, 0, 
"C - - 10 - file d - - 0 '0' gps_obs "
"C - - 10 '\"\"' configur C - - 10 '\"\"' TTYPE1 "
"C - - 10 '\"\"' TUNIT1 c - - 0 ''x'' coordsys", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("DumpObject",1005,G__wave_dict_657_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getType",738,G__wave_dict_657_0_41, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("neighbors",961,G__wave_dict_657_0_42, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("median",622,G__wave_dict_657_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - radius", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("smoothing",984,G__wave_dict_657_0_44, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - fwhm i - - 0 '256' nlmax "
"i - - 0 '0' num_iter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__wave_dict_657_0_45, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - - 0 - psi d - - 0 - theta "
"d - - 0 - phi i - - 0 '256' nlmax "
"i - - 0 '0' num_iter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAlm",614,G__wave_dict_657_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wat::Alm' - 0 - alm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAlm",602,G__wave_dict_657_0_47, 117, G__get_linked_tagnum(&G__wave_dictLN_watcLcLAlm), -1, 0, 2, 1, 1, 0, 
"i - - 0 - nlmax i - - 0 '0' num_iter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_657_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - order", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRings",835,G__wave_dict_657_0_49, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingPixels",1349,G__wave_dict_657_0_50, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ring", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStartRingPixel",1760,G__wave_dict_657_0_51, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - ring", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEulerCharacteristic",2278,G__wave_dict_657_0_52, 105, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - threshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOrder",828,G__wave_dict_657_0_53, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_657_0_54, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&skymap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_657_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&skymap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_657_0_56, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&skymap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_657_0_57, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&skymap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_657_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_657_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&skymap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_657_0_63, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&skymap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_657_0_64, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&skymap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_657_0_65, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&skymap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~skymap", 787, G__wave_dict_657_0_66, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwavearraylEshortgR(void) {
   /* wavearray<short> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR));
   G__memfunc_setup("wavearray<short>",1660,G__wave_dict_658_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 0, 1, 1, 1, 0, "i - - 0 - -", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<short>",1660,G__wave_dict_658_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 0, 0, 1, 1, 0, "", "Default constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<short>",1660,G__wave_dict_658_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 0, 1, 1, 1, 0, "u 'wavearray<short>' - 11 - -", "copy Constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_658_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<short>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_658_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 1, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator[]",1060,G__wave_dict_658_0_6, 115, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_658_0_7, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_658_0_8, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_658_0_9, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'wavearray<short>' - 11 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__wave_dict_658_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<short>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_658_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<short>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_658_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<short>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator<<",996,G__wave_dict_658_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<short>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__wave_dict_658_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 1, 1, 1, 1, 0, "s - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_658_0_15, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 1, 1, 1, 1, 0, "s - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_658_0_16, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 1, 1, 1, 1, 0, "s - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_658_0_17, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEshortgR), -1, 1, 1, 1, 1, 0, "s - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator>>",1000,G__wave_dict_658_0_18, 67, -1, -1, 1, 1, 1, 1, 0, "C - - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Dump",406,G__wave_dict_658_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpBinary",1019,G__wave_dict_658_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpShort",934,G__wave_dict_658_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpObject",1005,G__wave_dict_658_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBinary",993,G__wave_dict_658_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadShort",908,G__wave_dict_658_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FFT",224,G__wave_dict_658_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform", (void*) NULL, 1);
   G__memfunc_setup("FFTW",311,G__wave_dict_658_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform West", (void*) NULL, 1);
   G__memfunc_setup("resetFFTW",858,G__wave_dict_658_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", "release FFTW memory", (void*) NULL, 1);
   G__memfunc_setup("Resample",825,G__wave_dict_658_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<short>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_658_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<short>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_658_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - i - - 0 '6' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_658_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_658_0_32, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_658_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_658_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_658_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_658_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_658_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_658_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("size",443,G__wave_dict_658_0_39, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSlice",828,G__wave_dict_658_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlice",816,G__wave_dict_658_0_41, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_658_0_42, 100, -1, -1, 0, 2, 1, 1, 8, 
"k - 'size_t' 0 '0' - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_658_0_43, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<short>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_658_0_44, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_658_0_45, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_658_0_46, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_658_0_47, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<short>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_658_0_48, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_658_0_49, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_658_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<short>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_658_0_51, 115, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_658_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<short>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("min",324,G__wave_dict_658_0_53, 115, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SQRT",330,G__wave_dict_658_0_54, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("hann",421,G__wave_dict_658_0_55, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("waveSort",859,G__wave_dict_658_0_56, 121, -1, -1, 0, 3, 1, 1, 8, 
"S - - 2 - pp k - 'size_t' 0 '0' l "
"k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSort",859,G__wave_dict_658_0_57, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 '0' l k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_658_0_58, 121, -1, -1, 0, 4, 1, 1, 8, 
"S - - 2 - pp k - 'size_t' 0 - l "
"k - 'size_t' 0 - r k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_658_0_59, 115, -1, -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - l k - 'size_t' 0 - r "
"k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_658_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRank",1326,G__wave_dict_658_0_61, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRankE",1395,G__wave_dict_658_0_62, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rank",428,G__wave_dict_658_0_63, 115, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.5' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLPRFilter",1172,G__wave_dict_658_0_64, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("spesla",648,G__wave_dict_658_0_65, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_658_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_658_0_67, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("white",545,G__wave_dict_658_0_68, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 4, 1, 1, 8, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("exponential",1191,G__wave_dict_658_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get",320,G__wave_dict_658_0_70, 115, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__wave_dict_658_0_71, 115, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uniform",768,G__wave_dict_658_0_72, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rand48",529,G__wave_dict_658_0_73, 108, -1, -1, 0, 1, 1, 1, 0, "l - - 0 '1024' k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatistics",1387,G__wave_dict_658_0_74, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - mean d - - 1 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_658_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cpf",313,G__wave_dict_658_0_76, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<short>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_658_0_77, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<short>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__wave_dict_658_0_78, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<short>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_658_0_79, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'wavearray<short>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_658_0_80, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "s - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wavecount",988,G__wave_dict_658_0_81, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_658_0_82, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<short>' - 11 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_658_0_83, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<short>' - 11 - - i - - 0 - - "
"i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_658_0_84, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<short>' - 11 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_658_0_85, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("compare",743,G__wave_dict_658_0_87, 105, -1, -1, 0, 2, 3, 1, 0, 
"Y - - 10 - x Y - - 10 - y", (char*)NULL, (void*) G__func2void( (int (*)(const void*, const void*))(&wavearray<short>::compare) ), 0);
   G__memfunc_setup("Class",502,G__wave_dict_658_0_88, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&wavearray<short>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_658_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<short>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_658_0_90, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&wavearray<short>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_658_0_91, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&wavearray<short>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_658_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_658_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<short>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_658_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<short>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_658_0_98, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<short>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_658_0_99, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<short>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~wavearray<short>", 1786, G__wave_dict_658_0_100, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwavearraylEintgR(void) {
   /* wavearray<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR));
   G__memfunc_setup("wavearray<int>",1431,G__wave_dict_659_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 0, 1, 1, 1, 0, "i - - 0 - -", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<int>",1431,G__wave_dict_659_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 0, 0, 1, 1, 0, "", "Default constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<int>",1431,G__wave_dict_659_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 0, 1, 1, 1, 0, "u 'wavearray<int>' - 11 - -", "copy Constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_659_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<int>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_659_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 1, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator[]",1060,G__wave_dict_659_0_6, 105, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_659_0_7, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_659_0_8, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_659_0_9, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'wavearray<int>' - 11 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__wave_dict_659_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<int>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_659_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<int>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_659_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<int>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator<<",996,G__wave_dict_659_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<int>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__wave_dict_659_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 1, 1, 1, 1, 0, "i - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_659_0_15, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 1, 1, 1, 1, 0, "i - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_659_0_16, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 1, 1, 1, 1, 0, "i - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_659_0_17, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 1, 1, 1, 1, 0, "i - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator>>",1000,G__wave_dict_659_0_18, 67, -1, -1, 1, 1, 1, 1, 0, "C - - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Dump",406,G__wave_dict_659_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpBinary",1019,G__wave_dict_659_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpShort",934,G__wave_dict_659_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpObject",1005,G__wave_dict_659_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBinary",993,G__wave_dict_659_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadShort",908,G__wave_dict_659_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FFT",224,G__wave_dict_659_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform", (void*) NULL, 1);
   G__memfunc_setup("FFTW",311,G__wave_dict_659_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform West", (void*) NULL, 1);
   G__memfunc_setup("resetFFTW",858,G__wave_dict_659_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", "release FFTW memory", (void*) NULL, 1);
   G__memfunc_setup("Resample",825,G__wave_dict_659_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<int>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_659_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<int>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_659_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - i - - 0 '6' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_659_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_659_0_32, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_659_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_659_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_659_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_659_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_659_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_659_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("size",443,G__wave_dict_659_0_39, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSlice",828,G__wave_dict_659_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlice",816,G__wave_dict_659_0_41, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_659_0_42, 100, -1, -1, 0, 2, 1, 1, 8, 
"k - 'size_t' 0 '0' - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_659_0_43, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<int>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_659_0_44, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_659_0_45, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_659_0_46, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_659_0_47, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<int>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_659_0_48, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_659_0_49, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_659_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<int>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_659_0_51, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_659_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<int>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("min",324,G__wave_dict_659_0_53, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SQRT",330,G__wave_dict_659_0_54, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("hann",421,G__wave_dict_659_0_55, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("waveSort",859,G__wave_dict_659_0_56, 121, -1, -1, 0, 3, 1, 1, 8, 
"I - - 2 - pp k - 'size_t' 0 '0' l "
"k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSort",859,G__wave_dict_659_0_57, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 '0' l k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_659_0_58, 121, -1, -1, 0, 4, 1, 1, 8, 
"I - - 2 - pp k - 'size_t' 0 - l "
"k - 'size_t' 0 - r k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_659_0_59, 105, -1, -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - l k - 'size_t' 0 - r "
"k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_659_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRank",1326,G__wave_dict_659_0_61, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRankE",1395,G__wave_dict_659_0_62, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rank",428,G__wave_dict_659_0_63, 105, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.5' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLPRFilter",1172,G__wave_dict_659_0_64, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("spesla",648,G__wave_dict_659_0_65, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_659_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_659_0_67, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("white",545,G__wave_dict_659_0_68, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 4, 1, 1, 8, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("exponential",1191,G__wave_dict_659_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get",320,G__wave_dict_659_0_70, 105, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__wave_dict_659_0_71, 105, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uniform",768,G__wave_dict_659_0_72, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rand48",529,G__wave_dict_659_0_73, 108, -1, -1, 0, 1, 1, 1, 0, "l - - 0 '1024' k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatistics",1387,G__wave_dict_659_0_74, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - mean d - - 1 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_659_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cpf",313,G__wave_dict_659_0_76, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<int>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_659_0_77, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<int>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__wave_dict_659_0_78, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<int>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_659_0_79, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'wavearray<int>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_659_0_80, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wavecount",988,G__wave_dict_659_0_81, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_659_0_82, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<int>' - 11 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_659_0_83, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<int>' - 11 - - i - - 0 - - "
"i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_659_0_84, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<int>' - 11 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_659_0_85, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("compare",743,G__wave_dict_659_0_87, 105, -1, -1, 0, 2, 3, 1, 0, 
"Y - - 10 - x Y - - 10 - y", (char*)NULL, (void*) G__func2void( (int (*)(const void*, const void*))(&wavearray<int>::compare) ), 0);
   G__memfunc_setup("Class",502,G__wave_dict_659_0_88, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&wavearray<int>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_659_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<int>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_659_0_90, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&wavearray<int>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_659_0_91, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&wavearray<int>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_659_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_659_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<int>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_659_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<int>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_659_0_98, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<int>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_659_0_99, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<int>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~wavearray<int>", 1557, G__wave_dict_659_0_100, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR(void) {
   /* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_661_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_661_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_661_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_661_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_661_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_661_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_661_0_7, 107, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_661_0_8, 107, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_661_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_661_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - sz u 'vector<double,allocator<double> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_661_0_11, 107, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_661_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_661_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_661_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__wave_dict_661_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__wave_dict_661_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n u 'vector<double,allocator<double> >' - 11 '(vector<double,allocator<double> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__wave_dict_661_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__wave_dict_661_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - first u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_661_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_661_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_661_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_661_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_661_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_661_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_661_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_661_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - first "
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_661_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position k - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n "
"u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_661_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_661_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_661_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - first u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_661_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >", 8518, G__wave_dict_661_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmArraySSElEfloatgR(void) {
   /* SymmArraySSE<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR));
   G__memfunc_setup("SymmArraySSE<float>",1824,G__wave_dict_664_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR), -1, 0, 1, 1, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmArraySSE<float>",1824,G__wave_dict_664_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR), -1, 0, 1, 1, 1, 0, "u 'SymmArraySSE<float>' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_664_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR), -1, 1, 1, 1, 1, 0, "u 'SymmArraySSE<float>' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_664_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_664_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nn", "new n", (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_664_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_664_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_664_0_8, 102, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSEPointer",972,G__wave_dict_664_0_9, 70, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSESize",646,G__wave_dict_664_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_664_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZeroExtraElements",1761,G__wave_dict_664_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocateSSE",1072,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "aligned allocation; uses SizeSSE, last; sets rec, zero", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_664_0_14, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmArraySSE<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_664_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArraySSE<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_664_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmArraySSE<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_664_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmArraySSE<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_664_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_664_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArraySSE<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_664_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArraySSE<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_664_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArraySSE<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_664_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArraySSE<float>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmArraySSE<float>", 1950, G__wave_dict_664_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdelayFilter(void) {
   /* delayFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_delayFilter));
   // automatic default constructor
   G__memfunc_setup("delayFilter", 1141, G__wave_dict_665_0_1, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_delayFilter), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("delayFilter", 1141, G__wave_dict_665_0_2, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_delayFilter), -1, 0, 1, 1, 1, 0, "u 'delayFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~delayFilter", 1267, G__wave_dict_665_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_665_0_4, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_delayFilter), -1, 1, 1, 1, 1, 0, "u 'delayFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdetectorParams(void) {
   /* detectorParams */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_detectorParams));
   // automatic default constructor
   G__memfunc_setup("detectorParams", 1470, G__wave_dict_666_0_1, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_detectorParams), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("detectorParams", 1470, G__wave_dict_666_0_2, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_detectorParams), -1, 0, 1, 1, 1, 0, "u 'detectorParams' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~detectorParams", 1596, G__wave_dict_666_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_666_0_4, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_detectorParams), -1, 1, 1, 1, 1, 0, "u 'detectorParams' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncdetector(void) {
   /* detector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_detector));
   G__memfunc_setup("detector",858,G__wave_dict_668_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_detector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("detector",858,G__wave_dict_668_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_detector), -1, 0, 2, 1, 1, 0, 
"C - - 0 - - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("detector",858,G__wave_dict_668_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_detector), -1, 0, 2, 1, 1, 0, 
"u 'detectorParams' - 0 - - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("detector",858,G__wave_dict_668_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_detector), -1, 0, 1, 1, 1, 0, "u 'detector' - 11 - -", "use with caution", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_668_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_detector), -1, 1, 1, 1, 1, 0, "u 'detector' - 11 - -", "use with caution", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_668_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_detector), -1, 1, 1, 1, 1, 0, "u 'WSeries<double>' - 11 - -", "use with caution", (void*) NULL, 0);
   G__memfunc_setup("operator<<",996,G__wave_dict_668_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_detector), -1, 1, 1, 1, 1, 0, "u 'detector' - 1 - -", "copy 'from' inj/rec stuff", (void*) NULL, 0);
   G__memfunc_setup("operator>>",1000,G__wave_dict_668_0_8, 117, G__get_linked_tagnum(&G__wave_dictLN_detector), -1, 1, 1, 1, 1, 0, "u 'detector' - 1 - -", "copy 'to'   inj/rec stuff", (void*) NULL, 0);
   G__memfunc_setup("antenna",741,G__wave_dict_668_0_9, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecomplex), -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDetectorParams",1758,G__wave_dict_668_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_detectorParams), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTau",618,G__wave_dict_668_0_11, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__wave_dict_668_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFilter",946,G__wave_dict_668_0_13, 107, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - - d - - 0 '0.' - "
"k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFilter",946,G__wave_dict_668_0_14, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'detector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeFilter",1169,G__wave_dict_668_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readFilter",1026,G__wave_dict_668_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearFilter",1133,G__wave_dict_668_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delay",527,G__wave_dict_668_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delay",527,G__wave_dict_668_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<double>' - 1 - - d - - 0 - - "
"d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delay",527,G__wave_dict_668_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' - 1 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("delay",527,G__wave_dict_668_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - u 'WSeries<double>' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHoT",587,G__wave_dict_668_0_22, 85, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTFmap",792,G__wave_dict_668_0_23, 85, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSTFind",872,G__wave_dict_668_0_24, 105, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSTFmap",875,G__wave_dict_668_0_25, 85, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ssize",558,G__wave_dict_668_0_26, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", "get size of sparse TF vector (number of resolutions)", (void*) NULL, 0);
   G__memfunc_setup("sclear",634,G__wave_dict_668_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", "clear", (void*) NULL, 0);
   G__memfunc_setup("addSTFmap",852,G__wave_dict_668_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'netcluster' - 0 - pwc d - - 0 '0.042' mTau", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getwave",755,G__wave_dict_668_0_29, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - - u 'netcluster' - 1 - - "
"c - - 0 - - k - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTau",630,G__wave_dict_668_0_30, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - - 0 - - d - - 0 '0.' - "
"d - - 0 '180.' - d - - 0 '0.' - "
"d - - 0 '360.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTau",630,G__wave_dict_668_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFpFx",704,G__wave_dict_668_0_32, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - - 0 - - d - - 0 '0.' - "
"d - - 0 '180.' - d - - 0 '0.' - "
"d - - 0 '360.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFpFx",704,G__wave_dict_668_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoise",830,G__wave_dict_668_0_34, 100, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - - i - - 0 '-1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setrms",670,G__wave_dict_668_0_35, 103, -1, -1, 0, 2, 1, 1, 0, 
"U 'netcluster' - 0 - - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("white",545,G__wave_dict_668_0_36, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 '0' dT i - - 0 '1' wtype "
"d - - 0 '0.' offset d - - 0 '0.' stride", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("shift",542,G__wave_dict_668_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("shift",542,G__wave_dict_668_0_38, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rotate",655,G__wave_dict_668_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("bandPass1G",932,G__wave_dict_668_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 '0.' f1 d - - 0 '0.' f2", "used by 1G", (void*) NULL, 0);
   G__memfunc_setup("bandPass",812,G__wave_dict_668_0_41, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - f1 d - - 0 - f2 "
"d - - 0 '0.' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("bandCut",705,G__wave_dict_668_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - f1 d - - 0 - f2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lowPass",745,G__wave_dict_668_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("highPass",823,G__wave_dict_668_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setsim",661,G__wave_dict_668_0_45, 107, -1, G__defined_typename("size_t"), 0, 5, 1, 1, 0, 
"u 'WSeries<double>' - 1 - - U 'vector<double,allocator<double> >' 'vector<double>' 0 - - "
"d - - 0 '5.' - d - - 0 '8.' - "
"g - - 0 'false' saveWF", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setsnr",671,G__wave_dict_668_0_46, 107, -1, G__defined_typename("size_t"), 0, 5, 1, 1, 0, 
"u 'wavearray<double>' - 1 - - U 'vector<double,allocator<double> >' 'vector<double>' 0 - - "
"U 'vector<double,allocator<double> >' 'vector<double>' 0 - - d - - 0 '5.' - "
"d - - 0 '8.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_668_0_47, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isBuiltin",947,G__wave_dict_668_0_49, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPolarization",1608,G__wave_dict_668_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "i 'POLARIZATION' - 0 'TENSOR' polarization", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPolarization",1596,G__wave_dict_668_0_51, 105, G__get_linked_tagnum(&G__wave_dictLN_POLARIZATION), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_SS",581,G__wave_dict_668_0_52, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_XX",591,G__wave_dict_668_0_53, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_NN",571,G__wave_dict_668_0_54, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get_XS",586,G__wave_dict_668_0_55, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWFfreq",907,G__wave_dict_668_0_56, 100, -1, -1, 0, 1, 1, 1, 0, "c - - 0 ''S'' atype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWFtime",908,G__wave_dict_668_0_57, 100, -1, -1, 0, 1, 1, 1, 0, "c - - 0 ''S'' atype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wfsave",652,G__wave_dict_668_0_58, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wfsave",652,G__wave_dict_668_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - wfSAVE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_668_0_60, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&detector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_668_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&detector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_668_0_62, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&detector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_668_0_63, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&detector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_668_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_668_0_68, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&detector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_668_0_69, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&detector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_668_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&detector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_668_0_71, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&detector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~detector", 984, G__wave_dict_668_0_72, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR(void) {
   /* vector<SSeries<double>,allocator<SSeries<double> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_670_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), G__defined_typename("vector<SSeries<double>,allocator<SSeries<double> > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SSeries<double>,allocator<SSeries<double> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_670_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), G__defined_typename("vector<SSeries<double>,allocator<SSeries<double> > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SSeries<double>,allocator<SSeries<double> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_670_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_670_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_670_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<SSeries<double>,allocator<SSeries<double> > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_670_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<SSeries<double>,allocator<SSeries<double> > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_670_0_7, 107, -1, G__defined_typename("vector<SSeries<double>,allocator<SSeries<double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_670_0_8, 107, -1, G__defined_typename("vector<SSeries<double>,allocator<SSeries<double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_670_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SSeries<double>,allocator<SSeries<double> > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_670_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SSeries<double>,allocator<SSeries<double> > >::size_type' 0 - sz u 'SSeries<double>' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_670_0_11, 107, -1, G__defined_typename("vector<SSeries<double>,allocator<SSeries<double> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_670_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_670_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), G__defined_typename("vector<SSeries<double>,allocator<SSeries<double> > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SSeries<double>,allocator<SSeries<double> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_670_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), G__defined_typename("vector<SSeries<double>,allocator<SSeries<double> > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SSeries<double>,allocator<SSeries<double> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SSeries<double>,allocator<SSeries<double> > >",4890,G__wave_dict_670_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SSeries<double>,allocator<SSeries<double> > >",4890,G__wave_dict_670_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SSeries<double>,allocator<SSeries<double> > >::size_type' 0 - n u 'SSeries<double>' - 11 '(SSeries<double>)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SSeries<double>,allocator<SSeries<double> > >",4890,G__wave_dict_670_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SSeries<double>,allocator<SSeries<double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SSeries<double>,allocator<SSeries<double> > >",4890,G__wave_dict_670_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SSeries<double>,allocator<SSeries<double> > >::iterator' 'vector<SSeries<double>,allocator<SSeries<double> > >::const_iterator' 10 - first u 'vector<SSeries<double>,allocator<SSeries<double> > >::iterator' 'vector<SSeries<double>,allocator<SSeries<double> > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_670_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SSeries<double>,allocator<SSeries<double> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_670_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SSeries<double>,allocator<SSeries<double> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_670_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_670_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEdoublegR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_670_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SSeries<double>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_670_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SSeries<double>,allocator<SSeries<double> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_670_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SSeries<double>,allocator<SSeries<double> > >::iterator' - 0 - position u 'SSeries<double>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_670_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SSeries<double>,allocator<SSeries<double> > >::iterator' - 0 - position u 'vector<SSeries<double>,allocator<SSeries<double> > >::iterator' 'vector<SSeries<double>,allocator<SSeries<double> > >::const_iterator' 10 - first "
"u 'vector<SSeries<double>,allocator<SSeries<double> > >::iterator' 'vector<SSeries<double>,allocator<SSeries<double> > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_670_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SSeries<double>,allocator<SSeries<double> > >::iterator' - 0 - position k - 'vector<SSeries<double>,allocator<SSeries<double> > >::size_type' 0 - n "
"u 'SSeries<double>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_670_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_670_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SSeries<double>,allocator<SSeries<double> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_670_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SSeries<double>,allocator<SSeries<double> > >::iterator' - 0 - first u 'vector<SSeries<double>,allocator<SSeries<double> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_670_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SSeries<double>,allocator<SSeries<double> > >", 5016, G__wave_dict_670_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR(void) {
   /* vector<delayFilter,allocator<delayFilter> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_674_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_delayFilter), G__defined_typename("vector<delayFilter,allocator<delayFilter> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<delayFilter,allocator<delayFilter> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_674_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_delayFilter), G__defined_typename("vector<delayFilter,allocator<delayFilter> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<delayFilter,allocator<delayFilter> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_674_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_674_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_674_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiteratorgR), G__defined_typename("vector<delayFilter,allocator<delayFilter> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_674_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiteratorgR), G__defined_typename("vector<delayFilter,allocator<delayFilter> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_674_0_7, 107, -1, G__defined_typename("vector<delayFilter,allocator<delayFilter> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_674_0_8, 107, -1, G__defined_typename("vector<delayFilter,allocator<delayFilter> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_674_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<delayFilter,allocator<delayFilter> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_674_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<delayFilter,allocator<delayFilter> >::size_type' 0 - sz u 'delayFilter' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_674_0_11, 107, -1, G__defined_typename("vector<delayFilter,allocator<delayFilter> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_674_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_674_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_delayFilter), G__defined_typename("vector<delayFilter,allocator<delayFilter> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<delayFilter,allocator<delayFilter> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_674_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_delayFilter), G__defined_typename("vector<delayFilter,allocator<delayFilter> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<delayFilter,allocator<delayFilter> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<delayFilter,allocator<delayFilter> >",4222,G__wave_dict_674_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<delayFilter,allocator<delayFilter> >",4222,G__wave_dict_674_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<delayFilter,allocator<delayFilter> >::size_type' 0 - n u 'delayFilter' - 11 'delayFilter()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<delayFilter,allocator<delayFilter> >",4222,G__wave_dict_674_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<delayFilter,allocator<delayFilter> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<delayFilter,allocator<delayFilter> >",4222,G__wave_dict_674_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<delayFilter,allocator<delayFilter> >::iterator' 'vector<delayFilter,allocator<delayFilter> >::const_iterator' 10 - first u 'vector<delayFilter,allocator<delayFilter> >::iterator' 'vector<delayFilter,allocator<delayFilter> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_674_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<delayFilter,allocator<delayFilter> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_674_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<delayFilter,allocator<delayFilter> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_674_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_delayFilter), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_674_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_delayFilter), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_674_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'delayFilter' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_674_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<delayFilter,allocator<delayFilter> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_674_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<delayFilter,allocator<delayFilter> >::iterator' - 0 - position u 'delayFilter' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_674_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<delayFilter,allocator<delayFilter> >::iterator' - 0 - position u 'vector<delayFilter,allocator<delayFilter> >::iterator' 'vector<delayFilter,allocator<delayFilter> >::const_iterator' 10 - first "
"u 'vector<delayFilter,allocator<delayFilter> >::iterator' 'vector<delayFilter,allocator<delayFilter> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_674_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<delayFilter,allocator<delayFilter> >::iterator' - 0 - position k - 'vector<delayFilter,allocator<delayFilter> >::size_type' 0 - n "
"u 'delayFilter' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_674_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_674_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<delayFilter,allocator<delayFilter> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_674_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<delayFilter,allocator<delayFilter> >::iterator' - 0 - first u 'vector<delayFilter,allocator<delayFilter> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_674_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<delayFilter,allocator<delayFilter> >", 4348, G__wave_dict_674_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmonster(void) {
   /* monster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_monster));
   G__memfunc_setup("monster",776,G__wave_dict_703_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_monster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("monster",776,G__wave_dict_703_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_monster), -1, 0, 2, 1, 1, 0, 
"U 'WDM<double>' - 2 - wdm i - - 0 - nRes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("monster",776,G__wave_dict_703_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_monster), -1, 0, 1, 1, 1, 0, "C - - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("monster",776,G__wave_dict_703_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_monster), -1, 0, 1, 1, 1, 0, "u 'monster' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deallocate",1038,G__wave_dict_703_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__wave_dict_703_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__wave_dict_703_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXTalk",804,G__wave_dict_703_0_8, 117, G__get_linked_tagnum(&G__wave_dictLN_xtalk), -1, 0, 4, 1, 1, 0, 
"i - - 0 - nLay1 k - 'size_t' 0 - indx1 "
"i - - 0 - nLay2 k - 'size_t' 0 - indx2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXTalk",804,G__wave_dict_703_0_9, 102, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - nLay1 i - - 0 - quad1 "
"k - 'size_t' 0 - indx1 i - - 0 - nLay2 "
"i - - 0 - quad2 k - 'size_t' 0 - indx2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXTalk",804,G__wave_dict_703_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 3, 1, 1, 0, 
"U 'netcluster' - 0 - pwc i - - 0 - id "
"g - - 0 'true' check", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXTalk",804,G__wave_dict_703_0_11, 85, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 1, 1, 1, 0, "i - - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXTalk",804,G__wave_dict_703_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_xtalk), -1, 0, 2, 1, 1, 0, 
"U 'netpixel' - 0 - p1 U 'netpixel' - 0 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_703_0_13, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&monster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_703_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&monster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_703_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&monster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_703_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&monster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__wave_dict_703_0_17, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__wave_dict_703_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__wave_dict_703_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_703_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_703_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&monster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_703_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&monster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_703_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&monster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_703_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&monster::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~monster", 902, G__wave_dict_703_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_703_0_26, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_monster), -1, 1, 1, 1, 1, 0, "u 'monster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWDMlEdoublegR(void) {
   /* WDM<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR));
   G__memfunc_setup("WDM<double>",989,G__wave_dict_704_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WDM<double>",989,G__wave_dict_704_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), -1, 0, 4, 1, 1, 0, 
"i - - 0 - M i - - 0 - K "
"i - - 0 '2' n i - - 0 '7' P", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WDM<double>",989,G__wave_dict_704_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'WDM<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxLevel",1118,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getBaseWave",1102,G__wave_dict_704_0_9, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - m i - - 0 - n "
"u 'SymmArray<double>' - 1 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBaseWaveQ",1183,G__wave_dict_704_0_10, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - m i - - 0 - n "
"u 'SymmArray<double>' - 1 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBaseWave",1102,G__wave_dict_704_0_11, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - j u 'wavearray<double>' - 1 - w "
"g - - 0 'false' Quad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,(G__InterfaceMethod) NULL,105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("t2w",285,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("w2t",285,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - flag", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("w2tQ",366,G__wave_dict_704_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPixelAmplitude",1767,G__wave_dict_704_0_16, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"i - - 0 - - g - - 0 'false' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPixelAmplitudeSSEOld",2289,G__wave_dict_704_0_17, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"i - - 0 - - g - - 0 'false' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPixelAmplitudeSSE",2002,G__wave_dict_704_0_18, 102, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - m i - - 0 - n "
"i - - 0 - dT g - - 0 - Quad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPixelAmplitudeSSE",2002,G__wave_dict_704_0_19, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - m i - - 0 - n "
"i - - 0 - t1 i - - 0 - t2 "
"F - - 0 - r g - - 0 - Quad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeShiftTest",1325,G__wave_dict_704_0_20, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeShiftTestSSE",1560,G__wave_dict_704_0_21, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDamp",790,(G__InterfaceMethod) NULL,102, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n i - - 0 - m "
"c - - 0 ''p'' c", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDvec",790,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 3, 1, 1, 0, 
"i - - 0 - j i - - 0 - K "
"c - - 0 ''p'' c", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDvecSSE",1025,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 4, 1, 1, 0, 
"i - - 0 - j i - - 0 - K "
"c - - 0 - c U 'SSeries<double>' - 0 - pss", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTFvec",792,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - j u 'wavearray<float>' - 1 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initFourier",1168,G__wave_dict_704_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFilter",934,G__wave_dict_704_0_27, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTDFilter",1098,G__wave_dict_704_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - nCoeffs i - - 0 '1' L", "L determines fractional increment tau/L", (void*) NULL, 0);
   G__memfunc_setup("getTDFilter2",1136,G__wave_dict_704_0_29, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 2, 1, 1, 0, 
"i - - 0 - n i - - 0 - L", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDFilter1",1135,G__wave_dict_704_0_30, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 2, 1, 1, 0, 
"i - - 0 - n i - - 0 - L", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlice",816,G__wave_dict_704_0_31, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 1, 1, 1, 0, "d - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTFMap",740,G__wave_dict_704_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_704_0_33, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "i - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDFsize",985,(G__InterfaceMethod) NULL,107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initSSEPointers",1523,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_704_0_36, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&WDM<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_704_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WDM<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_704_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&WDM<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_704_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&WDM<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_704_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_704_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WDM<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_704_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WDM<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_704_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WDM<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_704_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WDM<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~WDM<double>", 1115, G__wave_dict_704_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_704_0_49, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), -1, 1, 1, 1, 1, 0, "u 'WDM<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmArraylEdoublegR(void) {
   /* SymmArray<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR));
   G__memfunc_setup("SymmArray<double>",1690,G__wave_dict_705_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR), -1, 0, 1, 1, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmArray<double>",1690,G__wave_dict_705_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR), -1, 0, 1, 1, 1, 0, "u 'SymmArray<double>' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_705_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR), -1, 1, 1, 1, 1, 0, "u 'SymmArray<double>' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_705_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_705_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_705_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_705_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_705_0_8, 100, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_705_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize0",674,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_705_0_11, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmArray<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_705_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArray<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_705_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmArray<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_705_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmArray<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_705_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_705_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArray<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_705_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArray<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_705_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArray<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_705_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArray<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmArray<double>", 1816, G__wave_dict_705_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmObjArraylESymmArraySSElEfloatgRsPgR(void) {
   /* SymmObjArray<SymmArraySSE<float> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR));
   G__memfunc_setup("SymmObjArray<SymmArraySSE<float> >",3194,G__wave_dict_706_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR), -1, 0, 1, 5, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmObjArray<SymmArraySSE<float> >",3194,G__wave_dict_706_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR), -1, 0, 1, 5, 1, 0, "u 'SymmObjArray<SymmArraySSE<float> >' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_706_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR), -1, 1, 1, 1, 1, 0, "u 'SymmObjArray<SymmArraySSE<float> >' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_706_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - sz", "data is lost", (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_706_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_706_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_706_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR), -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_706_0_8, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize0",674,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "h - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_706_0_10, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmObjArray<SymmArraySSE<float> >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_706_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArraySSE<float> >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_706_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmObjArray<SymmArraySSE<float> >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_706_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmObjArray<SymmArraySSE<float> >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_706_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_706_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArraySSE<float> >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_706_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArraySSE<float> >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_706_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArraySSE<float> >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_706_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArraySSE<float> >::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmObjArray<SymmArraySSE<float> >", 3320, G__wave_dict_706_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwaveSegment(void) {
   /* waveSegment */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_waveSegment));
   // automatic default constructor
   G__memfunc_setup("waveSegment", 1158, G__wave_dict_769_0_1, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_waveSegment), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("waveSegment", 1158, G__wave_dict_769_0_2, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_waveSegment), -1, 0, 1, 1, 1, 0, "u 'waveSegment' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~waveSegment", 1284, G__wave_dict_769_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_769_0_4, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_waveSegment), -1, 1, 1, 1, 1, 0, "u 'waveSegment' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEdetectormUcOallocatorlEdetectormUgRsPgR(void) {
   /* vector<detector*,allocator<detector*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_771_0_1, 85, G__get_linked_tagnum(&G__wave_dictLN_detector), G__defined_typename("vector<detector*,allocator<detector*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<detector*,allocator<detector*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_771_0_2, 85, G__get_linked_tagnum(&G__wave_dictLN_detector), G__defined_typename("vector<detector*,allocator<detector*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<detector*,allocator<detector*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_771_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_771_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_771_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiteratorgR), G__defined_typename("vector<detector*,allocator<detector*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_771_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiteratorgR), G__defined_typename("vector<detector*,allocator<detector*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_771_0_7, 107, -1, G__defined_typename("vector<detector*,allocator<detector*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_771_0_8, 107, -1, G__defined_typename("vector<detector*,allocator<detector*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_771_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<detector*,allocator<detector*> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_771_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<detector*,allocator<detector*> >::size_type' 0 - sz U 'detector' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_771_0_11, 107, -1, G__defined_typename("vector<detector*,allocator<detector*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_771_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_771_0_13, 85, G__get_linked_tagnum(&G__wave_dictLN_detector), G__defined_typename("vector<detector*,allocator<detector*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<detector*,allocator<detector*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_771_0_14, 85, G__get_linked_tagnum(&G__wave_dictLN_detector), G__defined_typename("vector<detector*,allocator<detector*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<detector*,allocator<detector*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<detector*,allocator<detector*> >",3740,G__wave_dict_771_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<detector*,allocator<detector*> >",3740,G__wave_dict_771_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<detector*,allocator<detector*> >::size_type' 0 - n U 'detector' - 41 '(detector*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<detector*,allocator<detector*> >",3740,G__wave_dict_771_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<detector*,allocator<detector*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<detector*,allocator<detector*> >",3740,G__wave_dict_771_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<detector*,allocator<detector*> >::iterator' 'vector<detector*,allocator<detector*> >::const_iterator' 10 - first u 'vector<detector*,allocator<detector*> >::iterator' 'vector<detector*,allocator<detector*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_771_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<detector*,allocator<detector*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_771_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<detector*,allocator<detector*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_771_0_21, 85, G__get_linked_tagnum(&G__wave_dictLN_detector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_771_0_22, 85, G__get_linked_tagnum(&G__wave_dictLN_detector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_771_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'detector' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_771_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<detector*,allocator<detector*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_771_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<detector*,allocator<detector*> >::iterator' - 0 - position U 'detector' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_771_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<detector*,allocator<detector*> >::iterator' - 0 - position u 'vector<detector*,allocator<detector*> >::iterator' 'vector<detector*,allocator<detector*> >::const_iterator' 10 - first "
"u 'vector<detector*,allocator<detector*> >::iterator' 'vector<detector*,allocator<detector*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_771_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<detector*,allocator<detector*> >::iterator' - 0 - position k - 'vector<detector*,allocator<detector*> >::size_type' 0 - n "
"U 'detector' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_771_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_771_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<detector*,allocator<detector*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_771_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<detector*,allocator<detector*> >::iterator' - 0 - first u 'vector<detector*,allocator<detector*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_771_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<detector*,allocator<detector*> >", 3866, G__wave_dict_771_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEnetclustercOallocatorlEnetclustergRsPgR(void) {
   /* vector<netcluster,allocator<netcluster> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_775_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_netcluster), G__defined_typename("vector<netcluster,allocator<netcluster> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<netcluster,allocator<netcluster> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_775_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_netcluster), G__defined_typename("vector<netcluster,allocator<netcluster> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<netcluster,allocator<netcluster> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_775_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_775_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_775_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiteratorgR), G__defined_typename("vector<netcluster,allocator<netcluster> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_775_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiteratorgR), G__defined_typename("vector<netcluster,allocator<netcluster> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_775_0_7, 107, -1, G__defined_typename("vector<netcluster,allocator<netcluster> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_775_0_8, 107, -1, G__defined_typename("vector<netcluster,allocator<netcluster> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_775_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<netcluster,allocator<netcluster> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_775_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<netcluster,allocator<netcluster> >::size_type' 0 - sz u 'netcluster' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_775_0_11, 107, -1, G__defined_typename("vector<netcluster,allocator<netcluster> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_775_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_775_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_netcluster), G__defined_typename("vector<netcluster,allocator<netcluster> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<netcluster,allocator<netcluster> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_775_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_netcluster), G__defined_typename("vector<netcluster,allocator<netcluster> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<netcluster,allocator<netcluster> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<netcluster,allocator<netcluster> >",4134,G__wave_dict_775_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<netcluster,allocator<netcluster> >",4134,G__wave_dict_775_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<netcluster,allocator<netcluster> >::size_type' 0 - n u 'netcluster' - 11 'netcluster()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<netcluster,allocator<netcluster> >",4134,G__wave_dict_775_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<netcluster,allocator<netcluster> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<netcluster,allocator<netcluster> >",4134,G__wave_dict_775_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<netcluster,allocator<netcluster> >::iterator' 'vector<netcluster,allocator<netcluster> >::const_iterator' 10 - first u 'vector<netcluster,allocator<netcluster> >::iterator' 'vector<netcluster,allocator<netcluster> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_775_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<netcluster,allocator<netcluster> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_775_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<netcluster,allocator<netcluster> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_775_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_netcluster), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_775_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_netcluster), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_775_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'netcluster' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_775_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<netcluster,allocator<netcluster> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_775_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<netcluster,allocator<netcluster> >::iterator' - 0 - position u 'netcluster' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_775_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<netcluster,allocator<netcluster> >::iterator' - 0 - position u 'vector<netcluster,allocator<netcluster> >::iterator' 'vector<netcluster,allocator<netcluster> >::const_iterator' 10 - first "
"u 'vector<netcluster,allocator<netcluster> >::iterator' 'vector<netcluster,allocator<netcluster> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_775_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<netcluster,allocator<netcluster> >::iterator' - 0 - position k - 'vector<netcluster,allocator<netcluster> >::size_type' 0 - n "
"u 'netcluster' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_775_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_775_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<netcluster,allocator<netcluster> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_775_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<netcluster,allocator<netcluster> >::iterator' - 0 - first u 'vector<netcluster,allocator<netcluster> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_775_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<netcluster,allocator<netcluster> >", 4260, G__wave_dict_775_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEstringcOallocatorlEstringgRsPgR(void) {
   /* vector<string,allocator<string> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_778_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_string), G__defined_typename("vector<string,allocator<string> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_778_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_string), G__defined_typename("vector<string,allocator<string> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_778_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_778_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_778_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR), G__defined_typename("vector<string,allocator<string> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_778_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR), G__defined_typename("vector<string,allocator<string> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_778_0_7, 107, -1, G__defined_typename("vector<string,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_778_0_8, 107, -1, G__defined_typename("vector<string,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_778_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<string,allocator<string> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_778_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<string,allocator<string> >::size_type' 0 - sz u 'string' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_778_0_11, 107, -1, G__defined_typename("vector<string,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_778_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_778_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_string), G__defined_typename("vector<string,allocator<string> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_778_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_string), G__defined_typename("vector<string,allocator<string> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__wave_dict_778_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__wave_dict_778_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<string,allocator<string> >::size_type' 0 - n u 'string' - 11 'string()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__wave_dict_778_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__wave_dict_778_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - first u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_778_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_778_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_778_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_string), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_778_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_string), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_778_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_778_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_778_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - position u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_778_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - position u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - first "
"u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_778_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - position k - 'vector<string,allocator<string> >::size_type' 0 - n "
"u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_778_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_778_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_778_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - first u 'vector<string,allocator<string> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_778_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<string,allocator<string> >", 3392, G__wave_dict_778_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR(void) {
   /* vector<waveSegment,allocator<waveSegment> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_782_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_waveSegment), G__defined_typename("vector<waveSegment,allocator<waveSegment> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<waveSegment,allocator<waveSegment> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_782_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_waveSegment), G__defined_typename("vector<waveSegment,allocator<waveSegment> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<waveSegment,allocator<waveSegment> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_782_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_782_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_782_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiteratorgR), G__defined_typename("vector<waveSegment,allocator<waveSegment> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_782_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiteratorgR), G__defined_typename("vector<waveSegment,allocator<waveSegment> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_782_0_7, 107, -1, G__defined_typename("vector<waveSegment,allocator<waveSegment> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_782_0_8, 107, -1, G__defined_typename("vector<waveSegment,allocator<waveSegment> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_782_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<waveSegment,allocator<waveSegment> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_782_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<waveSegment,allocator<waveSegment> >::size_type' 0 - sz u 'waveSegment' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_782_0_11, 107, -1, G__defined_typename("vector<waveSegment,allocator<waveSegment> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_782_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_782_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_waveSegment), G__defined_typename("vector<waveSegment,allocator<waveSegment> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<waveSegment,allocator<waveSegment> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_782_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_waveSegment), G__defined_typename("vector<waveSegment,allocator<waveSegment> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<waveSegment,allocator<waveSegment> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<waveSegment,allocator<waveSegment> >",4256,G__wave_dict_782_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<waveSegment,allocator<waveSegment> >",4256,G__wave_dict_782_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<waveSegment,allocator<waveSegment> >::size_type' 0 - n u 'waveSegment' - 11 'waveSegment()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<waveSegment,allocator<waveSegment> >",4256,G__wave_dict_782_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<waveSegment,allocator<waveSegment> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<waveSegment,allocator<waveSegment> >",4256,G__wave_dict_782_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<waveSegment,allocator<waveSegment> >::iterator' 'vector<waveSegment,allocator<waveSegment> >::const_iterator' 10 - first u 'vector<waveSegment,allocator<waveSegment> >::iterator' 'vector<waveSegment,allocator<waveSegment> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_782_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<waveSegment,allocator<waveSegment> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_782_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<waveSegment,allocator<waveSegment> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_782_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_waveSegment), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_782_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_waveSegment), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_782_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'waveSegment' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_782_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<waveSegment,allocator<waveSegment> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_782_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<waveSegment,allocator<waveSegment> >::iterator' - 0 - position u 'waveSegment' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_782_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<waveSegment,allocator<waveSegment> >::iterator' - 0 - position u 'vector<waveSegment,allocator<waveSegment> >::iterator' 'vector<waveSegment,allocator<waveSegment> >::const_iterator' 10 - first "
"u 'vector<waveSegment,allocator<waveSegment> >::iterator' 'vector<waveSegment,allocator<waveSegment> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_782_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<waveSegment,allocator<waveSegment> >::iterator' - 0 - position k - 'vector<waveSegment,allocator<waveSegment> >::size_type' 0 - n "
"u 'waveSegment' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_782_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_782_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<waveSegment,allocator<waveSegment> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_782_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<waveSegment,allocator<waveSegment> >::iterator' - 0 - first u 'vector<waveSegment,allocator<waveSegment> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_782_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<waveSegment,allocator<waveSegment> >", 4382, G__wave_dict_782_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR(void) {
   /* vector<WDM<double>*,allocator<WDM<double>*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_786_0_1, 85, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), G__defined_typename("vector<WDM<double>*,allocator<WDM<double>*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<WDM<double>*,allocator<WDM<double>*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_786_0_2, 85, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), G__defined_typename("vector<WDM<double>*,allocator<WDM<double>*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<WDM<double>*,allocator<WDM<double>*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_786_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_786_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_786_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<WDM<double>*,allocator<WDM<double>*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_786_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<WDM<double>*,allocator<WDM<double>*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_786_0_7, 107, -1, G__defined_typename("vector<WDM<double>*,allocator<WDM<double>*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_786_0_8, 107, -1, G__defined_typename("vector<WDM<double>*,allocator<WDM<double>*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_786_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<WDM<double>*,allocator<WDM<double>*> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_786_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<WDM<double>*,allocator<WDM<double>*> >::size_type' 0 - sz U 'WDM<double>' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_786_0_11, 107, -1, G__defined_typename("vector<WDM<double>*,allocator<WDM<double>*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_786_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_786_0_13, 85, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), G__defined_typename("vector<WDM<double>*,allocator<WDM<double>*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<WDM<double>*,allocator<WDM<double>*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_786_0_14, 85, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), G__defined_typename("vector<WDM<double>*,allocator<WDM<double>*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<WDM<double>*,allocator<WDM<double>*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<WDM<double>*,allocator<WDM<double>*> >",4002,G__wave_dict_786_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<WDM<double>*,allocator<WDM<double>*> >",4002,G__wave_dict_786_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<WDM<double>*,allocator<WDM<double>*> >::size_type' 0 - n U 'WDM<double>' - 41 '(WDM<double>*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<WDM<double>*,allocator<WDM<double>*> >",4002,G__wave_dict_786_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<WDM<double>*,allocator<WDM<double>*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<WDM<double>*,allocator<WDM<double>*> >",4002,G__wave_dict_786_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<WDM<double>*,allocator<WDM<double>*> >::iterator' 'vector<WDM<double>*,allocator<WDM<double>*> >::const_iterator' 10 - first u 'vector<WDM<double>*,allocator<WDM<double>*> >::iterator' 'vector<WDM<double>*,allocator<WDM<double>*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_786_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<WDM<double>*,allocator<WDM<double>*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_786_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<WDM<double>*,allocator<WDM<double>*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_786_0_21, 85, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_786_0_22, 85, G__get_linked_tagnum(&G__wave_dictLN_WDMlEdoublegR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_786_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'WDM<double>' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_786_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<WDM<double>*,allocator<WDM<double>*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_786_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<WDM<double>*,allocator<WDM<double>*> >::iterator' - 0 - position U 'WDM<double>' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_786_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<WDM<double>*,allocator<WDM<double>*> >::iterator' - 0 - position u 'vector<WDM<double>*,allocator<WDM<double>*> >::iterator' 'vector<WDM<double>*,allocator<WDM<double>*> >::const_iterator' 10 - first "
"u 'vector<WDM<double>*,allocator<WDM<double>*> >::iterator' 'vector<WDM<double>*,allocator<WDM<double>*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_786_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<WDM<double>*,allocator<WDM<double>*> >::iterator' - 0 - position k - 'vector<WDM<double>*,allocator<WDM<double>*> >::size_type' 0 - n "
"U 'WDM<double>' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_786_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_786_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<WDM<double>*,allocator<WDM<double>*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_786_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<WDM<double>*,allocator<WDM<double>*> >::iterator' - 0 - first u 'vector<WDM<double>*,allocator<WDM<double>*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_786_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<WDM<double>*,allocator<WDM<double>*> >", 4128, G__wave_dict_786_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncinjection(void) {
   /* injection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_injection));
   G__memfunc_setup("injection",963,G__wave_dict_793_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_injection), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("injection",963,G__wave_dict_793_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_injection), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("injection",963,G__wave_dict_793_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_injection), -1, 0, 1, 1, 1, 0, "u 'injection' - 11 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("injection",963,G__wave_dict_793_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_injection), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("injection",963,G__wave_dict_793_0_5, 105, G__get_linked_tagnum(&G__wave_dictLN_injection), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - fName i - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_793_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_injection), -1, 1, 1, 1, 1, 0, "u 'injection' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntry",818,G__wave_dict_793_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntries",1018,G__wave_dict_793_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__wave_dict_793_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__wave_dict_793_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_793_0_11, 85, G__get_linked_tagnum(&G__wave_dictLN_TTree), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - fName i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_793_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Notify",633,G__wave_dict_793_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTree",732,G__wave_dict_793_0_14, 85, G__get_linked_tagnum(&G__wave_dictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_in",733,G__wave_dict_793_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'network' - 0 - - i - - 0 - - "
"g - - 0 'true' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("output",689,G__wave_dict_793_0_16, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TTree' - 0 - - U 'network' - 0 - - "
"d - - 0 - - g - - 0 'true' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Show",417,G__wave_dict_793_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_793_0_18, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&injection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_793_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&injection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_793_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&injection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_793_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&injection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__wave_dict_793_0_22, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__wave_dict_793_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__wave_dict_793_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_793_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_793_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&injection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_793_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&injection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_793_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&injection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_793_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&injection::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~injection", 1089, G__wave_dict_793_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwatplot(void) {
   /* watplot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_watplot));
   G__memfunc_setup("watplot",779,G__wave_dict_886_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_watplot), -1, 0, 5, 1, 1, 0, 
"C - - 0 'NULL' name i - - 0 '200' - "
"i - - 0 '20' - i - - 0 '800' - "
"i - - 0 '600' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_886_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("null",443,G__wave_dict_886_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__wave_dict_886_0_4, 121, -1, -1, 0, 10, 1, 1, 0, 
"u 'wavearray<double>' - 1 - - C - - 0 'NULL' - "
"i - - 0 '1' - d - - 0 '0.' - "
"d - - 0 '0.' - g - - 0 'false' - "
"f - - 0 '0.' - f - - 0 '0.' - "
"g - - 0 'false' - f - - 0 '0.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__wave_dict_886_0_5, 121, -1, -1, 0, 10, 1, 1, 0, 
"U 'wavearray<double>' - 0 - ts C - - 0 'NULL' o "
"i - - 0 '1' c d - - 0 '0.' t1 "
"d - - 0 '0.' t2 g - - 0 'false' fft "
"f - - 0 '0.' f1 f - - 0 '0.' f2 "
"g - - 0 'false' psd f - - 0 '0.' t3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__wave_dict_886_0_6, 121, -1, -1, 0, 10, 1, 1, 0, 
"U 'wavearray<float>' - 0 - ts C - - 0 'NULL' o "
"i - - 0 '1' c d - - 0 '0.' t1 "
"d - - 0 '0.' t2 g - - 0 'false' fft "
"f - - 0 '0.' f1 f - - 0 '0.' f2 "
"g - - 0 'false' psd f - - 0 '0.' t3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__wave_dict_886_0_7, 121, -1, -1, 0, 10, 1, 1, 0, 
"u 'wavearray<float>' - 1 - ts C - - 0 'NULL' o "
"i - - 0 '1' c d - - 0 '0.' t1 "
"d - - 0 '0.' t2 g - - 0 'false' fft "
"f - - 0 '0.' f1 f - - 0 '0.' f2 "
"g - - 0 'false' psd f - - 0 '0.' t3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__wave_dict_886_0_8, 121, -1, -1, 0, 10, 1, 1, 0, 
"U 'wavearray<int>' - 0 - ts C - - 0 'NULL' o "
"i - - 0 '1' c d - - 0 '0.' t1 "
"d - - 0 '0.' t2 g - - 0 'false' fft "
"f - - 0 '0.' f1 f - - 0 '0.' f2 "
"g - - 0 'false' psd f - - 0 '0.' t3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__wave_dict_886_0_9, 121, -1, -1, 0, 10, 1, 1, 0, 
"u 'wavearray<int>' - 1 - ts C - - 0 'NULL' o "
"i - - 0 '1' c d - - 0 '0.' t1 "
"d - - 0 '0.' t2 g - - 0 'false' fft "
"f - - 0 '0.' f1 f - - 0 '0.' f2 "
"g - - 0 'false' psd f - - 0 '0.' t3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__wave_dict_886_0_10, 121, -1, -1, 0, 7, 1, 1, 0, 
"u 'WSeries<double>' - 1 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' - "
"C - - 0 'NULL' - i - - 0 '256' - "
"i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__wave_dict_886_0_11, 121, -1, -1, 0, 7, 1, 1, 0, 
"U 'WSeries<double>' - 0 - tf i - - 0 '0' m "
"d - - 0 '0.' t1 d - - 0 '0.' t2 "
"C - - 0 'NULL' o i - - 0 '256' p "
"i - - 0 '0' pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plsmooth",886,G__wave_dict_886_0_12, 121, -1, -1, 0, 7, 1, 1, 0, 
"u 'WSeries<double>' - 1 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' - "
"C - - 0 'NULL' - i - - 0 '256' - "
"i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plsmooth",886,G__wave_dict_886_0_13, 121, -1, -1, 0, 7, 1, 1, 0, 
"U 'WSeries<double>' - 0 - tf i - - 0 '0' sfact "
"d - - 0 '0.' t1 d - - 0 '0.' t2 "
"C - - 0 'NULL' o i - - 0 '256' p "
"i - - 0 '0' pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__wave_dict_886_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'skymap' - 1 - - C - - 0 'NULL' - "
"i - - 0 '256' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__wave_dict_886_0_15, 121, -1, -1, 0, 7, 1, 1, 0, 
"U 'netcluster' - 0 - pwc i - - 0 - cid "
"i - - 0 - nifo c - - 0 ''L'' type "
"i - - 0 '0' irate C - - 0 'NULL' opt "
"i - - 0 '256' pal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("plot",447,G__wave_dict_886_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'clusterdata' - 0 - pcd d - - 0 - inj_mchirp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPlotStyle",1244,G__wave_dict_886_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - paletteId i - - 0 '255' NCont", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getmax",646,G__wave_dict_886_0_18, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'WSeries<double>' - 1 - w d - - 0 - t1 "
"d - - 0 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getmax",646,G__wave_dict_886_0_19, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'WSeries<double>' - 0 - tf d - - 0 '0.' t1 "
"d - - 0 '0.' t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_886_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("blackmanharris",1474,G__wave_dict_886_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("goptions",883,G__wave_dict_886_0_22, 121, -1, -1, 0, 9, 1, 1, 0, 
"C - - 0 'NULL' opt i - - 0 '1' col "
"d - - 0 '0.' t1 d - - 0 '0.' t2 "
"g - - 0 'false' fft f - - 0 '0.' f1 "
"f - - 0 '0.' f2 g - - 0 'false' psd "
"f - - 0 '0.' t3", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gtitle",649,G__wave_dict_886_0_23, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 '\"\"' title u 'TString' - 0 '\"\"' xtitle "
"u 'TString' - 0 '\"\"' ytitle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("procOpt",743,G__wave_dict_886_0_24, 100, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - opt d - - 0 - val00 "
"d - - 0 '0.' val90", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGraph",818,G__wave_dict_886_0_25, 85, G__get_linked_tagnum(&G__wave_dictLN_TGraph), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_886_0_26, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&watplot::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_886_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&watplot::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_886_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&watplot::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_886_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&watplot::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__wave_dict_886_0_30, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__wave_dict_886_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__wave_dict_886_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_886_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_886_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&watplot::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_886_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&watplot::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_886_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&watplot::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_886_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&watplot::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("watplot", 779, G__wave_dict_886_0_38, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_watplot), -1, 0, 1, 1, 1, 0, "u 'watplot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~watplot", 905, G__wave_dict_886_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_886_0_40, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_watplot), -1, 1, 1, 1, 1, 0, "u 'watplot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETGraphmUcOallocatorlETGraphmUgRsPgR(void) {
   /* vector<TGraph*,allocator<TGraph*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_888_0_1, 85, G__get_linked_tagnum(&G__wave_dictLN_TGraph), G__defined_typename("vector<TGraph*,allocator<TGraph*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TGraph*,allocator<TGraph*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_888_0_2, 85, G__get_linked_tagnum(&G__wave_dictLN_TGraph), G__defined_typename("vector<TGraph*,allocator<TGraph*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TGraph*,allocator<TGraph*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_888_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_888_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_888_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TGraph*,allocator<TGraph*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_888_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<TGraph*,allocator<TGraph*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_888_0_7, 107, -1, G__defined_typename("vector<TGraph*,allocator<TGraph*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_888_0_8, 107, -1, G__defined_typename("vector<TGraph*,allocator<TGraph*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_888_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TGraph*,allocator<TGraph*> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_888_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<TGraph*,allocator<TGraph*> >::size_type' 0 - sz U 'TGraph' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_888_0_11, 107, -1, G__defined_typename("vector<TGraph*,allocator<TGraph*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_888_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_888_0_13, 85, G__get_linked_tagnum(&G__wave_dictLN_TGraph), G__defined_typename("vector<TGraph*,allocator<TGraph*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<TGraph*,allocator<TGraph*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_888_0_14, 85, G__get_linked_tagnum(&G__wave_dictLN_TGraph), G__defined_typename("vector<TGraph*,allocator<TGraph*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<TGraph*,allocator<TGraph*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TGraph*,allocator<TGraph*> >",3188,G__wave_dict_888_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TGraph*,allocator<TGraph*> >",3188,G__wave_dict_888_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<TGraph*,allocator<TGraph*> >::size_type' 0 - n U 'TGraph' - 41 '(TGraph*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TGraph*,allocator<TGraph*> >",3188,G__wave_dict_888_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<TGraph*,allocator<TGraph*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TGraph*,allocator<TGraph*> >",3188,G__wave_dict_888_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<TGraph*,allocator<TGraph*> >::iterator' 'vector<TGraph*,allocator<TGraph*> >::const_iterator' 10 - first u 'vector<TGraph*,allocator<TGraph*> >::iterator' 'vector<TGraph*,allocator<TGraph*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_888_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<TGraph*,allocator<TGraph*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_888_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<TGraph*,allocator<TGraph*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_888_0_21, 85, G__get_linked_tagnum(&G__wave_dictLN_TGraph), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_888_0_22, 85, G__get_linked_tagnum(&G__wave_dictLN_TGraph), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_888_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGraph' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_888_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TGraph*,allocator<TGraph*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_888_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<TGraph*,allocator<TGraph*> >::iterator' - 0 - position U 'TGraph' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_888_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TGraph*,allocator<TGraph*> >::iterator' - 0 - position u 'vector<TGraph*,allocator<TGraph*> >::iterator' 'vector<TGraph*,allocator<TGraph*> >::const_iterator' 10 - first "
"u 'vector<TGraph*,allocator<TGraph*> >::iterator' 'vector<TGraph*,allocator<TGraph*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_888_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TGraph*,allocator<TGraph*> >::iterator' - 0 - position k - 'vector<TGraph*,allocator<TGraph*> >::size_type' 0 - n "
"U 'TGraph' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_888_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_888_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TGraph*,allocator<TGraph*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_888_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<TGraph*,allocator<TGraph*> >::iterator' - 0 - first u 'vector<TGraph*,allocator<TGraph*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_888_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<TGraph*,allocator<TGraph*> >", 3314, G__wave_dict_888_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwavepixel(void) {
   /* wavepixel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_wavepixel));
   G__memfunc_setup("wavepixel",981,G__wave_dict_895_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_wavepixel), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__wave_dict_895_0_2, 103, -1, -1, 0, 1, 1, 1, 8, "u 'wavepixel' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__wave_dict_895_0_3, 103, -1, -1, 0, 1, 1, 1, 8, "u 'wavepixel' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("wavepixel", 981, G__wave_dict_895_0_4, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_wavepixel), -1, 0, 1, 1, 1, 0, "u 'wavepixel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~wavepixel", 1107, G__wave_dict_895_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_895_0_6, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_wavepixel), -1, 1, 1, 1, 1, 0, "u 'wavepixel' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwavecluster(void) {
   /* wavecluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_wavecluster));
   G__memfunc_setup("wavecluster",1205,G__wave_dict_896_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_wavecluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wavecluster",1205,G__wave_dict_896_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_wavecluster), -1, 0, 2, 1, 1, 0, 
"u 'WSeries<double>' - 1 - - g - - 0 'false' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wavecluster",1205,G__wave_dict_896_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_wavecluster), -1, 0, 1, 1, 1, 0, "u 'wavecluster' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_896_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecluster), -1, 1, 1, 1, 1, 0, "u 'wavecluster' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__wave_dict_896_0_5, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"u 'WSeries<double>' - 1 - - g - - 0 'false' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setMask",728,G__wave_dict_896_0_6, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'WSeries<double>' - 1 - - i - - 0 '1' - "
"g - - 0 'false' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("size",443,G__wave_dict_896_0_7, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setbpp",654,G__wave_dict_896_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - P", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getbpp",642,G__wave_dict_896_0_9, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setlow",670,G__wave_dict_896_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getlow",658,G__wave_dict_896_0_11, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sethigh",748,G__wave_dict_896_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gethigh",736,G__wave_dict_896_0_13, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__wave_dict_896_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'WSeries<double>' - 1 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__wave_dict_896_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<float>' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setrms",670,G__wave_dict_896_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'WSeries<double>' - 1 - - d - - 0 '-1.' - "
"d - - 0 '-1.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setvar",661,G__wave_dict_896_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<float>' - 1 - - d - - 0 '-1.' - "
"d - - 0 '-1.' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("asize",540,G__wave_dict_896_0_18, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ignore",644,G__wave_dict_896_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 '0' i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cleanhalo",935,G__wave_dict_896_0_20, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "g - - 0 'false' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("apush",545,G__wave_dict_896_0_21, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"u 'WSeries<double>' - 1 - a d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("append",632,G__wave_dict_896_0_22, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'wavecluster' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("merge",528,G__wave_dict_896_0_23, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("coincidence",1140,G__wave_dict_896_0_24, 107, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 0, 
"u 'wavecluster' - 1 - - d - - 0 '1.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cluster",770,G__wave_dict_896_0_25, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cluster",770,G__wave_dict_896_0_26, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "U 'wavepixel' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get",320,G__wave_dict_896_0_27, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 3, 1, 1, 0, 
"C - - 0 - - i - - 0 '0' - "
"k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoiseRMS",1072,G__wave_dict_896_0_28, 100, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~wavecluster", 1331, G__wave_dict_896_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwavecor(void) {
   /* wavecor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_wavecor));
   G__memfunc_setup("wavecor",759,G__wave_dict_904_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_wavecor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wavecor",759,G__wave_dict_904_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_wavecor), -1, 0, 1, 1, 1, 0, "u 'wavecor' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_904_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_wavecor), -1, 1, 1, 1, 1, 0, "u 'wavecor' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("kendall",731,G__wave_dict_904_0_4, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'wavearray<double>' - 1 - - u 'wavearray<double>' - 1 - - "
"d - - 0 - - d - - 0 - - "
"k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,G__wave_dict_904_0_5, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'wavearray<double>' - 1 - - u 'wavearray<double>' - 1 - - "
"d - - 0 - - d - - 0 - - "
"k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("select",640,G__wave_dict_904_0_6, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("coincidence",1140,G__wave_dict_904_0_7, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - U 'wavecor' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_904_0_8, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&wavecor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_904_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavecor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_904_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&wavecor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_904_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&wavecor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__wave_dict_904_0_12, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__wave_dict_904_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__wave_dict_904_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_904_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_904_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavecor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_904_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavecor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_904_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavecor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_904_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavecor::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~wavecor", 885, G__wave_dict_904_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWaveRDC(void) {
   /* WaveRDC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_WaveRDC));
   G__memfunc_setup("WaveRDC",620,G__wave_dict_905_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_WaveRDC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_905_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_WaveRDC), -1, 1, 1, 1, 1, 0, "u 'WaveRDC' - 11 - -", "assign", (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_905_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_WaveRDC), -1, 1, 1, 1, 1, 0, "u 'WaveRDC' - 11 - -", "concatenate", (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__wave_dict_905_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_WaveRDC), -1, 1, 1, 1, 1, 0, "u 'WaveRDC' - 11 - x", "no operation!", (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__wave_dict_905_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_WaveRDC), -1, 1, 1, 1, 1, 0, "u 'WaveRDC' - 11 - x", "no operation!", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_905_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_WaveRDC), -1, 1, 1, 1, 1, 0, "h - - 10 - x", "no operation!", (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WaveRDC), -1, 1, 1, 1, 1, 0, "h - - 10 - x", "no operation!", (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WaveRDC), -1, 1, 1, 1, 1, 0, "h - - 10 - x", "no operation!", (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_WaveRDC), -1, 1, 1, 1, 1, 0, "h - - 10 - x", "no operation!", (void*) NULL, 1);
   G__memfunc_setup("DumpRDC",623,G__wave_dict_905_0_10, 105, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compress",844,G__wave_dict_905_0_11, 105, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<short>' 'waveShort' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compress",844,G__wave_dict_905_0_12, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' 'waveDouble' 11 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unCompress",1071,G__wave_dict_905_0_13, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<float>' 'waveFloat' 1 - - i - - 0 '1' level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unCompress",1071,G__wave_dict_905_0_14, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' 'waveDouble' 1 - - i - - 0 '1' level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unCompress",1071,G__wave_dict_905_0_15, 105, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<int>' - 1 - - i - - 0 '1' level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dir",287,G__wave_dict_905_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getScale",808,G__wave_dict_905_0_17, 102, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' 'waveDouble' 11 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShort",848,G__wave_dict_905_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' 'waveDouble' 11 - - u 'wavearray<short>' 'waveShort' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSign",721,G__wave_dict_905_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' 'waveDouble' 11 - - u 'wavearray<short>' 'waveShort' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Push",416,G__wave_dict_905_0_20, 105, -1, -1, 0, 6, 1, 1, 0, 
"S - - 0 - - i - - 0 - - "
"H - - 0 - - i - - 1 - - "
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Push",416,G__wave_dict_905_0_21, 121, -1, -1, 0, 4, 1, 1, 0, 
"h - - 1 - - H - - 0 - - "
"i - - 1 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pop",303,G__wave_dict_905_0_22, 105, -1, -1, 0, 5, 1, 1, 0, 
"I - - 0 - - i - - 0 - - "
"i - - 1 - - i - - 0 - - "
"i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Pop",303,G__wave_dict_905_0_23, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - - 1 - - i - - 1 - - "
"i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOPTZ",653,G__wave_dict_905_0_24, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wabs",429,G__wave_dict_905_0_25, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wabs",429,G__wave_dict_905_0_26, 115, -1, -1, 0, 1, 1, 1, 0, "s - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wint",450,G__wave_dict_905_0_27, 105, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLSW",566,G__wave_dict_905_0_28, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "k - 'size_t' 0 - opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_905_0_29, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&WaveRDC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_905_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WaveRDC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_905_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&WaveRDC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_905_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&WaveRDC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_905_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_905_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WaveRDC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_905_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WaveRDC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_905_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WaveRDC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_905_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WaveRDC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("WaveRDC", 620, G__wave_dict_905_0_41, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_WaveRDC), -1, 0, 1, 1, 1, 0, "u 'WaveRDC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~WaveRDC", 746, G__wave_dict_905_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwavearraylEunsignedsPintgR(void) {
   /* wavearray<unsigned int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR));
   G__memfunc_setup("wavearray<unsigned int>",2324,G__wave_dict_906_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 0, 1, 1, 1, 0, "i - - 0 - -", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<unsigned int>",2324,G__wave_dict_906_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 0, 0, 1, 1, 0, "", "Default constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<unsigned int>",2324,G__wave_dict_906_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 0, 1, 1, 1, 0, "u 'wavearray<unsigned int>' - 11 - -", "copy Constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_906_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<unsigned int>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_906_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator[]",1060,G__wave_dict_906_0_6, 104, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_906_0_7, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_906_0_8, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_906_0_9, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'wavearray<unsigned int>' - 11 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__wave_dict_906_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<unsigned int>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_906_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<unsigned int>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_906_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<unsigned int>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator<<",996,G__wave_dict_906_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "u 'wavearray<unsigned int>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__wave_dict_906_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "h - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_906_0_15, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "h - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_906_0_16, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "h - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_906_0_17, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "h - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator>>",1000,G__wave_dict_906_0_18, 67, -1, -1, 1, 1, 1, 1, 0, "C - - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Dump",406,G__wave_dict_906_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpBinary",1019,G__wave_dict_906_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpShort",934,G__wave_dict_906_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpObject",1005,G__wave_dict_906_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBinary",993,G__wave_dict_906_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadShort",908,G__wave_dict_906_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FFT",224,G__wave_dict_906_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform", (void*) NULL, 1);
   G__memfunc_setup("FFTW",311,G__wave_dict_906_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform West", (void*) NULL, 1);
   G__memfunc_setup("resetFFTW",858,G__wave_dict_906_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", "release FFTW memory", (void*) NULL, 1);
   G__memfunc_setup("Resample",825,G__wave_dict_906_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<unsigned int>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_906_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<unsigned int>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_906_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - i - - 0 '6' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_906_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_906_0_32, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_906_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_906_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_906_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_906_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_906_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_906_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("size",443,G__wave_dict_906_0_39, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSlice",828,G__wave_dict_906_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlice",816,G__wave_dict_906_0_41, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_906_0_42, 100, -1, -1, 0, 2, 1, 1, 8, 
"k - 'size_t' 0 '0' - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_906_0_43, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<unsigned int>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_906_0_44, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_906_0_45, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_906_0_46, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_906_0_47, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<unsigned int>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_906_0_48, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_906_0_49, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_906_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<unsigned int>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_906_0_51, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_906_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<unsigned int>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("min",324,G__wave_dict_906_0_53, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SQRT",330,G__wave_dict_906_0_54, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("hann",421,G__wave_dict_906_0_55, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("waveSort",859,G__wave_dict_906_0_56, 121, -1, -1, 0, 3, 1, 1, 8, 
"H - - 2 - pp k - 'size_t' 0 '0' l "
"k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSort",859,G__wave_dict_906_0_57, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 '0' l k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_906_0_58, 121, -1, -1, 0, 4, 1, 1, 8, 
"H - - 2 - pp k - 'size_t' 0 - l "
"k - 'size_t' 0 - r k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_906_0_59, 104, -1, -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - l k - 'size_t' 0 - r "
"k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_906_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRank",1326,G__wave_dict_906_0_61, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRankE",1395,G__wave_dict_906_0_62, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rank",428,G__wave_dict_906_0_63, 104, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.5' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLPRFilter",1172,G__wave_dict_906_0_64, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("spesla",648,G__wave_dict_906_0_65, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_906_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_906_0_67, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("white",545,G__wave_dict_906_0_68, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 4, 1, 1, 8, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("exponential",1191,G__wave_dict_906_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get",320,G__wave_dict_906_0_70, 104, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__wave_dict_906_0_71, 104, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uniform",768,G__wave_dict_906_0_72, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rand48",529,G__wave_dict_906_0_73, 108, -1, -1, 0, 1, 1, 1, 0, "l - - 0 '1024' k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatistics",1387,G__wave_dict_906_0_74, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - mean d - - 1 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_906_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cpf",313,G__wave_dict_906_0_76, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<unsigned int>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_906_0_77, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<unsigned int>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__wave_dict_906_0_78, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<unsigned int>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_906_0_79, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'wavearray<unsigned int>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_906_0_80, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wavecount",988,G__wave_dict_906_0_81, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_906_0_82, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<unsigned int>' - 11 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_906_0_83, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<unsigned int>' - 11 - - i - - 0 - - "
"i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_906_0_84, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<unsigned int>' - 11 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_906_0_85, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("compare",743,G__wave_dict_906_0_87, 105, -1, -1, 0, 2, 3, 1, 0, 
"Y - - 10 - x Y - - 10 - y", (char*)NULL, (void*) G__func2void( (int (*)(const void*, const void*))(&wavearray<unsigned int>::compare) ), 0);
   G__memfunc_setup("Class",502,G__wave_dict_906_0_88, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&wavearray<unsigned int>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_906_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<unsigned int>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_906_0_90, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&wavearray<unsigned int>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_906_0_91, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&wavearray<unsigned int>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_906_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_906_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<unsigned int>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_906_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<unsigned int>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_906_0_98, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<unsigned int>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_906_0_99, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<unsigned int>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~wavearray<unsigned int>", 2450, G__wave_dict_906_0_100, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfunclinefilter(void) {
   /* linefilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_linefilter));
   G__memfunc_setup("linefilter",1070,G__wave_dict_912_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_linefilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("linefilter",1070,G__wave_dict_912_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_linefilter), -1, 0, 4, 1, 1, 0, 
"d - - 0 - f d - - 0 '0.' T "
"i - - 0 '1' fid i - - 0 '1' nT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("linefilter",1070,G__wave_dict_912_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_linefilter), -1, 0, 1, 1, 1, 0, "u 'linefilter' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clone",529,G__wave_dict_912_0_4, 85, G__get_linked_tagnum(&G__wave_dictLN_linefilter), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("apply",550,G__wave_dict_912_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' 'WaveData' 1 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFilter",946,G__wave_dict_912_0_6, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - - 0 '1' nF i - - 0 '0' nL "
"i - - 0 '1' nS i - - 0 '-1' nD "
"i - - 0 '5' nB i - - 0 '6' nR "
"i - - 0 '8' nW", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFScan",791,G__wave_dict_912_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 '0.' f d - - 0 '2.' sn "
"d - - 0 '0.45' fS i - - 0 '20' nS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__wave_dict_912_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_912_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStartTime",1245,G__wave_dict_912_0_10, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCurrentTime",1458,G__wave_dict_912_0_11, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("inUse",516,G__wave_dict_912_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPSD",551,G__wave_dict_912_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), G__defined_typename("WaveData"), 0, 2, 1, 1, 0, 
"u 'wavearray<double>' 'WaveData' 11 - - i - - 0 '1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeFilter",1028,G__wave_dict_912_0_14, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' 'WaveData' 11 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLine",712,G__wave_dict_912_0_15, 117, G__get_linked_tagnum(&G__wave_dictLN_linedata), -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' 'WaveData' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHeteroLine",1327,G__wave_dict_912_0_16, 117, G__get_linked_tagnum(&G__wave_dictLN_linedata), -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' 'WaveData' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOmega",809,G__wave_dict_912_0_17, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' 'WaveData' 11 - - i - - 0 '2' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fScan",491,G__wave_dict_912_0_18, 100, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' 'WaveData' 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Interference",1242,G__wave_dict_912_0_19, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' 'WaveData' 1 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrend",829,G__wave_dict_912_0_20, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 2, 1, 1, 0, 
"i - - 0 - - c - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DumpTrend",915,G__wave_dict_912_0_21, 103, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadTrend",893,G__wave_dict_912_0_22, 103, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("newRate",726,G__wave_dict_912_0_23, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - rate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxLine",718,G__wave_dict_912_0_24, 104, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("axb",315,G__wave_dict_912_0_25, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - a d - - 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wrap",442,G__wave_dict_912_0_26, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("intw",450,G__wave_dict_912_0_27, 108, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~linefilter", 1196, G__wave_dict_912_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_912_0_29, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_linefilter), -1, 1, 1, 1, 1, 0, "u 'linefilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncnetevent(void) {
   /* netevent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_netevent));
   G__memfunc_setup("netevent",873,G__wave_dict_917_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_netevent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("netevent",873,G__wave_dict_917_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_netevent), -1, 0, 2, 1, 1, 0, 
"i - - 0 - n i - - 0 '0' Psave", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("netevent",873,G__wave_dict_917_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_netevent), -1, 0, 1, 1, 1, 0, "u 'netevent' - 11 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("netevent",873,G__wave_dict_917_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_netevent), -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("netevent",873,G__wave_dict_917_0_5, 105, G__get_linked_tagnum(&G__wave_dictLN_netevent), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - fName i - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_917_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_netevent), -1, 1, 1, 1, 1, 0, "u 'netevent' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntries",1018,G__wave_dict_917_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntry",818,G__wave_dict_917_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocate",837,G__wave_dict_917_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__wave_dict_917_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_917_0_11, 85, G__get_linked_tagnum(&G__wave_dictLN_TTree), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - fName i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_917_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Notify",633,G__wave_dict_917_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTree",732,G__wave_dict_917_0_14, 85, G__get_linked_tagnum(&G__wave_dictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSLags",806,G__wave_dict_917_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "F - - 0 - slag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("output",689,G__wave_dict_917_0_16, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'TTree' - 0 'NULL' - U 'network' - 0 'NULL' - "
"d - - 0 '0.' - k - 'size_t' 0 '0' - "
"i - - 0 '-1' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("output2G",810,G__wave_dict_917_0_17, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'TTree' - 0 - - U 'network' - 0 - - "
"k - 'size_t' 0 - - i - - 0 - - "
"d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Show",417,G__wave_dict_917_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dopen",534,G__wave_dict_917_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - - 10 - fname C - - 0 - mode "
"g - - 0 'true' header", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dclose",634,G__wave_dict_917_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,G__wave_dict_917_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"2G\"' analysis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_917_0_22, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&netevent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_917_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&netevent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_917_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&netevent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_917_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&netevent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__wave_dict_917_0_26, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__wave_dict_917_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__wave_dict_917_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_917_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_917_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&netevent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_917_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&netevent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_917_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&netevent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_917_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&netevent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~netevent", 999, G__wave_dict_917_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncregression(void) {
   /* regression */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_regression));
   G__memfunc_setup("regression",1089,G__wave_dict_919_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_regression), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("regression",1089,G__wave_dict_919_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_regression), -1, 0, 4, 1, 1, 0, 
"u 'WSeries<double>' - 1 - - C - - 0 - - "
"d - - 0 '0.' fL d - - 0 '0.' fH", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("regression",1089,G__wave_dict_919_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_regression), -1, 0, 1, 1, 1, 0, "u 'regression' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_919_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_regression), -1, 1, 1, 1, 1, 0, "u 'regression' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_919_0_5, 107, -1, G__defined_typename("size_t"), 0, 4, 1, 1, 0, 
"u 'WSeries<double>' - 1 - target C - - 0 - name "
"d - - 0 '0.' fL d - - 0 '0.' fH", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_919_0_6, 107, -1, G__defined_typename("size_t"), 0, 4, 1, 1, 0, 
"u 'wavearray<double>' - 1 - witness C - - 0 - name "
"d - - 0 '0.' fL d - - 0 '0.' fH", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_919_0_7, 107, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 0, 
"i - - 0 - n i - - 0 - m "
"C - - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mask",428,G__wave_dict_919_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n d - - 0 '0.' flow "
"d - - 0 '0.' fhigh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unmask",655,G__wave_dict_919_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n d - - 0 '0.' flow "
"d - - 0 '0.' fhigh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFilter",946,G__wave_dict_919_0_10, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "k - 'size_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMatrix",961,G__wave_dict_919_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 '0.' edge d - - 0 '1.' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("solve",553,G__wave_dict_919_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - th i - - 0 '0' nE "
"c - - 0 ''s'' c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("apply",550,G__wave_dict_919_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 '0.' threshold c - - 0 ''a'' c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatrix",949,G__wave_dict_919_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_TMatrixTSymlEdoublegR), G__defined_typename("TMatrixDSym"), 0, 1, 1, 1, 0, "k - 'size_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVCROSS",800,G__wave_dict_919_0_15, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVEIGEN",766,G__wave_dict_919_0_16, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 1, 1, 1, 0, "i - - 0 '-1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFILTER",774,G__wave_dict_919_0_17, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 3, 1, 1, 0, 
"c - - 0 ''a'' c i - - 0 '-1' nT "
"i - - 0 '-1' nW", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTFmap",792,G__wave_dict_919_0_18, 85, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 0, 1, 1, 1, 0, "i - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rank",428,G__wave_dict_919_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 3, 1, 1, 0, 
"i - - 0 '0' nbins d - - 0 '0.' fL "
"d - - 0 '0.' fH", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWNoise",917,G__wave_dict_919_0_20, 117, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClean",803,G__wave_dict_919_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoise",830,G__wave_dict_919_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("channel",729,G__wave_dict_919_0_23, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRank",716,G__wave_dict_919_0_24, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 1, 1, 1, 0, "i - - 0 - n", "RANK", (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_919_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("_apply_",740,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - - 0 - n u 'vector<wavearray<double>,allocator<wavearray<double> > >' 'vector<wavearray<double> >' 1 - w "
"u 'vector<wavearray<double>,allocator<wavearray<double> > >' 'vector<wavearray<double> >' 1 - W", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_919_0_27, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&regression::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_919_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&regression::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_919_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&regression::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_919_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&regression::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__wave_dict_919_0_31, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__wave_dict_919_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__wave_dict_919_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_919_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_919_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&regression::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_919_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&regression::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_919_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&regression::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_919_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&regression::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~regression", 1215, G__wave_dict_919_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwatcLcLTime(void) {
   /* wat::Time */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime));
   G__memfunc_setup("Time",399,G__wave_dict_941_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime), -1, 0, 2, 5, 1, 0, 
"i - 'INT_4S' 0 '0' sec h - 'INT_4U' 0 '0' nsec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Time",399,G__wave_dict_941_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - date", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Time",399,G__wave_dict_941_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime), -1, 0, 1, 1, 1, 0, "u 'wat::Time' - 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Time",399,G__wave_dict_941_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime), -1, 0, 1, 1, 1, 0, "d - - 0 - dtime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_941_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime), -1, 1, 1, 1, 1, 0, "u 'wat::Time' - 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_941_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime), -1, 1, 1, 1, 1, 0, "u 'wat::Time' - 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__wave_dict_941_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime), -1, 1, 1, 1, 1, 0, "u 'wat::Time' - 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*=",979,G__wave_dict_941_0_8, 117, G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime), -1, 1, 1, 1, 1, 0, "d - - 1 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/=",984,G__wave_dict_941_0_9, 117, G__get_linked_tagnum(&G__wave_dictLN_watcLcLTime), -1, 1, 1, 1, 1, 0, "d - - 1 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator/",923,G__wave_dict_941_0_10, 100, -1, -1, 0, 1, 1, 1, 0, "u 'wat::Time' - 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__wave_dict_941_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'wat::Time' - 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<=",997,G__wave_dict_941_0_12, 103, -1, -1, 0, 1, 1, 1, 0, "u 'wat::Time' - 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>=",999,G__wave_dict_941_0_13, 103, -1, -1, 0, 1, 1, 1, 0, "u 'wat::Time' - 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__wave_dict_941_0_14, 103, -1, -1, 0, 1, 1, 1, 0, "u 'wat::Time' - 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__wave_dict_941_0_15, 103, -1, -1, 0, 1, 1, 1, 0, "u 'wat::Time' - 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__wave_dict_941_0_16, 103, -1, -1, 0, 1, 1, 1, 0, "u 'wat::Time' - 1 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGPS",522,G__wave_dict_941_0_17, 105, -1, G__defined_typename("INT_4S"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSec",571,G__wave_dict_941_0_18, 105, -1, G__defined_typename("INT_4S"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNSec",649,G__wave_dict_941_0_19, 104, -1, G__defined_typename("INT_4U"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSec",583,G__wave_dict_941_0_20, 105, -1, G__defined_typename("INT_4S"), 0, 1, 1, 1, 0, "i - 'INT_4S' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNSec",661,G__wave_dict_941_0_21, 104, -1, G__defined_typename("INT_4U"), 0, 1, 1, 1, 0, "h - 'INT_4U' 0 - nsec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDouble",903,G__wave_dict_941_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDouble",891,G__wave_dict_941_0_23, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDate",682,G__wave_dict_941_0_24, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - - 0 - ss i - - 0 - mm "
"i - - 0 - hh i - - 0 - DD "
"i - - 0 - MM i - - 0 - YY "
"i - - 0 '0' nsec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDateString",1313,G__wave_dict_941_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - date", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetString",931,G__wave_dict_941_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - date i - - 0 '0' nsec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetYear",701,G__wave_dict_941_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - year", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMonth",818,G__wave_dict_941_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - month", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDay",586,G__wave_dict_941_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - day", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHour",714,G__wave_dict_941_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - hour", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMinute",926,G__wave_dict_941_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - min", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSecond",904,G__wave_dict_941_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDateString",1301,G__wave_dict_941_0_33, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDayOfYear",1156,G__wave_dict_941_0_34, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYear",689,G__wave_dict_941_0_35, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMonth",806,G__wave_dict_941_0_36, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDay",574,G__wave_dict_941_0_37, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHour",702,G__wave_dict_941_0_38, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinute",914,G__wave_dict_941_0_39, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSecond",892,G__wave_dict_941_0_40, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLeapSecs",1072,G__wave_dict_941_0_41, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintLeapSecs",1309,G__wave_dict_941_0_42, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__wave_dict_941_0_43, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetJulianDay",1185,G__wave_dict_941_0_44, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModJulianDay",1473,G__wave_dict_941_0_45, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetJulianDate",1281,G__wave_dict_941_0_46, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetModJulianDate",1569,G__wave_dict_941_0_47, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GpsToGpsLeaps",1292,G__wave_dict_941_0_48, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - gps", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnixToGpsLeaps",1414,G__wave_dict_941_0_49, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - unix_time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GpsToGpsLeaps",1292,G__wave_dict_941_0_50, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnixToGpsLeaps",1414,G__wave_dict_941_0_51, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GpsToTaiLeaps",1280,G__wave_dict_941_0_52, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - gps", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnixToTaiLeaps",1402,G__wave_dict_941_0_53, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - unix_time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GpsToTaiLeaps",1280,G__wave_dict_941_0_54, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnixToTaiLeaps",1402,G__wave_dict_941_0_55, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UnixToGps",913,G__wave_dict_941_0_56, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GpsToUnix",913,G__wave_dict_941_0_57, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GpsToUnixTime",1312,G__wave_dict_941_0_58, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Error",522,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "C - - 0 - msg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_941_0_60, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&wat::Time::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_941_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wat::Time::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_941_0_62, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&wat::Time::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_941_0_63, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&wat::Time::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__wave_dict_941_0_64, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__wave_dict_941_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__wave_dict_941_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_941_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_941_0_68, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wat::Time::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_941_0_69, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wat::Time::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_941_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wat::Time::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_941_0_71, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wat::Time::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Time", 525, G__wave_dict_941_0_72, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwatconstants(void) {
   /* watconstants */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_watconstants));
   G__memfunc_setup("SpeedOfLightInVacuo",1875,G__wave_dict_942_0_1, 100, -1, -1, 0, 0, 1, 1, 0, "", "m s^-1", (void*) G__func2void( (double (*)())(&watconstants::SpeedOfLightInVacuo) ), 0);
   G__memfunc_setup("PermittivityOfFreeSpace",2365,G__wave_dict_942_0_2, 100, -1, -1, 0, 0, 1, 1, 0, "", "C^2 N^-1 m^-2", (void*) G__func2void( (double (*)())(&watconstants::PermittivityOfFreeSpace) ), 0);
   G__memfunc_setup("PermeabilityOfFreeSpace",2314,G__wave_dict_942_0_3, 100, -1, -1, 0, 0, 1, 1, 0, "", "N A^-2", (void*) G__func2void( (double (*)())(&watconstants::PermeabilityOfFreeSpace) ), 0);
   G__memfunc_setup("StandardGravity",1559,G__wave_dict_942_0_4, 100, -1, -1, 0, 0, 1, 1, 0, "", "m s^-2", (void*) G__func2void( (double (*)())(&watconstants::StandardGravity) ), 0);
   G__memfunc_setup("StandardAtmosphere",1865,G__wave_dict_942_0_5, 100, -1, -1, 0, 0, 1, 1, 0, "", "Pa", (void*) G__func2void( (double (*)())(&watconstants::StandardAtmosphere) ), 0);
   G__memfunc_setup("SpeedOfLightInVacuoUnit",2291,G__wave_dict_942_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m s^-1", (void*) G__func2void( (TString (*)())(&watconstants::SpeedOfLightInVacuoUnit) ), 0);
   G__memfunc_setup("PermittivityOfFreeSpaceUnit",2781,G__wave_dict_942_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "C^2 N^-1 m^-2", (void*) G__func2void( (TString (*)())(&watconstants::PermittivityOfFreeSpaceUnit) ), 0);
   G__memfunc_setup("PermeabilityOfFreeSpaceUnit",2730,G__wave_dict_942_0_8, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "N A^-2", (void*) G__func2void( (TString (*)())(&watconstants::PermeabilityOfFreeSpaceUnit) ), 0);
   G__memfunc_setup("StandardGravityUnit",1975,G__wave_dict_942_0_9, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m s^-2", (void*) G__func2void( (TString (*)())(&watconstants::StandardGravityUnit) ), 0);
   G__memfunc_setup("StandardAtmosphereUnit",2281,G__wave_dict_942_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "Pa", (void*) G__func2void( (TString (*)())(&watconstants::StandardAtmosphereUnit) ), 0);
   G__memfunc_setup("GravitationalConstant",2207,G__wave_dict_942_0_11, 100, -1, -1, 0, 0, 1, 1, 0, "", "N m^2 kg^-2", (void*) G__func2void( (double (*)())(&watconstants::GravitationalConstant) ), 0);
   G__memfunc_setup("PlanckConstant",1443,G__wave_dict_942_0_12, 100, -1, -1, 0, 0, 1, 1, 0, "", "J s", (void*) G__func2void( (double (*)())(&watconstants::PlanckConstant) ), 0);
   G__memfunc_setup("ReducedPlanckConstant",2143,G__wave_dict_942_0_13, 100, -1, -1, 0, 0, 1, 1, 0, "", "J s", (void*) G__func2void( (double (*)())(&watconstants::ReducedPlanckConstant) ), 0);
   G__memfunc_setup("PlanckMass",1005,G__wave_dict_942_0_14, 100, -1, -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (double (*)())(&watconstants::PlanckMass) ), 0);
   G__memfunc_setup("PlanckLength",1211,G__wave_dict_942_0_15, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::PlanckLength) ), 0);
   G__memfunc_setup("PlanckTime",1000,G__wave_dict_942_0_16, 100, -1, -1, 0, 0, 1, 1, 0, "", "s", (void*) G__func2void( (double (*)())(&watconstants::PlanckTime) ), 0);
   G__memfunc_setup("BoltzmannConstant",1791,G__wave_dict_942_0_17, 100, -1, -1, 0, 0, 1, 1, 0, "", "J K^-1", (void*) G__func2void( (double (*)())(&watconstants::BoltzmannConstant) ), 0);
   G__memfunc_setup("IdealGasConstant",1604,G__wave_dict_942_0_18, 100, -1, -1, 0, 0, 1, 1, 0, "", "J K^-1", (void*) G__func2void( (double (*)())(&watconstants::IdealGasConstant) ), 0);
   G__memfunc_setup("AvogadroConstant",1661,G__wave_dict_942_0_19, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&watconstants::AvogadroConstant) ), 0);
   G__memfunc_setup("WienDisplacementLawConstant",2778,G__wave_dict_942_0_20, 100, -1, -1, 0, 0, 1, 1, 0, "", "m K", (void*) G__func2void( (double (*)())(&watconstants::WienDisplacementLawConstant) ), 0);
   G__memfunc_setup("StefanBoltzmannConstant",2400,G__wave_dict_942_0_21, 100, -1, -1, 0, 0, 1, 1, 0, "", "W m^-2 K^-4", (void*) G__func2void( (double (*)())(&watconstants::StefanBoltzmannConstant) ), 0);
   G__memfunc_setup("AtomicMassUnit",1425,G__wave_dict_942_0_22, 100, -1, -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (double (*)())(&watconstants::AtomicMassUnit) ), 0);
   G__memfunc_setup("ProtonMass",1046,G__wave_dict_942_0_23, 100, -1, -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (double (*)())(&watconstants::ProtonMass) ), 0);
   G__memfunc_setup("ElectronMass",1232,G__wave_dict_942_0_24, 100, -1, -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (double (*)())(&watconstants::ElectronMass) ), 0);
   G__memfunc_setup("ElectronCharge",1414,G__wave_dict_942_0_25, 100, -1, -1, 0, 0, 1, 1, 0, "", "C", (void*) G__func2void( (double (*)())(&watconstants::ElectronCharge) ), 0);
   G__memfunc_setup("FineStructureConstant",2205,G__wave_dict_942_0_26, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&watconstants::FineStructureConstant) ), 0);
   G__memfunc_setup("ClassicalElectronRadius",2355,G__wave_dict_942_0_27, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::ClassicalElectronRadius) ), 0);
   G__memfunc_setup("ElectronComptonWavelength",2609,G__wave_dict_942_0_28, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::ElectronComptonWavelength) ), 0);
   G__memfunc_setup("BohrRadius",1011,G__wave_dict_942_0_29, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::BohrRadius) ), 0);
   G__memfunc_setup("BohrMagneton",1220,G__wave_dict_942_0_30, 100, -1, -1, 0, 0, 1, 1, 0, "", "J T^-1", (void*) G__func2void( (double (*)())(&watconstants::BohrMagneton) ), 0);
   G__memfunc_setup("NuclearMagneton",1539,G__wave_dict_942_0_31, 100, -1, -1, 0, 0, 1, 1, 0, "", "J T^-1", (void*) G__func2void( (double (*)())(&watconstants::NuclearMagneton) ), 0);
   G__memfunc_setup("GravitationalConstantUnit",2623,G__wave_dict_942_0_32, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "N m^2 kg^-2", (void*) G__func2void( (TString (*)())(&watconstants::GravitationalConstantUnit) ), 0);
   G__memfunc_setup("PlanckConstantUnit",1859,G__wave_dict_942_0_33, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "J s", (void*) G__func2void( (TString (*)())(&watconstants::PlanckConstantUnit) ), 0);
   G__memfunc_setup("ReducedPlanckConstantUnit",2559,G__wave_dict_942_0_34, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "J s", (void*) G__func2void( (TString (*)())(&watconstants::ReducedPlanckConstantUnit) ), 0);
   G__memfunc_setup("PlanckMassUnit",1421,G__wave_dict_942_0_35, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (TString (*)())(&watconstants::PlanckMassUnit) ), 0);
   G__memfunc_setup("PlanckLengthUnit",1627,G__wave_dict_942_0_36, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::PlanckLengthUnit) ), 0);
   G__memfunc_setup("PlanckTimeUnit",1416,G__wave_dict_942_0_37, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "s", (void*) G__func2void( (TString (*)())(&watconstants::PlanckTimeUnit) ), 0);
   G__memfunc_setup("BoltzmannConstantUnit",2207,G__wave_dict_942_0_38, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "J K^-1", (void*) G__func2void( (TString (*)())(&watconstants::BoltzmannConstantUnit) ), 0);
   G__memfunc_setup("IdealGasConstantUnit",2020,G__wave_dict_942_0_39, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "J K^-1", (void*) G__func2void( (TString (*)())(&watconstants::IdealGasConstantUnit) ), 0);
   G__memfunc_setup("AvogadroConstantUnit",2077,G__wave_dict_942_0_40, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (TString (*)())(&watconstants::AvogadroConstantUnit) ), 0);
   G__memfunc_setup("WienDisplacementLawConstantUnit",3194,G__wave_dict_942_0_41, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m K", (void*) G__func2void( (TString (*)())(&watconstants::WienDisplacementLawConstantUnit) ), 0);
   G__memfunc_setup("StefanBoltzmannConstantUnit",2816,G__wave_dict_942_0_42, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "W m^-2 K^-4", (void*) G__func2void( (TString (*)())(&watconstants::StefanBoltzmannConstantUnit) ), 0);
   G__memfunc_setup("AtomicMassUnitUnit",1841,G__wave_dict_942_0_43, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (TString (*)())(&watconstants::AtomicMassUnitUnit) ), 0);
   G__memfunc_setup("ProtonMassUnit",1462,G__wave_dict_942_0_44, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (TString (*)())(&watconstants::ProtonMassUnit) ), 0);
   G__memfunc_setup("ElectronMassUnit",1648,G__wave_dict_942_0_45, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (TString (*)())(&watconstants::ElectronMassUnit) ), 0);
   G__memfunc_setup("ElectronChargeUnit",1830,G__wave_dict_942_0_46, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "C", (void*) G__func2void( (TString (*)())(&watconstants::ElectronChargeUnit) ), 0);
   G__memfunc_setup("FineStructureConstantUnit",2621,G__wave_dict_942_0_47, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (TString (*)())(&watconstants::FineStructureConstantUnit) ), 0);
   G__memfunc_setup("ClassicalElectronRadiusUnit",2771,G__wave_dict_942_0_48, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::ClassicalElectronRadiusUnit) ), 0);
   G__memfunc_setup("ElectronComptonWavelengthUnit",3025,G__wave_dict_942_0_49, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::ElectronComptonWavelengthUnit) ), 0);
   G__memfunc_setup("BohrRadiusUnit",1427,G__wave_dict_942_0_50, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::BohrRadiusUnit) ), 0);
   G__memfunc_setup("BohrMagnetonUnit",1636,G__wave_dict_942_0_51, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "J T^-1", (void*) G__func2void( (TString (*)())(&watconstants::BohrMagnetonUnit) ), 0);
   G__memfunc_setup("NuclearMagnetonUnit",1955,G__wave_dict_942_0_52, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "J T^-1", (void*) G__func2void( (TString (*)())(&watconstants::NuclearMagnetonUnit) ), 0);
   G__memfunc_setup("GalacticCenterLongitude",2340,G__wave_dict_942_0_53, 100, -1, -1, 0, 0, 1, 1, 0, "", "R.A. 17h45m37.14s ", (void*) G__func2void( (double (*)())(&watconstants::GalacticCenterLongitude) ), 0);
   G__memfunc_setup("GalacticCenterLatitude",2229,G__wave_dict_942_0_54, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&watconstants::GalacticCenterLatitude) ), 0);
   G__memfunc_setup("GalacticCenterLongitudeUnit",2756,G__wave_dict_942_0_55, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "radians", (void*) G__func2void( (TString (*)())(&watconstants::GalacticCenterLongitudeUnit) ), 0);
   G__memfunc_setup("GalacticCenterLatitudeUnit",2645,G__wave_dict_942_0_56, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "radians", (void*) G__func2void( (TString (*)())(&watconstants::GalacticCenterLatitudeUnit) ), 0);
   G__memfunc_setup("EarthEquatorialRadius",2163,G__wave_dict_942_0_57, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::EarthEquatorialRadius) ), 0);
   G__memfunc_setup("SemimajorAxisOfWGS84ReferenceEllipsoid",3714,G__wave_dict_942_0_58, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::SemimajorAxisOfWGS84ReferenceEllipsoid) ), 0);
   G__memfunc_setup("SemiminorAxisOfWGS84ReferenceEllipsoid",3726,G__wave_dict_942_0_59, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::SemiminorAxisOfWGS84ReferenceEllipsoid) ), 0);
   G__memfunc_setup("EarthMass",904,G__wave_dict_942_0_60, 100, -1, -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (double (*)())(&watconstants::EarthMass) ), 0);
   G__memfunc_setup("EarthInclination2000",1838,G__wave_dict_942_0_61, 100, -1, -1, 0, 0, 1, 1, 0, "", "radians", (void*) G__func2void( (double (*)())(&watconstants::EarthInclination2000) ), 0);
   G__memfunc_setup("EarthOrbitalEccentricity",2471,G__wave_dict_942_0_62, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&watconstants::EarthOrbitalEccentricity) ), 0);
   G__memfunc_setup("SolarEquatorialRadius",2176,G__wave_dict_942_0_63, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::SolarEquatorialRadius) ), 0);
   G__memfunc_setup("EarthEquatorialRadiusUnit",2579,G__wave_dict_942_0_64, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::EarthEquatorialRadiusUnit) ), 0);
   G__memfunc_setup("SemimajorAxisOfWGS84ReferenceEllipsoidUnit",4130,G__wave_dict_942_0_65, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::SemimajorAxisOfWGS84ReferenceEllipsoidUnit) ), 0);
   G__memfunc_setup("SemiminorAxisOfWGS84ReferenceEllipsoidUnit",4142,G__wave_dict_942_0_66, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::SemiminorAxisOfWGS84ReferenceEllipsoidUnit) ), 0);
   G__memfunc_setup("EarthMassUnit",1320,G__wave_dict_942_0_67, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (TString (*)())(&watconstants::EarthMassUnit) ), 0);
   G__memfunc_setup("EarthInclination2000Unit",2254,G__wave_dict_942_0_68, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "radians", (void*) G__func2void( (TString (*)())(&watconstants::EarthInclination2000Unit) ), 0);
   G__memfunc_setup("EarthOrbitalEccentricityUnit",2887,G__wave_dict_942_0_69, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (TString (*)())(&watconstants::EarthOrbitalEccentricityUnit) ), 0);
   G__memfunc_setup("SolarEquatorialRadiusUnit",2592,G__wave_dict_942_0_70, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::SolarEquatorialRadiusUnit) ), 0);
   G__memfunc_setup("SolarMass",917,G__wave_dict_942_0_71, 100, -1, -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (double (*)())(&watconstants::SolarMass) ), 0);
   G__memfunc_setup("GeometrizedSolarMass",2068,G__wave_dict_942_0_72, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::GeometrizedSolarMass) ), 0);
   G__memfunc_setup("SolarLuminosity",1598,G__wave_dict_942_0_73, 100, -1, -1, 0, 0, 1, 1, 0, "", "W", (void*) G__func2void( (double (*)())(&watconstants::SolarLuminosity) ), 0);
   G__memfunc_setup("AstronomicalUnit",1676,G__wave_dict_942_0_74, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::AstronomicalUnit) ), 0);
   G__memfunc_setup("Parsec",606,G__wave_dict_942_0_75, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::Parsec) ), 0);
   G__memfunc_setup("SolarMassUnit",1333,G__wave_dict_942_0_76, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "kg", (void*) G__func2void( (TString (*)())(&watconstants::SolarMassUnit) ), 0);
   G__memfunc_setup("GeometrizedSolarMassUnit",2484,G__wave_dict_942_0_77, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::GeometrizedSolarMassUnit) ), 0);
   G__memfunc_setup("SolarLuminosityUnit",2014,G__wave_dict_942_0_78, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "W", (void*) G__func2void( (TString (*)())(&watconstants::SolarLuminosityUnit) ), 0);
   G__memfunc_setup("AstronomicalUnitUnit",2092,G__wave_dict_942_0_79, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::AstronomicalUnitUnit) ), 0);
   G__memfunc_setup("ParsecUnit",1022,G__wave_dict_942_0_80, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::ParsecUnit) ), 0);
   G__memfunc_setup("TropicalYear1994",1446,G__wave_dict_942_0_81, 100, -1, -1, 0, 0, 1, 1, 0, "", "s", (void*) G__func2void( (double (*)())(&watconstants::TropicalYear1994) ), 0);
   G__memfunc_setup("SiderealYear1994",1425,G__wave_dict_942_0_82, 100, -1, -1, 0, 0, 1, 1, 0, "", "s", (void*) G__func2void( (double (*)())(&watconstants::SiderealYear1994) ), 0);
   G__memfunc_setup("MeanSiderealDay",1480,G__wave_dict_942_0_83, 100, -1, -1, 0, 0, 1, 1, 0, "", "s", (void*) G__func2void( (double (*)())(&watconstants::MeanSiderealDay) ), 0);
   G__memfunc_setup("Lightyear",937,G__wave_dict_942_0_84, 100, -1, -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (double (*)())(&watconstants::Lightyear) ), 0);
   G__memfunc_setup("TropicalYear1994Unit",1862,G__wave_dict_942_0_85, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "s", (void*) G__func2void( (TString (*)())(&watconstants::TropicalYear1994Unit) ), 0);
   G__memfunc_setup("SiderealYear1994Unit",1841,G__wave_dict_942_0_86, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "s", (void*) G__func2void( (TString (*)())(&watconstants::SiderealYear1994Unit) ), 0);
   G__memfunc_setup("MeanSiderealDayUnit",1896,G__wave_dict_942_0_87, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "s", (void*) G__func2void( (TString (*)())(&watconstants::MeanSiderealDayUnit) ), 0);
   G__memfunc_setup("LightyearUnit",1353,G__wave_dict_942_0_88, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m", (void*) G__func2void( (TString (*)())(&watconstants::LightyearUnit) ), 0);
   G__memfunc_setup("HubbleConstantPrefactor",2370,G__wave_dict_942_0_89, 100, -1, -1, 0, 0, 1, 1, 0, "", "s^-1", (void*) G__func2void( (double (*)())(&watconstants::HubbleConstantPrefactor) ), 0);
   G__memfunc_setup("HubbleApproximateConstant",2598,G__wave_dict_942_0_90, 100, -1, -1, 0, 0, 1, 1, 0, "", "s^-1", (void*) G__func2void( (double (*)())(&watconstants::HubbleApproximateConstant) ), 0);
   G__memfunc_setup("CriticalDensityPrefactor",2481,G__wave_dict_942_0_91, 100, -1, -1, 0, 0, 1, 1, 0, "", "J m^-3", (void*) G__func2void( (double (*)())(&watconstants::CriticalDensityPrefactor) ), 0);
   G__memfunc_setup("CriticalApproximateDensity",2709,G__wave_dict_942_0_92, 100, -1, -1, 0, 0, 1, 1, 0, "", "J m^-3", (void*) G__func2void( (double (*)())(&watconstants::CriticalApproximateDensity) ), 0);
   G__memfunc_setup("CosmicBackgroundRadiationTemperature",3719,G__wave_dict_942_0_93, 100, -1, -1, 0, 0, 1, 1, 0, "", "K", (void*) G__func2void( (double (*)())(&watconstants::CosmicBackgroundRadiationTemperature) ), 0);
   G__memfunc_setup("SolarVelocityWithRespectToCBR",2908,G__wave_dict_942_0_94, 100, -1, -1, 0, 0, 1, 1, 0, "", "m s^-1", (void*) G__func2void( (double (*)())(&watconstants::SolarVelocityWithRespectToCBR) ), 0);
   G__memfunc_setup("EnergyDensityOfCBR",1750,G__wave_dict_942_0_95, 100, -1, -1, 0, 0, 1, 1, 0, "", "J m^-3", (void*) G__func2void( (double (*)())(&watconstants::EnergyDensityOfCBR) ), 0);
   G__memfunc_setup("NumberDensityOfCBRPhotons",2496,G__wave_dict_942_0_96, 100, -1, -1, 0, 0, 1, 1, 0, "", "m^-3", (void*) G__func2void( (double (*)())(&watconstants::NumberDensityOfCBRPhotons) ), 0);
   G__memfunc_setup("EntropyDensityOfCBR",1885,G__wave_dict_942_0_97, 100, -1, -1, 0, 0, 1, 1, 0, "", "J K^-1 m^-3", (void*) G__func2void( (double (*)())(&watconstants::EntropyDensityOfCBR) ), 0);
   G__memfunc_setup("HubbleConstantPrefactorUnit",2786,G__wave_dict_942_0_98, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "s^-1", (void*) G__func2void( (TString (*)())(&watconstants::HubbleConstantPrefactorUnit) ), 0);
   G__memfunc_setup("HubbleApproximateConstantUnit",3014,G__wave_dict_942_0_99, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "s^-1", (void*) G__func2void( (TString (*)())(&watconstants::HubbleApproximateConstantUnit) ), 0);
   G__memfunc_setup("CriticalDensityPrefactorUnit",2897,G__wave_dict_942_0_100, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "J m^-3", (void*) G__func2void( (TString (*)())(&watconstants::CriticalDensityPrefactorUnit) ), 0);
   G__memfunc_setup("CriticalApproximateDensityUnit",3125,G__wave_dict_942_0_101, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "J m^-3", (void*) G__func2void( (TString (*)())(&watconstants::CriticalApproximateDensityUnit) ), 0);
   G__memfunc_setup("CosmicBackgroundRadiationTemperatureUnit",4135,G__wave_dict_942_0_102, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "K", (void*) G__func2void( (TString (*)())(&watconstants::CosmicBackgroundRadiationTemperatureUnit) ), 0);
   G__memfunc_setup("SolarVelocityWithRespectToCBRUnit",3324,G__wave_dict_942_0_103, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m s^-1", (void*) G__func2void( (TString (*)())(&watconstants::SolarVelocityWithRespectToCBRUnit) ), 0);
   G__memfunc_setup("EnergyDensityOfCBRUnit",2166,G__wave_dict_942_0_104, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "J m^-3", (void*) G__func2void( (TString (*)())(&watconstants::EnergyDensityOfCBRUnit) ), 0);
   G__memfunc_setup("NumberDensityOfCBRPhotonsUnit",2912,G__wave_dict_942_0_105, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "m^-3", (void*) G__func2void( (TString (*)())(&watconstants::NumberDensityOfCBRPhotonsUnit) ), 0);
   G__memfunc_setup("EntropyDensityOfCBRUnit",2301,G__wave_dict_942_0_106, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 0, 0, 1, 1, 0, "", "J K^-1 m^-3", (void*) G__func2void( (TString (*)())(&watconstants::EntropyDensityOfCBRUnit) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwavearraylElongsPlonggR(void) {
   /* wavearray<long long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR));
   G__memfunc_setup("wavearray<long long>",1996,G__wave_dict_943_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 0, 1, 1, 1, 0, "i - - 0 - -", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<long long>",1996,G__wave_dict_943_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 0, 0, 1, 1, 0, "", "Default constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<long long>",1996,G__wave_dict_943_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 0, 1, 1, 1, 0, "u 'wavearray<long long>' - 11 - -", "copy Constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_943_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 1, 1, 1, 1, 0, "u 'wavearray<long long>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_943_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 1, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator[]",1060,G__wave_dict_943_0_6, 110, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_943_0_7, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_943_0_8, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_943_0_9, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'wavearray<long long>' - 11 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__wave_dict_943_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 1, 1, 1, 1, 0, "u 'wavearray<long long>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_943_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 1, 1, 1, 1, 0, "u 'wavearray<long long>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_943_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 1, 1, 1, 1, 0, "u 'wavearray<long long>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator<<",996,G__wave_dict_943_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 1, 1, 1, 1, 0, "u 'wavearray<long long>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__wave_dict_943_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 1, 1, 1, 1, 0, "n - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_943_0_15, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 1, 1, 1, 1, 0, "n - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_943_0_16, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 1, 1, 1, 1, 0, "n - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_943_0_17, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElongsPlonggR), -1, 1, 1, 1, 1, 0, "n - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator>>",1000,G__wave_dict_943_0_18, 67, -1, -1, 1, 1, 1, 1, 0, "C - - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Dump",406,G__wave_dict_943_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpBinary",1019,G__wave_dict_943_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpShort",934,G__wave_dict_943_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpObject",1005,G__wave_dict_943_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBinary",993,G__wave_dict_943_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadShort",908,G__wave_dict_943_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FFT",224,G__wave_dict_943_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform", (void*) NULL, 1);
   G__memfunc_setup("FFTW",311,G__wave_dict_943_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform West", (void*) NULL, 1);
   G__memfunc_setup("resetFFTW",858,G__wave_dict_943_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", "release FFTW memory", (void*) NULL, 1);
   G__memfunc_setup("Resample",825,G__wave_dict_943_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<long long>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_943_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<long long>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_943_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - i - - 0 '6' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_943_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_943_0_32, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_943_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_943_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_943_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_943_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_943_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_943_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("size",443,G__wave_dict_943_0_39, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSlice",828,G__wave_dict_943_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlice",816,G__wave_dict_943_0_41, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_943_0_42, 100, -1, -1, 0, 2, 1, 1, 8, 
"k - 'size_t' 0 '0' - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_943_0_43, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<long long>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_943_0_44, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_943_0_45, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_943_0_46, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_943_0_47, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<long long>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_943_0_48, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_943_0_49, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_943_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<long long>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_943_0_51, 110, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_943_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<long long>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("min",324,G__wave_dict_943_0_53, 110, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SQRT",330,G__wave_dict_943_0_54, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("hann",421,G__wave_dict_943_0_55, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("waveSort",859,G__wave_dict_943_0_56, 121, -1, -1, 0, 3, 1, 1, 8, 
"N - - 2 - pp k - 'size_t' 0 '0' l "
"k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSort",859,G__wave_dict_943_0_57, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 '0' l k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_943_0_58, 121, -1, -1, 0, 4, 1, 1, 8, 
"N - - 2 - pp k - 'size_t' 0 - l "
"k - 'size_t' 0 - r k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_943_0_59, 110, -1, -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - l k - 'size_t' 0 - r "
"k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_943_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRank",1326,G__wave_dict_943_0_61, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRankE",1395,G__wave_dict_943_0_62, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rank",428,G__wave_dict_943_0_63, 110, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.5' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLPRFilter",1172,G__wave_dict_943_0_64, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("spesla",648,G__wave_dict_943_0_65, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_943_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_943_0_67, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("white",545,G__wave_dict_943_0_68, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 4, 1, 1, 8, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("exponential",1191,G__wave_dict_943_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get",320,G__wave_dict_943_0_70, 110, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__wave_dict_943_0_71, 110, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uniform",768,G__wave_dict_943_0_72, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rand48",529,G__wave_dict_943_0_73, 108, -1, -1, 0, 1, 1, 1, 0, "l - - 0 '1024' k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatistics",1387,G__wave_dict_943_0_74, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - mean d - - 1 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_943_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cpf",313,G__wave_dict_943_0_76, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<long long>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_943_0_77, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<long long>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__wave_dict_943_0_78, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<long long>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_943_0_79, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'wavearray<long long>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_943_0_80, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "n - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wavecount",988,G__wave_dict_943_0_81, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_943_0_82, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<long long>' - 11 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_943_0_83, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<long long>' - 11 - - i - - 0 - - "
"i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_943_0_84, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<long long>' - 11 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_943_0_85, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("compare",743,G__wave_dict_943_0_87, 105, -1, -1, 0, 2, 3, 1, 0, 
"Y - - 10 - x Y - - 10 - y", (char*)NULL, (void*) G__func2void( (int (*)(const void*, const void*))(&wavearray<long long>::compare) ), 0);
   G__memfunc_setup("Class",502,G__wave_dict_943_0_88, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&wavearray<long long>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_943_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<long long>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_943_0_90, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&wavearray<long long>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_943_0_91, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&wavearray<long long>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_943_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_943_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<long long>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_943_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<long long>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_943_0_98, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<long long>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_943_0_99, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<long long>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~wavearray<long long>", 2122, G__wave_dict_943_0_100, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncwavearraylElonggR(void) {
   /* wavearray<long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR));
   G__memfunc_setup("wavearray<long>",1532,G__wave_dict_944_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 0, 1, 1, 1, 0, "i - - 0 - -", "Constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<long>",1532,G__wave_dict_944_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 0, 0, 1, 1, 0, "", "Default constructor", (void*) NULL, 0);
   G__memfunc_setup("wavearray<long>",1532,G__wave_dict_944_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 0, 1, 1, 1, 0, "u 'wavearray<long>' - 11 - -", "copy Constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_944_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 1, 1, 1, 1, 0, "u 'wavearray<long>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_944_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 1, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator[]",1060,G__wave_dict_944_0_6, 108, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_944_0_7, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_944_0_8, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("limit",543,G__wave_dict_944_0_9, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 8, "u 'wavearray<long>' - 11 - a", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator+=",980,G__wave_dict_944_0_10, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 1, 1, 1, 1, 0, "u 'wavearray<long>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_944_0_11, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 1, 1, 1, 1, 0, "u 'wavearray<long>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_944_0_12, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 1, 1, 1, 1, 0, "u 'wavearray<long>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator<<",996,G__wave_dict_944_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 1, 1, 1, 1, 0, "u 'wavearray<long>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__wave_dict_944_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 1, 1, 1, 1, 0, "l - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__wave_dict_944_0_15, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 1, 1, 1, 1, 0, "l - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator-=",982,G__wave_dict_944_0_16, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 1, 1, 1, 1, 0, "l - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator*=",979,G__wave_dict_944_0_17, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylElonggR), -1, 1, 1, 1, 1, 0, "l - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator>>",1000,G__wave_dict_944_0_18, 67, -1, -1, 1, 1, 1, 1, 0, "C - - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Dump",406,G__wave_dict_944_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpBinary",1019,G__wave_dict_944_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpShort",934,G__wave_dict_944_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DumpObject",1005,G__wave_dict_944_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadBinary",993,G__wave_dict_944_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - - i - - 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadShort",908,G__wave_dict_944_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FFT",224,G__wave_dict_944_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform", (void*) NULL, 1);
   G__memfunc_setup("FFTW",311,G__wave_dict_944_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 '1' -", "fast Fourier transform West", (void*) NULL, 1);
   G__memfunc_setup("resetFFTW",858,G__wave_dict_944_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", "release FFTW memory", (void*) NULL, 1);
   G__memfunc_setup("Resample",825,G__wave_dict_944_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<long>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_944_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<long>' - 11 - - d - - 0 - - "
"i - - 0 '6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resample",857,G__wave_dict_944_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - i - - 0 '6' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_944_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("start",558,G__wave_dict_944_0_32, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_944_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("stop",454,G__wave_dict_944_0_34, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_944_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rate",428,G__wave_dict_944_0_36, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_944_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("edge",405,G__wave_dict_944_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("size",443,G__wave_dict_944_0_39, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSlice",828,G__wave_dict_944_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlice",816,G__wave_dict_944_0_41, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_944_0_42, 100, -1, -1, 0, 2, 1, 1, 8, 
"k - 'size_t' 0 '0' - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("median",622,G__wave_dict_944_0_43, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<long>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_944_0_44, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_944_0_45, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - f", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_944_0_46, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mean",417,G__wave_dict_944_0_47, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<long>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_944_0_48, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_944_0_49, 100, -1, -1, 0, 1, 1, 1, 0, "u 'slice' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rms",338,G__wave_dict_944_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - t U 'wavearray<long>' - 0 - in "
"g - - 0 'false' fl k - 'size_t' 0 '1' n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_944_0_51, 108, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("max",326,G__wave_dict_944_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<long>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("min",324,G__wave_dict_944_0_53, 108, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SQRT",330,G__wave_dict_944_0_54, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("hann",421,G__wave_dict_944_0_55, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("waveSort",859,G__wave_dict_944_0_56, 121, -1, -1, 0, 3, 1, 1, 8, 
"L - - 2 - pp k - 'size_t' 0 '0' l "
"k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSort",859,G__wave_dict_944_0_57, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 '0' l k - 'size_t' 0 '0' r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_944_0_58, 121, -1, -1, 0, 4, 1, 1, 8, 
"L - - 2 - pp k - 'size_t' 0 - l "
"k - 'size_t' 0 - r k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_944_0_59, 108, -1, -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - l k - 'size_t' 0 - r "
"k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("waveSplit",959,G__wave_dict_944_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRank",1326,G__wave_dict_944_0_61, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSampleRankE",1395,G__wave_dict_944_0_62, 105, -1, -1, 0, 3, 1, 1, 8, 
"k - 'size_t' 0 - n k - 'size_t' 0 - l "
"k - 'size_t' 0 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rank",428,G__wave_dict_944_0_63, 108, -1, -1, 0, 1, 1, 1, 8, "d - - 0 '0.5' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLPRFilter",1172,G__wave_dict_944_0_64, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 0 - - k - 'size_t' 0 '0' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("spesla",648,G__wave_dict_944_0_65, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - - d - - 0 - - "
"d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_944_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "u 'wavearray<double>' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("lprFilter",948,G__wave_dict_944_0_67, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("white",545,G__wave_dict_944_0_68, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 4, 1, 1, 8, 
"d - - 0 - - i - - 0 '0' - "
"d - - 0 '0.' - d - - 0 '0.' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("exponential",1191,G__wave_dict_944_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("get",320,G__wave_dict_944_0_70, 108, -1, -1, 0, 1, 1, 1, 0, "k - 'size_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__wave_dict_944_0_71, 108, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("uniform",768,G__wave_dict_944_0_72, 108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rand48",529,G__wave_dict_944_0_73, 108, -1, -1, 0, 1, 1, 1, 0, "l - - 0 '1024' k", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatistics",1387,G__wave_dict_944_0_74, 100, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - mean d - - 1 - rms", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_944_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("cpf",313,G__wave_dict_944_0_76, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<long>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__wave_dict_944_0_77, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<long>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sub",330,G__wave_dict_944_0_78, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'wavearray<long>' - 11 - - i - - 0 '0' - "
"i - - 0 '0' - i - - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_944_0_79, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "u 'wavearray<long>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__wave_dict_944_0_80, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "l - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("wavecount",988,G__wave_dict_944_0_81, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_944_0_82, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<long>' - 11 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_944_0_83, 100, -1, -1, 0, 3, 1, 1, 0, 
"u 'wavearray<long>' - 11 - - i - - 0 - - "
"i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Stack",502,G__wave_dict_944_0_84, 100, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<long>' - 11 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__wave_dict_944_0_85, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("compare",743,G__wave_dict_944_0_87, 105, -1, -1, 0, 2, 3, 1, 0, 
"Y - - 10 - x Y - - 10 - y", (char*)NULL, (void*) G__func2void( (int (*)(const void*, const void*))(&wavearray<long>::compare) ), 0);
   G__memfunc_setup("Class",502,G__wave_dict_944_0_88, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&wavearray<long>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_944_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<long>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_944_0_90, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&wavearray<long>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_944_0_91, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&wavearray<long>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_944_0_95, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_944_0_96, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<long>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_944_0_97, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<long>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_944_0_98, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&wavearray<long>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_944_0_99, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&wavearray<long>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~wavearray<long>", 1658, G__wave_dict_944_0_100, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHaarlEfloatgR(void) {
   /* Haar<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR));
   G__memfunc_setup("Haar<float>",1036,G__wave_dict_945_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR), -1, 0, 1, 1, 1, 0, "i - - 0 '0' tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Haar<float>",1036,G__wave_dict_945_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Haar<float>",1036,G__wave_dict_945_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Haar<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_945_0_7, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Haar<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_945_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Haar<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_945_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Haar<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_945_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Haar<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_945_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_945_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Haar<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_945_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Haar<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_945_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Haar<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_945_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Haar<float>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Haar<float>", 1162, G__wave_dict_945_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_945_0_20, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_HaarlEfloatgR), -1, 1, 1, 1, 1, 0, "u 'Haar<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHaarlEdoublegR(void) {
   /* Haar<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR));
   G__memfunc_setup("Haar<double>",1137,G__wave_dict_946_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR), -1, 0, 1, 1, 1, 0, "i - - 0 '0' tree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Haar<double>",1137,G__wave_dict_946_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Haar<double>",1137,G__wave_dict_946_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Haar<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_946_0_7, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Haar<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_946_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Haar<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_946_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Haar<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_946_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Haar<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_946_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_946_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Haar<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_946_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Haar<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_946_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Haar<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_946_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Haar<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Haar<double>", 1263, G__wave_dict_946_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_946_0_20, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_HaarlEdoublegR), -1, 1, 1, 1, 1, 0, "u 'Haar<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncBiorthogonallEfloatgR(void) {
   /* Biorthogonal<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR));
   G__memfunc_setup("setFilter",946,G__wave_dict_947_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Biorthogonal<float>",1912,G__wave_dict_947_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Biorthogonal<float>",1912,G__wave_dict_947_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Biorthogonal<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Biorthogonal<float>",1912,G__wave_dict_947_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR), -1, 0, 3, 1, 1, 0, 
"i - - 0 '4' order i - - 0 '0' tree "
"i 'BORDER' - 0 'B_POLYNOM' border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_947_0_8, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Biorthogonal<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_947_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Biorthogonal<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_947_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Biorthogonal<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_947_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Biorthogonal<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_947_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_947_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Biorthogonal<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_947_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Biorthogonal<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_947_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Biorthogonal<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_947_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Biorthogonal<float>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Biorthogonal<float>", 2038, G__wave_dict_947_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_947_0_21, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEfloatgR), -1, 1, 1, 1, 1, 0, "u 'Biorthogonal<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncBiorthogonallEdoublegR(void) {
   /* Biorthogonal<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR));
   G__memfunc_setup("setFilter",946,G__wave_dict_948_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Biorthogonal<double>",2013,G__wave_dict_948_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Biorthogonal<double>",2013,G__wave_dict_948_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Biorthogonal<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Biorthogonal<double>",2013,G__wave_dict_948_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR), -1, 0, 3, 1, 1, 0, 
"i - - 0 '4' order i - - 0 '0' tree "
"i 'BORDER' - 0 'B_POLYNOM' border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_948_0_8, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Biorthogonal<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_948_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Biorthogonal<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_948_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Biorthogonal<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_948_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Biorthogonal<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_948_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_948_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Biorthogonal<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_948_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Biorthogonal<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_948_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Biorthogonal<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_948_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Biorthogonal<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Biorthogonal<double>", 2139, G__wave_dict_948_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_948_0_21, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_BiorthogonallEdoublegR), -1, 1, 1, 1, 1, 0, "u 'Biorthogonal<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDaubechieslEfloatgR(void) {
   /* Daubechies<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR));
   G__memfunc_setup("setFilter",946,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Daubechies<float>",1661,G__wave_dict_949_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Daubechies<float>",1661,G__wave_dict_949_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Daubechies<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Daubechies<float>",1661,G__wave_dict_949_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR), -1, 0, 3, 1, 1, 0, 
"i - - 0 '4' order i - - 0 '0' tree "
"i 'BORDER' - 0 'B_CYCLE' border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_949_0_8, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Daubechies<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_949_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Daubechies<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_949_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Daubechies<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_949_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Daubechies<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_949_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_949_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Daubechies<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_949_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Daubechies<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_949_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Daubechies<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_949_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Daubechies<float>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Daubechies<float>", 1787, G__wave_dict_949_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_949_0_21, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'Daubechies<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDaubechieslEdoublegR(void) {
   /* Daubechies<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR));
   G__memfunc_setup("setFilter",946,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Daubechies<double>",1762,G__wave_dict_950_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Daubechies<double>",1762,G__wave_dict_950_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Daubechies<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Daubechies<double>",1762,G__wave_dict_950_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR), -1, 0, 3, 1, 1, 0, 
"i - - 0 '4' order i - - 0 '0' tree "
"i 'BORDER' - 0 'B_CYCLE' border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_950_0_8, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Daubechies<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_950_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Daubechies<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_950_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Daubechies<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_950_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Daubechies<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_950_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_950_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Daubechies<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_950_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Daubechies<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_950_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Daubechies<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_950_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Daubechies<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Daubechies<double>", 1888, G__wave_dict_950_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_950_0_21, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_DaubechieslEdoublegR), -1, 1, 1, 1, 1, 0, "u 'Daubechies<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymletlEfloatgR(void) {
   /* Symlet<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR));
   G__memfunc_setup("setFilter",946,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Symlet<float>",1294,G__wave_dict_951_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Symlet<float>",1294,G__wave_dict_951_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Symlet<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Symlet<float>",1294,G__wave_dict_951_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR), -1, 0, 3, 1, 1, 0, 
"i - - 0 '4' order i - - 0 '0' tree "
"i 'BORDER' - 0 'B_CYCLE' border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_951_0_8, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Symlet<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_951_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Symlet<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_951_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Symlet<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_951_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Symlet<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_951_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_951_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Symlet<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_951_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Symlet<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_951_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Symlet<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_951_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Symlet<float>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Symlet<float>", 1420, G__wave_dict_951_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_951_0_21, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_SymletlEfloatgR), -1, 1, 1, 1, 1, 0, "u 'Symlet<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymletlEdoublegR(void) {
   /* Symlet<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR));
   G__memfunc_setup("setFilter",946,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Symlet<double>",1395,G__wave_dict_952_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Symlet<double>",1395,G__wave_dict_952_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Symlet<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Symlet<double>",1395,G__wave_dict_952_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR), -1, 0, 3, 1, 1, 0, 
"i - - 0 '4' order i - - 0 '0' tree "
"i 'BORDER' - 0 'B_CYCLE' border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_952_0_8, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Symlet<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_952_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Symlet<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_952_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Symlet<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_952_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Symlet<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_952_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_952_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Symlet<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_952_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Symlet<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_952_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Symlet<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_952_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Symlet<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Symlet<double>", 1521, G__wave_dict_952_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_952_0_21, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_SymletlEdoublegR), -1, 1, 1, 1, 1, 0, "u 'Symlet<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMeyerlEfloatgR(void) {
   /* Meyer<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR));
   G__memfunc_setup("setFilter",946,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Meyer<float>",1170,G__wave_dict_953_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Meyer<float>",1170,G__wave_dict_953_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Meyer<float>",1170,G__wave_dict_953_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Meyer<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Meyer<float>",1170,G__wave_dict_953_0_5, 105, G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR), -1, 0, 3, 1, 1, 0, 
"i - - 0 - m i - - 0 '0' tree "
"i 'BORDER' - 0 'B_CYCLE' border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("filter",646,G__wave_dict_953_0_7, 100, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - - d - - 0 - - "
"d - - 0 '1.e-6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxLevel",1118,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_953_0_11, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Meyer<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_953_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Meyer<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_953_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Meyer<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_953_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Meyer<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_953_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_953_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Meyer<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_953_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Meyer<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_953_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Meyer<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_953_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Meyer<float>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Meyer<float>", 1296, G__wave_dict_953_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_953_0_24, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_MeyerlEfloatgR), -1, 1, 1, 1, 1, 0, "u 'Meyer<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMeyerlEdoublegR(void) {
   /* Meyer<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR));
   G__memfunc_setup("setFilter",946,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Meyer<double>",1271,G__wave_dict_954_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Meyer<double>",1271,G__wave_dict_954_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Meyer<double>",1271,G__wave_dict_954_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Meyer<double>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Meyer<double>",1271,G__wave_dict_954_0_5, 105, G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR), -1, 0, 3, 1, 1, 0, 
"i - - 0 - m i - - 0 '0' tree "
"i 'BORDER' - 0 'B_CYCLE' border", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("filter",646,G__wave_dict_954_0_7, 100, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - - d - - 0 - - "
"d - - 0 '1.e-6' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxLevel",1118,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - level i - - 0 - layer", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__wave_dict_954_0_11, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Meyer<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_954_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Meyer<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_954_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Meyer<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_954_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Meyer<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_954_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_954_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Meyer<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_954_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Meyer<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_954_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Meyer<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_954_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Meyer<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Meyer<double>", 1397, G__wave_dict_954_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_954_0_24, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_MeyerlEdoublegR), -1, 1, 1, 1, 1, 0, "u 'Meyer<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWDMlEfloatgR(void) {
   /* WDM<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR));
   G__memfunc_setup("WDM<float>",888,G__wave_dict_955_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WDM<float>",888,G__wave_dict_955_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR), -1, 0, 4, 1, 1, 0, 
"i - - 0 - M i - - 0 - K "
"i - - 0 '2' n i - - 0 '7' P", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WDM<float>",888,G__wave_dict_955_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'WDM<float>' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxLevel",1118,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("forward",757,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("inverse",764,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getBaseWave",1102,G__wave_dict_955_0_9, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - m i - - 0 - n "
"u 'SymmArray<double>' - 1 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBaseWaveQ",1183,G__wave_dict_955_0_10, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - m i - - 0 - n "
"u 'SymmArray<double>' - 1 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBaseWave",1102,G__wave_dict_955_0_11, 105, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - j u 'wavearray<double>' - 1 - w "
"g - - 0 'false' Quad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,(G__InterfaceMethod) NULL,105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("t2w",285,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("w2t",285,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - flag", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("w2tQ",366,G__wave_dict_955_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPixelAmplitude",1767,G__wave_dict_955_0_16, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"i - - 0 - - g - - 0 'false' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPixelAmplitudeSSEOld",2289,G__wave_dict_955_0_17, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - - i - - 0 - - "
"i - - 0 - - g - - 0 'false' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPixelAmplitudeSSE",2002,G__wave_dict_955_0_18, 102, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - m i - - 0 - n "
"i - - 0 - dT g - - 0 - Quad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPixelAmplitudeSSE",2002,G__wave_dict_955_0_19, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - - 0 - m i - - 0 - n "
"i - - 0 - t1 i - - 0 - t2 "
"F - - 0 - r g - - 0 - Quad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeShiftTest",1325,G__wave_dict_955_0_20, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TimeShiftTestSSE",1560,G__wave_dict_955_0_21, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - dt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDamp",790,(G__InterfaceMethod) NULL,102, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n i - - 0 - m "
"c - - 0 ''p'' c", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDvec",790,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 3, 1, 1, 0, 
"i - - 0 - j i - - 0 - K "
"c - - 0 ''p'' c", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTDvecSSE",1025,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEfloatgR), -1, 0, 4, 1, 1, 0, 
"i - - 0 - j i - - 0 - K "
"c - - 0 - c U 'SSeries<double>' - 0 - pss", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTFvec",792,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - j u 'wavearray<float>' - 1 - r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initFourier",1168,G__wave_dict_955_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFilter",934,G__wave_dict_955_0_27, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTDFilter",1098,G__wave_dict_955_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - nCoeffs i - - 0 '1' L", "L determines fractional increment tau/L", (void*) NULL, 0);
   G__memfunc_setup("getTDFilter2",1136,G__wave_dict_955_0_29, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 2, 1, 1, 0, 
"i - - 0 - n i - - 0 - L", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDFilter1",1135,G__wave_dict_955_0_30, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 0, 2, 1, 1, 0, 
"i - - 0 - n i - - 0 - L", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlice",816,G__wave_dict_955_0_31, 117, G__get_linked_tagnum(&G__wave_dictLN_slice), -1, 0, 1, 1, 1, 0, "d - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTFMap",740,G__wave_dict_955_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_955_0_33, 107, -1, G__defined_typename("size_t"), 0, 1, 1, 1, 0, "i - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDFsize",985,(G__InterfaceMethod) NULL,107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initSSEPointers",1523,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_955_0_36, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&WDM<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_955_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WDM<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_955_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&WDM<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_955_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&WDM<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_955_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_955_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WDM<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_955_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WDM<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_955_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&WDM<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_955_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&WDM<float>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~WDM<float>", 1014, G__wave_dict_955_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_955_0_49, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_WDMlEfloatgR), -1, 1, 1, 1, 1, 0, "u 'WDM<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmArraylEintgR(void) {
   /* SymmArray<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR));
   G__memfunc_setup("SymmArray<int>",1386,G__wave_dict_956_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR), -1, 0, 1, 1, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmArray<int>",1386,G__wave_dict_956_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR), -1, 0, 1, 1, 1, 0, "u 'SymmArray<int>' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_956_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR), -1, 1, 1, 1, 1, 0, "u 'SymmArray<int>' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_956_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_956_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_956_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_956_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_956_0_8, 105, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_956_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize0",674,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_956_0_11, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmArray<int>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_956_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArray<int>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_956_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmArray<int>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_956_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmArray<int>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_956_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_956_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArray<int>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_956_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArray<int>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_956_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArray<int>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_956_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArray<int>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmArray<int>", 1512, G__wave_dict_956_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmArraylEfloatgR(void) {
   /* SymmArray<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR));
   G__memfunc_setup("SymmArray<float>",1589,G__wave_dict_957_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR), -1, 0, 1, 1, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmArray<float>",1589,G__wave_dict_957_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR), -1, 0, 1, 1, 1, 0, "u 'SymmArray<float>' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_957_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR), -1, 1, 1, 1, 1, 0, "u 'SymmArray<float>' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_957_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_957_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_957_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_957_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_957_0_8, 102, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_957_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize0",674,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_957_0_11, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmArray<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_957_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArray<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_957_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmArray<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_957_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmArray<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_957_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_957_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArray<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_957_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArray<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_957_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArray<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_957_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArray<float>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmArray<float>", 1715, G__wave_dict_957_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmArraySSElEintgR(void) {
   /* SymmArraySSE<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR));
   G__memfunc_setup("SymmArraySSE<int>",1621,G__wave_dict_958_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR), -1, 0, 1, 1, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmArraySSE<int>",1621,G__wave_dict_958_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR), -1, 0, 1, 1, 1, 0, "u 'SymmArraySSE<int>' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_958_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR), -1, 1, 1, 1, 1, 0, "u 'SymmArraySSE<int>' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_958_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_958_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nn", "new n", (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_958_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_958_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_958_0_8, 105, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSEPointer",972,G__wave_dict_958_0_9, 73, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSESize",646,G__wave_dict_958_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_958_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZeroExtraElements",1761,G__wave_dict_958_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocateSSE",1072,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "aligned allocation; uses SizeSSE, last; sets rec, zero", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_958_0_14, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmArraySSE<int>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_958_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArraySSE<int>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_958_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmArraySSE<int>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_958_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmArraySSE<int>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_958_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_958_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArraySSE<int>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_958_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArraySSE<int>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_958_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArraySSE<int>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_958_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArraySSE<int>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmArraySSE<int>", 1747, G__wave_dict_958_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmArraySSElEdoublegR(void) {
   /* SymmArraySSE<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR));
   G__memfunc_setup("SymmArraySSE<double>",1925,G__wave_dict_959_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR), -1, 0, 1, 1, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmArraySSE<double>",1925,G__wave_dict_959_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR), -1, 0, 1, 1, 1, 0, "u 'SymmArraySSE<double>' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_959_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR), -1, 1, 1, 1, 1, 0, "u 'SymmArraySSE<double>' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_959_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_959_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nn", "new n", (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_959_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_959_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_959_0_8, 100, -1, -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSEPointer",972,G__wave_dict_959_0_9, 68, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSESize",646,G__wave_dict_959_0_10, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_959_0_11, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZeroExtraElements",1761,G__wave_dict_959_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocateSSE",1072,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "aligned allocation; uses SizeSSE, last; sets rec, zero", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_959_0_14, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmArraySSE<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_959_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArraySSE<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_959_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmArraySSE<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_959_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmArraySSE<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_959_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_959_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArraySSE<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_959_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArraySSE<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_959_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmArraySSE<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_959_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmArraySSE<double>::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmArraySSE<double>", 2051, G__wave_dict_959_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmObjArraylESymmArraylEintgRsPgR(void) {
   /* SymmObjArray<SymmArray<int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR));
   G__memfunc_setup("SymmObjArray<SymmArray<int> >",2756,G__wave_dict_960_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR), -1, 0, 1, 5, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmObjArray<SymmArray<int> >",2756,G__wave_dict_960_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR), -1, 0, 1, 5, 1, 0, "u 'SymmObjArray<SymmArray<int> >' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_960_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'SymmObjArray<SymmArray<int> >' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_960_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - sz", "data is lost", (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_960_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_960_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_960_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEintgR), -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_960_0_8, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize0",674,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "h - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_960_0_10, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmObjArray<SymmArray<int> >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_960_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArray<int> >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_960_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmObjArray<SymmArray<int> >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_960_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmObjArray<SymmArray<int> >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_960_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_960_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArray<int> >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_960_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArray<int> >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_960_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArray<int> >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_960_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArray<int> >::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmObjArray<SymmArray<int> >", 2882, G__wave_dict_960_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmObjArraylESymmArraylEfloatgRsPgR(void) {
   /* SymmObjArray<SymmArray<float> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR));
   G__memfunc_setup("SymmObjArray<SymmArray<float> >",2959,G__wave_dict_961_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR), -1, 0, 1, 5, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmObjArray<SymmArray<float> >",2959,G__wave_dict_961_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR), -1, 0, 1, 5, 1, 0, "u 'SymmObjArray<SymmArray<float> >' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_961_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR), -1, 1, 1, 1, 1, 0, "u 'SymmObjArray<SymmArray<float> >' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_961_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - sz", "data is lost", (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_961_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_961_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_961_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEfloatgR), -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_961_0_8, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize0",674,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "h - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_961_0_10, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmObjArray<SymmArray<float> >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_961_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArray<float> >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_961_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmObjArray<SymmArray<float> >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_961_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmObjArray<SymmArray<float> >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_961_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_961_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArray<float> >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_961_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArray<float> >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_961_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArray<float> >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_961_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArray<float> >::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmObjArray<SymmArray<float> >", 3085, G__wave_dict_961_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmObjArraylESymmArraylEdoublegRsPgR(void) {
   /* SymmObjArray<SymmArray<double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR));
   G__memfunc_setup("SymmObjArray<SymmArray<double> >",3060,G__wave_dict_962_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR), -1, 0, 1, 5, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmObjArray<SymmArray<double> >",3060,G__wave_dict_962_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR), -1, 0, 1, 5, 1, 0, "u 'SymmObjArray<SymmArray<double> >' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_962_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'SymmObjArray<SymmArray<double> >' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_962_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - sz", "data is lost", (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_962_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_962_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_962_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraylEdoublegR), -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_962_0_8, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize0",674,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "h - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_962_0_10, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmObjArray<SymmArray<double> >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_962_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArray<double> >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_962_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmObjArray<SymmArray<double> >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_962_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmObjArray<SymmArray<double> >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_962_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_962_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArray<double> >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_962_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArray<double> >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_962_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArray<double> >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_962_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArray<double> >::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmObjArray<SymmArray<double> >", 3186, G__wave_dict_962_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmObjArraylESymmArraySSElEintgRsPgR(void) {
   /* SymmObjArray<SymmArraySSE<int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR));
   G__memfunc_setup("SymmObjArray<SymmArraySSE<int> >",2991,G__wave_dict_963_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR), -1, 0, 1, 5, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmObjArray<SymmArraySSE<int> >",2991,G__wave_dict_963_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR), -1, 0, 1, 5, 1, 0, "u 'SymmObjArray<SymmArraySSE<int> >' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_963_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'SymmObjArray<SymmArraySSE<int> >' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_963_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - sz", "data is lost", (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_963_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_963_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_963_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEintgR), -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_963_0_8, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize0",674,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "h - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_963_0_10, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmObjArray<SymmArraySSE<int> >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_963_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArraySSE<int> >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_963_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmObjArray<SymmArraySSE<int> >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_963_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmObjArray<SymmArraySSE<int> >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_963_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_963_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArraySSE<int> >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_963_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArraySSE<int> >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_963_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArraySSE<int> >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_963_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArraySSE<int> >::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmObjArray<SymmArraySSE<int> >", 3117, G__wave_dict_963_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSymmObjArraylESymmArraySSElEdoublegRsPgR(void) {
   /* SymmObjArray<SymmArraySSE<double> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR));
   G__memfunc_setup("SymmObjArray<SymmArraySSE<double> >",3295,G__wave_dict_964_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR), -1, 0, 1, 5, 1, 0, "h - - 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SymmObjArray<SymmArraySSE<double> >",3295,G__wave_dict_964_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR), -1, 0, 1, 5, 1, 0, "u 'SymmObjArray<SymmArraySSE<double> >' - 11 - -", "copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_964_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'SymmObjArray<SymmArraySSE<double> >' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize",626,G__wave_dict_964_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - - 0 - sz", "data is lost", (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__wave_dict_964_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__wave_dict_964_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "E - - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_964_0_7, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEdoublegR), -1, 1, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Last",404,G__wave_dict_964_0_8, 104, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Resize0",674,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "h - - 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_964_0_10, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SymmObjArray<SymmArraySSE<double> >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_964_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArraySSE<double> >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_964_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SymmObjArray<SymmArraySSE<double> >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_964_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SymmObjArray<SymmArraySSE<double> >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_964_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_964_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArraySSE<double> >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_964_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArraySSE<double> >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_964_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SymmObjArray<SymmArraySSE<double> >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_964_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SymmObjArray<SymmArraySSE<double> >::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SymmObjArray<SymmArraySSE<double> >", 3421, G__wave_dict_964_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSSerieslEfloatgR(void) {
   /* SSeries<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR));
   G__memfunc_setup("SSeries<float>",1358,G__wave_dict_965_0_1, 105, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSeries<float>",1358,G__wave_dict_965_0_2, 105, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Wavelet' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSeries<float>",1358,G__wave_dict_965_0_3, 105, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR), -1, 0, 2, 1, 1, 0, 
"u 'wavearray<float>' - 11 - value u 'Wavelet' - 11 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SSeries<float>",1358,G__wave_dict_965_0_4, 105, G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR), -1, 0, 1, 1, 1, 0, "u 'WSeries<float>' - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap",586,G__wave_dict_965_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'WSeries<float>' - 0 - pws", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCore",658,G__wave_dict_965_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"k - 'size_t' 0 - ifoID U 'netcluster' - 0 - pwc "
"i - - 0 '0' ID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHalo",688,G__wave_dict_965_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 '0.042' maxTau i - - 0 '1' lHalo "
"i - - 0 '-1' tHalo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHaloSlice",1172,G__wave_dict_965_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' eslice", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHaloLayer",1185,G__wave_dict_965_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHaloDelay",1171,G__wave_dict_965_0_10, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSparseSize",1321,G__wave_dict_965_0_11, 105, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' bcore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSTFdata",935,G__wave_dict_965_0_12, 103, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - index U 'SymmArraySSE<float>' - 0 - pS", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSparseIndex",1414,G__wave_dict_965_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEintgR), -1, 0, 1, 1, 1, 0, "g - - 0 'true' bcore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetSparseTable",1625,G__wave_dict_965_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateSparseTable",1721,G__wave_dict_965_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Expand",608,G__wave_dict_965_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' bcore", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clean",483,G__wave_dict_965_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Shrink",623,G__wave_dict_965_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlice",784,G__wave_dict_965_0_19, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayer",797,G__wave_dict_965_0_20, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__wave_dict_965_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'WSeries<float>' - 0 'NULL' pws g - - 0 'true' reset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayers",912,G__wave_dict_965_0_22, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSlices",899,G__wave_dict_965_0_23, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFreqResolution",1762,G__wave_dict_965_0_24, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeResolution",1763,G__wave_dict_965_0_25, 102, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap00",670,G__wave_dict_965_0_26, 102, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap90",679,G__wave_dict_965_0_27, 102, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap00",670,G__wave_dict_965_0_28, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - slice i - - 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMap90",679,G__wave_dict_965_0_29, 102, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - slice i - - 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap00",682,G__wave_dict_965_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - index f - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap90",691,G__wave_dict_965_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - index f - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap00",682,G__wave_dict_965_0_32, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - slice i - - 0 - layer "
"f - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMap90",691,G__wave_dict_965_0_33, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - slice i - - 0 - layer "
"f - - 0 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Core",393,G__wave_dict_965_0_34, 115, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - slice i - - 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Core",393,G__wave_dict_965_0_35, 115, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("binarySearch",1243,G__wave_dict_965_0_36, 105, -1, -1, 0, 4, 1, 1, 0, 
"I - - 0 - array i - - 0 - start "
"i - - 0 - end i - - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("binarySearch",1243,G__wave_dict_965_0_37, 105, -1, -1, 0, 3, 1, 1, 0, 
"I - - 0 - array i - - 0 - size "
"i - - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckWaveletType",1624,G__wave_dict_965_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__wave_dict_965_0_39, 85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SSeries<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__wave_dict_965_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SSeries<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__wave_dict_965_0_41, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SSeries<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__wave_dict_965_0_42, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SSeries<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__wave_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__wave_dict_965_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__wave_dict_965_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SSeries<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__wave_dict_965_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SSeries<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__wave_dict_965_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SSeries<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__wave_dict_965_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SSeries<float>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SSeries<float>", 1358, G__wave_dict_965_0_51, (int) ('i'), G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR), -1, 0, 1, 1, 1, 0, "u 'SSeries<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SSeries<float>", 1484, G__wave_dict_965_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__wave_dict_965_0_53, (int) ('u'), G__get_linked_tagnum(&G__wave_dictLN_SSerieslEfloatgR), -1, 1, 1, 1, 1, 0, "u 'SSeries<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR(void) {
   /* vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_967_0_1, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR), G__defined_typename("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_967_0_2, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR), G__defined_typename("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_967_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_967_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_967_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_967_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_967_0_7, 107, -1, G__defined_typename("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_967_0_8, 107, -1, G__defined_typename("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_967_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_967_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type' 0 - sz u 'SymmArraySSE<float>' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_967_0_11, 107, -1, G__defined_typename("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_967_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_967_0_13, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR), G__defined_typename("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_967_0_14, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR), G__defined_typename("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >",5620,G__wave_dict_967_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >",5620,G__wave_dict_967_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type' 0 - n u 'SymmArraySSE<float>' - 11 '(SymmArraySSE<float>)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >",5620,G__wave_dict_967_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >",5620,G__wave_dict_967_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator' 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_iterator' 10 - first u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator' 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_967_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_967_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_967_0_21, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_967_0_22, 117, G__get_linked_tagnum(&G__wave_dictLN_SymmArraySSElEfloatgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_967_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SymmArraySSE<float>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_967_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_967_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator' - 0 - position u 'SymmArraySSE<float>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_967_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator' - 0 - position u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator' 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_iterator' 10 - first "
"u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator' 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_967_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator' - 0 - position k - 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::size_type' 0 - n "
"u 'SymmArraySSE<float>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_967_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_967_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_967_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator' - 0 - first u 'vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_967_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >", 5746, G__wave_dict_967_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR(void) {
   /* vector<WSeries<double>*,allocator<WSeries<double>*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR));
   G__memfunc_setup("at",213,G__wave_dict_971_0_1, 85, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), G__defined_typename("vector<WSeries<double>*,allocator<WSeries<double>*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__wave_dict_971_0_2, 85, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), G__defined_typename("vector<WSeries<double>*,allocator<WSeries<double>*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__wave_dict_971_0_3, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__wave_dict_971_0_4, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__wave_dict_971_0_5, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<WSeries<double>*,allocator<WSeries<double>*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__wave_dict_971_0_6, 117, G__get_linked_tagnum(&G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<WSeries<double>*,allocator<WSeries<double>*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__wave_dict_971_0_7, 107, -1, G__defined_typename("vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__wave_dict_971_0_8, 107, -1, G__defined_typename("vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_971_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__wave_dict_971_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type' 0 - sz U 'WSeries<double>' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__wave_dict_971_0_11, 107, -1, G__defined_typename("vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__wave_dict_971_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_971_0_13, 85, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), G__defined_typename("vector<WSeries<double>*,allocator<WSeries<double>*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__wave_dict_971_0_14, 85, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), G__defined_typename("vector<WSeries<double>*,allocator<WSeries<double>*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<WSeries<double>*,allocator<WSeries<double>*> >",4950,G__wave_dict_971_0_15, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<WSeries<double>*,allocator<WSeries<double>*> >",4950,G__wave_dict_971_0_16, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type' 0 - n U 'WSeries<double>' - 41 '(WSeries<double>*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<WSeries<double>*,allocator<WSeries<double>*> >",4950,G__wave_dict_971_0_17, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<WSeries<double>*,allocator<WSeries<double>*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<WSeries<double>*,allocator<WSeries<double>*> >",4950,G__wave_dict_971_0_18, 105, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator' 'vector<WSeries<double>*,allocator<WSeries<double>*> >::const_iterator' 10 - first u 'vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator' 'vector<WSeries<double>*,allocator<WSeries<double>*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__wave_dict_971_0_19, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<WSeries<double>*,allocator<WSeries<double>*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__wave_dict_971_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__wave_dict_971_0_21, 85, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__wave_dict_971_0_22, 85, G__get_linked_tagnum(&G__wave_dictLN_WSerieslEdoublegR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__wave_dict_971_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'WSeries<double>' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__wave_dict_971_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<WSeries<double>*,allocator<WSeries<double>*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_971_0_25, 117, G__get_linked_tagnum(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator' - 0 - position U 'WSeries<double>' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_971_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator' - 0 - position u 'vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator' 'vector<WSeries<double>*,allocator<WSeries<double>*> >::const_iterator' 10 - first "
"u 'vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator' 'vector<WSeries<double>*,allocator<WSeries<double>*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__wave_dict_971_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator' - 0 - position k - 'vector<WSeries<double>*,allocator<WSeries<double>*> >::size_type' 0 - n "
"U 'WSeries<double>' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__wave_dict_971_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_971_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__wave_dict_971_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator' - 0 - first u 'vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__wave_dict_971_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<WSeries<double>*,allocator<WSeries<double>*> >", 5076, G__wave_dict_971_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncwave_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
   G__memvar_setup((void*)G__PVOID,112,0,0,-1,-1,-1,1,"NIFO_MAX=8",1,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_BORDER),-1,-1,1,"B_PAD_ZERO=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_BORDER),-1,-1,1,"B_CYCLE=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_BORDER),-1,-1,1,"B_MIRROR=2",0,(char*)NULL);
}

static void G__cpp_setup_global4() {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_BORDER),-1,-1,1,"B_PAD_EDGE=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_BORDER),-1,-1,1,"B_POLYNOM=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_WAVETYPE),-1,-1,1,"HAAR=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_WAVETYPE),-1,-1,1,"BIORTHOGONAL=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_WAVETYPE),-1,-1,1,"DAUBECHIES=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_WAVETYPE),-1,-1,1,"SYMLET=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_WAVETYPE),-1,-1,1,"MEYER=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_WAVETYPE),-1,-1,1,"WDMT=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_POLARIZATION),-1,-1,1,"TENSOR=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__wave_dictLN_POLARIZATION),-1,-1,1,"SCALAR=1",0,(char*)NULL);
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
}

static void G__cpp_setup_global7() {
}

static void G__cpp_setup_global8() {
}

static void G__cpp_setup_global9() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalwave_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
  G__cpp_setup_global7();
  G__cpp_setup_global8();
  G__cpp_setup_global9();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
   G__memfunc_setup("Lagrange", 801, G__wave_dict__0_1824, 100, -1, -1, 0, 3, 1, 1, 0, 
"i - - 10 - n i - - 10 - i "
"d - - 10 - x", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("signPDF", 651, G__wave_dict__0_1825, 100, -1, -1, 0, 2, 1, 1, 0, 
"k - 'size_t' 10 - m k - 'size_t' 10 - k", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("gammaCLa", 755, G__wave_dict__0_1826, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - Y i - - 0 - n", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("gammaCL", 658, G__wave_dict__0_1827, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - x d - - 0 - n", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("logNormCL", 877, G__wave_dict__0_1828, 100, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - Y d - - 0 '0.' p "
"d - - 0 '1.' s d - - 0 '0.0001' a", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("logNormArg", 1016, G__wave_dict__0_1829, 100, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - CL d - - 0 '0.' p "
"d - - 0 '1.' s d - - 0 '0.' a", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("fLagrange", 903, G__wave_dict__0_1830, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - n i - - 0 - m "
"D - - 0 - c", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("Gamma", 483, G__wave_dict__0_1831, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - r", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("Gamma", 483, G__wave_dict__0_1832, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - r d - - 0 - x", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("iGamma", 588, G__wave_dict__0_1833, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - r d - - 0 - p", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
   G__memfunc_setup("GalacticToEquatorial", 2034, G__wave_dict__0_2937, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - ilongitude d - - 0 - ilatitude "
"d - - 1 - olongitude d - - 1 - olatitude", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("EquatorialToGalactic", 2034, G__wave_dict__0_2938, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - ilongitude d - - 0 - ilatitude "
"d - - 1 - olongitude d - - 1 - olatitude", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("EclipticToEquatorial", 2055, G__wave_dict__0_2939, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - ilongitude d - - 0 - ilatitude "
"d - - 1 - olongitude d - - 1 - olatitude", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("EquatorialToEcliptic", 2055, G__wave_dict__0_2940, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - ilongitude d - - 0 - ilatitude "
"d - - 1 - olongitude d - - 1 - olatitude", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("GeodeticToGeocentric", 2026, G__wave_dict__0_2941, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - - 0 - latitude d - - 0 - longitude "
"d - - 0 - elevation d - - 1 - X "
"d - - 1 - Y d - - 1 - Z", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("GeocentricToGeodetic", 2026, G__wave_dict__0_2943, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - - 0 - X d - - 0 - Y "
"d - - 0 - Z d - - 1 - latitude "
"d - - 1 - longitude d - - 1 - elevation", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("GetCartesianComponents", 2272, G__wave_dict__0_2944, 121, -1, -1, 0, 5, 1, 1, 0, 
"D - - 0 - u d - - 0 - Alt "
"d - - 0 - Az d - - 0 - Lat "
"d - - 0 - Lon", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("CwbToGeographic", 1496, G__wave_dict__0_2945, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - ilongitude d - - 0 - ilatitude "
"d - - 1 - olongitude d - - 1 - olatitude", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("GeographicToCwb", 1496, G__wave_dict__0_2946, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - ilongitude d - - 0 - ilatitude "
"d - - 1 - olongitude d - - 1 - olatitude", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("CwbToCelestial", 1397, G__wave_dict__0_2947, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - - 0 - ilongitude d - - 0 - ilatitude "
"d - - 1 - olongitude d - - 1 - olatitude "
"d - - 0 '0' gps", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("CelestialToCwb", 1397, G__wave_dict__0_2948, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - - 0 - ilongitude d - - 0 - ilatitude "
"d - - 1 - olongitude d - - 1 - olatitude "
"d - - 0 '0' gps", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {
   G__memfunc_setup("operator>>", 1000, G__wave_dict__0_3852, 117, G__get_linked_tagnum(&G__wave_dictLN_wavearraylEdoublegR), -1, 1, 2, 1, 1, 0, 
"u 'watplot' - 1 - graph u 'wavearray<double>' - 1 - x", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>>", 1000, G__wave_dict__0_3853, 117, G__get_linked_tagnum(&G__wave_dictLN_watplot), -1, 1, 2, 1, 1, 0, 
"u 'wavearray<double>' - 1 - x u 'watplot' - 1 - graph", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>>", 1000, G__wave_dict__0_3854, 117, G__get_linked_tagnum(&G__wave_dictLN_TString), -1, 1, 2, 1, 1, 0, 
"u 'watplot' - 1 - graph u 'TString' - 1 - fname", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("operator>>", 1000, G__wave_dict__0_3855, 67, -1, -1, 1, 2, 1, 1, 0, 
"u 'watplot' - 1 - graph C - - 1 - fname", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func38() {
}

static void G__cpp_setup_func39() {
}

static void G__cpp_setup_func40() {
   G__memfunc_setup("watversion", 1106, G__wave_dict__0_4097, 67, -1, -1, 0, 1, 1, 1, 0, "c - - 0 ''s'' c", (char*) NULL
, (void*) NULL, 0);
}

static void G__cpp_setup_func41() {
}

static void G__cpp_setup_func42() {
}

static void G__cpp_setup_func43() {
}

static void G__cpp_setup_func44() {
   G__memfunc_setup("waveAssign", 1048, G__wave_dict__0_4574, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<int>' - 1 - aout u 'wavearray<float>' - 1 - ain", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("waveAssign", 1048, G__wave_dict__0_4575, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<int>' - 1 - aout u 'wavearray<double>' - 1 - ain", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("waveAssign", 1048, G__wave_dict__0_4576, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<float>' - 1 - aout u 'wavearray<int>' - 1 - ain", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("waveAssign", 1048, G__wave_dict__0_4577, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<float>' - 1 - aout u 'wavearray<double>' - 1 - ain", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("waveAssign", 1048, G__wave_dict__0_4578, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' - 1 - aout u 'wavearray<float>' - 1 - ain", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("waveAssign", 1048, G__wave_dict__0_4579, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'wavearray<double>' - 1 - aout u 'wavearray<short>' - 1 - ain", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("Nevill", 618, G__wave_dict__0_4580, 100, -1, -1, 0, 4, 1, 1, 0, 
"d - - 10 - x0 i - - 0 - n "
"D - - 0 - p D - - 0 - q", (char*) NULL
, (void*) NULL, 0);
   G__memfunc_setup("Nevill", 618, G__wave_dict__0_4581, 100, -1, -1, 0, 4, 1, 1, 0, 
"d - - 10 - x0 i - - 0 - n "
"F - - 0 - p D - - 0 - q", (char*) NULL
, (void*) NULL, 0);

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcwave_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
  G__cpp_setup_func38();
  G__cpp_setup_func39();
  G__cpp_setup_func40();
  G__cpp_setup_func41();
  G__cpp_setup_func42();
  G__cpp_setup_func43();
  G__cpp_setup_func44();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__wave_dictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEshortcOallocatorlEshortgRsPgR = { "vector<short,allocator<short> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR = { "vector<unsigned long,allocator<unsigned long> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEcharmUcOallocatorlEcharmUgRsPgR = { "vector<char*,allocator<char*> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__wave_dictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_slice = { "slice" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_BORDER = { "BORDER" , 101 , -1 };
G__linked_taginfo G__wave_dictLN_WAVETYPE = { "WAVETYPE" , 101 , -1 };
G__linked_taginfo G__wave_dictLN_Wavelet = { "Wavelet" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TFFTComplexReal = { "TFFTComplexReal" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TFFTRealComplex = { "TFFTRealComplex" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_complexlEdoublegR = { "complex<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_wavecomplex = { "wavecomplex" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator = { "vector<int,allocator<int> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TBits = { "TBits" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_pixdata = { "pixdata" , 115 , -1 };
G__linked_taginfo G__wave_dictLN_netpixel = { "netpixel" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR = { "vector<pixdata,allocator<pixdata> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiterator = { "vector<pixdata,allocator<pixdata> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pixdata,allocator<pixdata> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_wavearraylEfloatgR = { "wavearray<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_wavearraylEdoublegR = { "wavearray<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR = { "vector<wavearray<float>,allocator<wavearray<float> > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiterator = { "vector<wavearray<float>,allocator<wavearray<float> > >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<wavearray<float>,allocator<wavearray<float> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_network = { "network" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_clusterdata = { "clusterdata" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_netcluster = { "netcluster" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_WSerieslEdoublegR = { "WSeries<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_WSerieslEfloatgR = { "WSeries<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_WaveDWTlEfloatgR = { "WaveDWT<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SSerieslEdoublegR = { "SSeries<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_WaveDWTlEdoublegR = { "WaveDWT<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR = { "vector<netpixel,allocator<netpixel> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiterator = { "vector<netpixel,allocator<netpixel> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<netpixel,allocator<netpixel> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR = { "vector<clusterdata,allocator<clusterdata> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiterator = { "vector<clusterdata,allocator<clusterdata> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiteratorgR = { "reverse_iterator<vector<clusterdata,allocator<clusterdata> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR = { "vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_wat = { "wat" , 110 , -1 };
G__linked_taginfo G__wave_dictLN_watcLcLAlm_Base = { "wat::Alm_Base" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_watcLcLAlm = { "wat::Alm" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR = { "wat::Alm_Template<complex<double> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_skymap = { "skymap" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_wavearraylEshortgR = { "wavearray<short>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_wavearraylEintgR = { "wavearray<int>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmArraySSElEfloatgR = { "SymmArraySSE<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_delayFilter = { "delayFilter" , 115 , -1 };
G__linked_taginfo G__wave_dictLN_detectorParams = { "detectorParams" , 115 , -1 };
G__linked_taginfo G__wave_dictLN_POLARIZATION = { "POLARIZATION" , 101 , -1 };
G__linked_taginfo G__wave_dictLN_detector = { "detector" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR = { "vector<SSeries<double>,allocator<SSeries<double> > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiterator = { "vector<SSeries<double>,allocator<SSeries<double> > >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SSeries<double>,allocator<SSeries<double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR = { "vector<delayFilter,allocator<delayFilter> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiterator = { "vector<delayFilter,allocator<delayFilter> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<delayFilter,allocator<delayFilter> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgR = { "vector<wavearray<double>*,allocator<wavearray<double>*> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<wavearray<double>*,allocator<wavearray<double>*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_xtalk = { "xtalk" , 115 , -1 };
G__linked_taginfo G__wave_dictLN_xtalkArray = { "xtalkArray" , 115 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlExtalkcOallocatorlExtalkgRsPgR = { "vector<xtalk,allocator<xtalk> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlExtalkcOallocatorlExtalkgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<xtalk,allocator<xtalk> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_monster = { "monster" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_WDMlEdoublegR = { "WDM<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmArraylEdoublegR = { "SymmArray<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR = { "SymmObjArray<SymmArraySSE<float> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_waveSegment = { "waveSegment" , 115 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR = { "vector<detector*,allocator<detector*> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiterator = { "vector<detector*,allocator<detector*> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<detector*,allocator<detector*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR = { "vector<netcluster,allocator<netcluster> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiterator = { "vector<netcluster,allocator<netcluster> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<netcluster,allocator<netcluster> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator = { "vector<string,allocator<string> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR = { "vector<waveSegment,allocator<waveSegment> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiterator = { "vector<waveSegment,allocator<waveSegment> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<waveSegment,allocator<waveSegment> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR = { "vector<WDM<double>*,allocator<WDM<double>*> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiterator = { "vector<WDM<double>*,allocator<WDM<double>*> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<WDM<double>*,allocator<WDM<double>*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgR = { "vector<netpixel*,allocator<netpixel*> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<netpixel*,allocator<netpixel*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_injection = { "injection" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_watplot = { "watplot" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR = { "vector<TGraph*,allocator<TGraph*> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiterator = { "vector<TGraph*,allocator<TGraph*> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TGraph*,allocator<TGraph*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR = { "vector<TH1F*,allocator<TH1F*> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlETH1FmUcOallocatorlETH1FmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH1F*,allocator<TH1F*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_wavepixel = { "wavepixel" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_wavecluster = { "wavecluster" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEwavepixelcOallocatorlEwavepixelgRsPgR = { "vector<wavepixel,allocator<wavepixel> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEwavepixelcOallocatorlEwavepixelgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<wavepixel,allocator<wavepixel> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_listlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "list<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_wavecor = { "wavecor" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_WaveRDC = { "WaveRDC" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_wavearraylEunsignedsPintgR = { "wavearray<unsigned int>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_linedata = { "linedata" , 115 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgR = { "vector<complex<float>,allocator<complex<float> > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<complex<float>,allocator<complex<float> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_linefilter = { "linefilter" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_listlElinedatacOallocatorlElinedatagRsPgR = { "list<linedata,allocator<linedata> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_netevent = { "netevent" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_regression = { "regression" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgR = { "vector<WSeries<double>,allocator<WSeries<double> > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<WSeries<double>,allocator<WSeries<double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgR = { "vector<wavearray<int>,allocator<wavearray<int> > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<wavearray<int>,allocator<wavearray<int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEWienercOallocatorlEWienergRsPgR = { "vector<Wiener,allocator<Wiener> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEWienercOallocatorlEWienergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Wiener,allocator<Wiener> >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgR = { "vector<TMatrixTSym<double>,allocator<TMatrixTSym<double> > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TMatrixTSym<double>,allocator<TMatrixTSym<double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgR = { "vector<wavearray<double>,allocator<wavearray<double> > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<wavearray<double>,allocator<wavearray<double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_watcLcLTime = { "wat::Time" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_watconstants = { "watconstants" , 110 , -1 };
G__linked_taginfo G__wave_dictLN_wavearraylElongsPlonggR = { "wavearray<long long>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_wavearraylElonggR = { "wavearray<long>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_HaarlEfloatgR = { "Haar<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_HaarlEdoublegR = { "Haar<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_BiorthogonallEfloatgR = { "Biorthogonal<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_BiorthogonallEdoublegR = { "Biorthogonal<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_DaubechieslEfloatgR = { "Daubechies<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_DaubechieslEdoublegR = { "Daubechies<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymletlEfloatgR = { "Symlet<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymletlEdoublegR = { "Symlet<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_MeyerlEfloatgR = { "Meyer<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_MeyerlEdoublegR = { "Meyer<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_WDMlEfloatgR = { "WDM<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmArraylEintgR = { "SymmArray<int>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmArraylEfloatgR = { "SymmArray<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmArraySSElEintgR = { "SymmArraySSE<int>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmArraySSElEdoublegR = { "SymmArraySSE<double>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR = { "SymmObjArray<SymmArray<int> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR = { "SymmObjArray<SymmArray<float> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR = { "SymmObjArray<SymmArray<double> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR = { "SymmObjArray<SymmArraySSE<int> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR = { "SymmObjArray<SymmArraySSE<double> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_SSerieslEfloatgR = { "SSeries<float>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR = { "vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiterator = { "vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR = { "vector<WSeries<double>*,allocator<WSeries<double>*> >" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiterator = { "vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator" , 99 , -1 };
G__linked_taginfo G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<WSeries<double>*,allocator<WSeries<double>*> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablewave_dict() {
  G__wave_dictLN_TClass.tagnum = -1 ;
  G__wave_dictLN_TBuffer.tagnum = -1 ;
  G__wave_dictLN_TMemberInspector.tagnum = -1 ;
  G__wave_dictLN_TObject.tagnum = -1 ;
  G__wave_dictLN_TNamed.tagnum = -1 ;
  G__wave_dictLN_TString.tagnum = -1 ;
  G__wave_dictLN_vectorlEshortcOallocatorlEshortgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEcharmUcOallocatorlEcharmUgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__wave_dictLN_string.tagnum = -1 ;
  G__wave_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_TBrowser.tagnum = -1 ;
  G__wave_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__wave_dictLN_TFile.tagnum = -1 ;
  G__wave_dictLN_TCanvas.tagnum = -1 ;
  G__wave_dictLN_TTree.tagnum = -1 ;
  G__wave_dictLN_TBranch.tagnum = -1 ;
  G__wave_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_slice.tagnum = -1 ;
  G__wave_dictLN_BORDER.tagnum = -1 ;
  G__wave_dictLN_WAVETYPE.tagnum = -1 ;
  G__wave_dictLN_Wavelet.tagnum = -1 ;
  G__wave_dictLN_TFFTComplexReal.tagnum = -1 ;
  G__wave_dictLN_TFFTRealComplex.tagnum = -1 ;
  G__wave_dictLN_complexlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_wavecomplex.tagnum = -1 ;
  G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__wave_dictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TF1.tagnum = -1 ;
  G__wave_dictLN_TH1F.tagnum = -1 ;
  G__wave_dictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TH2F.tagnum = -1 ;
  G__wave_dictLN_TGraph.tagnum = -1 ;
  G__wave_dictLN_TGraphErrors.tagnum = -1 ;
  G__wave_dictLN_TBits.tagnum = -1 ;
  G__wave_dictLN_pixdata.tagnum = -1 ;
  G__wave_dictLN_netpixel.tagnum = -1 ;
  G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_wavearraylEfloatgR.tagnum = -1 ;
  G__wave_dictLN_wavearraylEdoublegR.tagnum = -1 ;
  G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_network.tagnum = -1 ;
  G__wave_dictLN_clusterdata.tagnum = -1 ;
  G__wave_dictLN_netcluster.tagnum = -1 ;
  G__wave_dictLN_WSerieslEdoublegR.tagnum = -1 ;
  G__wave_dictLN_WSerieslEfloatgR.tagnum = -1 ;
  G__wave_dictLN_WaveDWTlEfloatgR.tagnum = -1 ;
  G__wave_dictLN_SSerieslEdoublegR.tagnum = -1 ;
  G__wave_dictLN_WaveDWTlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_wat.tagnum = -1 ;
  G__wave_dictLN_watcLcLAlm_Base.tagnum = -1 ;
  G__wave_dictLN_watcLcLAlm.tagnum = -1 ;
  G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR.tagnum = -1 ;
  G__wave_dictLN_skymap.tagnum = -1 ;
  G__wave_dictLN_wavearraylEshortgR.tagnum = -1 ;
  G__wave_dictLN_wavearraylEintgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_SymmArraySSElEfloatgR.tagnum = -1 ;
  G__wave_dictLN_delayFilter.tagnum = -1 ;
  G__wave_dictLN_detectorParams.tagnum = -1 ;
  G__wave_dictLN_POLARIZATION.tagnum = -1 ;
  G__wave_dictLN_detector.tagnum = -1 ;
  G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_xtalk.tagnum = -1 ;
  G__wave_dictLN_xtalkArray.tagnum = -1 ;
  G__wave_dictLN_vectorlExtalkcOallocatorlExtalkgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlExtalkcOallocatorlExtalkgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_monster.tagnum = -1 ;
  G__wave_dictLN_WDMlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_SymmArraylEdoublegR.tagnum = -1 ;
  G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR.tagnum = -1 ;
  G__wave_dictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__wave_dictLN_waveSegment.tagnum = -1 ;
  G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_injection.tagnum = -1 ;
  G__wave_dictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_watplot.tagnum = -1 ;
  G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlETH1FmUcOallocatorlETH1FmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_wavepixel.tagnum = -1 ;
  G__wave_dictLN_wavecluster.tagnum = -1 ;
  G__wave_dictLN_vectorlEwavepixelcOallocatorlEwavepixelgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEwavepixelcOallocatorlEwavepixelgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_listlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_wavecor.tagnum = -1 ;
  G__wave_dictLN_WaveRDC.tagnum = -1 ;
  G__wave_dictLN_wavearraylEunsignedsPintgR.tagnum = -1 ;
  G__wave_dictLN_linedata.tagnum = -1 ;
  G__wave_dictLN_vectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_linefilter.tagnum = -1 ;
  G__wave_dictLN_listlElinedatacOallocatorlElinedatagRsPgR.tagnum = -1 ;
  G__wave_dictLN_netevent.tagnum = -1 ;
  G__wave_dictLN_regression.tagnum = -1 ;
  G__wave_dictLN_vectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEWienercOallocatorlEWienergRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEWienercOallocatorlEWienergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_watcLcLTime.tagnum = -1 ;
  G__wave_dictLN_watconstants.tagnum = -1 ;
  G__wave_dictLN_wavearraylElongsPlonggR.tagnum = -1 ;
  G__wave_dictLN_wavearraylElonggR.tagnum = -1 ;
  G__wave_dictLN_HaarlEfloatgR.tagnum = -1 ;
  G__wave_dictLN_HaarlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_BiorthogonallEfloatgR.tagnum = -1 ;
  G__wave_dictLN_BiorthogonallEdoublegR.tagnum = -1 ;
  G__wave_dictLN_DaubechieslEfloatgR.tagnum = -1 ;
  G__wave_dictLN_DaubechieslEdoublegR.tagnum = -1 ;
  G__wave_dictLN_SymletlEfloatgR.tagnum = -1 ;
  G__wave_dictLN_SymletlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_MeyerlEfloatgR.tagnum = -1 ;
  G__wave_dictLN_MeyerlEdoublegR.tagnum = -1 ;
  G__wave_dictLN_WDMlEfloatgR.tagnum = -1 ;
  G__wave_dictLN_SymmArraylEintgR.tagnum = -1 ;
  G__wave_dictLN_SymmArraylEfloatgR.tagnum = -1 ;
  G__wave_dictLN_SymmArraySSElEintgR.tagnum = -1 ;
  G__wave_dictLN_SymmArraySSElEdoublegR.tagnum = -1 ;
  G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR.tagnum = -1 ;
  G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR.tagnum = -1 ;
  G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR.tagnum = -1 ;
  G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR.tagnum = -1 ;
  G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR.tagnum = -1 ;
  G__wave_dictLN_SSerieslEfloatgR.tagnum = -1 ;
  G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR.tagnum = -1 ;
  G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablewave_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TClass);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TObject);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TString);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEshortcOallocatorlEshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEcharmUcOallocatorlEcharmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_string);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TBrowser);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TFile);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TTree);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TBranch);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_slice),sizeof(slice),-1,295168,(char*)NULL,G__setup_memvarslice,G__setup_memfuncslice);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_BORDER),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_WAVETYPE),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_Wavelet),sizeof(Wavelet),-1,325376,(char*)NULL,G__setup_memvarWavelet,G__setup_memfuncWavelet);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TFFTComplexReal);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TFFTRealComplex);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_complexlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_wavecomplex),sizeof(wavecomplex),-1,36608,(char*)NULL,G__setup_memvarwavecomplex,G__setup_memfuncwavecomplex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgR),sizeof(vector<int,allocator<int> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEintcOallocatorlEintgRsPgR,G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TF1);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TGraph);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TGraphErrors);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TBits);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_pixdata),sizeof(pixdata),-1,262144,(char*)NULL,G__setup_memvarpixdata,G__setup_memfuncpixdata);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_netpixel),sizeof(netpixel),-1,326912,(char*)NULL,G__setup_memvarnetpixel,G__setup_memfuncnetpixel);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgR),sizeof(vector<pixdata,allocator<pixdata> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEpixdatacOallocatorlEpixdatagRsPgR,G__setup_memfuncvectorlEpixdatacOallocatorlEpixdatagRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEpixdatacOallocatorlEpixdatagRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_wavearraylEfloatgR),sizeof(wavearray<float>),-1,130816,(char*)NULL,G__setup_memvarwavearraylEfloatgR,G__setup_memfuncwavearraylEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_wavearraylEdoublegR),sizeof(wavearray<double>),-1,130816,(char*)NULL,G__setup_memvarwavearraylEdoublegR,G__setup_memfuncwavearraylEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR),sizeof(vector<wavearray<float>,allocator<wavearray<float> > >),-1,298752,(char*)NULL,G__setup_memvarvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR,G__setup_memfuncvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEfloatgRcOallocatorlEwavearraylEfloatgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_network),sizeof(network),-1,327424,(char*)NULL,G__setup_memvarnetwork,G__setup_memfuncnetwork);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_clusterdata),sizeof(clusterdata),-1,324864,(char*)NULL,G__setup_memvarclusterdata,G__setup_memfuncclusterdata);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_netcluster),sizeof(netcluster),-1,327424,(char*)NULL,G__setup_memvarnetcluster,G__setup_memfuncnetcluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_WSerieslEdoublegR),sizeof(WSeries<double>),-1,130816,(char*)NULL,G__setup_memvarWSerieslEdoublegR,G__setup_memfuncWSerieslEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_WSerieslEfloatgR),sizeof(WSeries<float>),-1,130816,(char*)NULL,G__setup_memvarWSerieslEfloatgR,G__setup_memfuncWSerieslEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_WaveDWTlEfloatgR),sizeof(WaveDWT<float>),-1,128768,(char*)NULL,G__setup_memvarWaveDWTlEfloatgR,G__setup_memfuncWaveDWTlEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SSerieslEdoublegR),sizeof(SSeries<double>),-1,128256,(char*)NULL,G__setup_memvarSSerieslEdoublegR,G__setup_memfuncSSerieslEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_WaveDWTlEdoublegR),sizeof(WaveDWT<double>),-1,128768,(char*)NULL,G__setup_memvarWaveDWTlEdoublegR,G__setup_memfuncWaveDWTlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgR),sizeof(vector<netpixel,allocator<netpixel> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEnetpixelcOallocatorlEnetpixelgRsPgR,G__setup_memfuncvectorlEnetpixelcOallocatorlEnetpixelgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelcOallocatorlEnetpixelgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgR),sizeof(vector<clusterdata,allocator<clusterdata> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEclusterdatacOallocatorlEclusterdatagRsPgR,G__setup_memfuncvectorlEclusterdatacOallocatorlEclusterdatagRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEclusterdatacOallocatorlEclusterdatagRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),sizeof(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >),-1,298752,(char*)NULL,G__setup_memvarvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR),sizeof(vector<vector<float,allocator<float> >,allocator<vector<float,allocator<float> > > >),-1,298752,(char*)NULL,G__setup_memvarvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEfloatcOallocatorlEfloatgRsPgRcOallocatorlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_wat);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_watcLcLAlm_Base),sizeof(wat::Alm_Base),-1,256,(char*)NULL,G__setup_memvarwatcLcLAlm_Base,G__setup_memfuncwatcLcLAlm_Base);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_watcLcLAlm),sizeof(wat::Alm),-1,768,(char*)NULL,G__setup_memvarwatcLcLAlm,G__setup_memfuncwatcLcLAlm);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_watcLcLAlm_TemplatelEcomplexlEdoublegRsPgR),sizeof(wat::Alm_Template<complex<double> >),-1,256,(char*)NULL,G__setup_memvarwatcLcLAlm_TemplatelEcomplexlEdoublegRsPgR,G__setup_memfuncwatcLcLAlm_TemplatelEcomplexlEdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_skymap),sizeof(skymap),-1,130816,(char*)NULL,G__setup_memvarskymap,G__setup_memfuncskymap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_wavearraylEshortgR),sizeof(wavearray<short>),-1,130816,(char*)NULL,G__setup_memvarwavearraylEshortgR,G__setup_memfuncwavearraylEshortgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_wavearraylEintgR),sizeof(wavearray<int>),-1,130816,(char*)NULL,G__setup_memvarwavearraylEintgR,G__setup_memfuncwavearraylEintgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),sizeof(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >),-1,298752,(char*)NULL,G__setup_memvarvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmArraySSElEfloatgR),sizeof(SymmArraySSE<float>),-1,327424,(char*)NULL,G__setup_memvarSymmArraySSElEfloatgR,G__setup_memfuncSymmArraySSElEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_delayFilter),sizeof(delayFilter),-1,262144,(char*)NULL,G__setup_memvardelayFilter,G__setup_memfuncdelayFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_detectorParams),sizeof(detectorParams),-1,262144,(char*)NULL,G__setup_memvardetectorParams,G__setup_memfuncdetectorParams);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_POLARIZATION),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_detector),sizeof(detector),-1,130816,(char*)NULL,G__setup_memvardetector,G__setup_memfuncdetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR),sizeof(vector<SSeries<double>,allocator<SSeries<double> > >),-1,298752,(char*)NULL,G__setup_memvarvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR,G__setup_memfuncvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlESSerieslEdoublegRcOallocatorlESSerieslEdoublegRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR),sizeof(vector<delayFilter,allocator<delayFilter> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR,G__setup_memfuncvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEdelayFiltercOallocatorlEdelayFiltergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEdoublegRmUcOallocatorlEwavearraylEdoublegRmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_xtalk);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_xtalkArray);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlExtalkcOallocatorlExtalkgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlExtalkcOallocatorlExtalkgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_monster),sizeof(monster),-1,34560,(char*)NULL,G__setup_memvarmonster,G__setup_memfuncmonster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_WDMlEdoublegR),sizeof(WDM<double>),-1,325376,(char*)NULL,G__setup_memvarWDMlEdoublegR,G__setup_memfuncWDMlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmArraylEdoublegR),sizeof(SymmArray<double>),-1,327424,(char*)NULL,G__setup_memvarSymmArraylEdoublegR,G__setup_memfuncSymmArraylEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmObjArraylESymmArraySSElEfloatgRsPgR),sizeof(SymmObjArray<SymmArraySSE<float> >),-1,327424,(char*)NULL,G__setup_memvarSymmObjArraylESymmArraySSElEfloatgRsPgR,G__setup_memfuncSymmObjArraylESymmArraySSElEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_TMatrixTSparseDiaglEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_waveSegment),sizeof(waveSegment),-1,262144,(char*)NULL,G__setup_memvarwaveSegment,G__setup_memfuncwaveSegment);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgR),sizeof(vector<detector*,allocator<detector*> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEdetectormUcOallocatorlEdetectormUgRsPgR,G__setup_memfuncvectorlEdetectormUcOallocatorlEdetectormUgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEdetectormUcOallocatorlEdetectormUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgR),sizeof(vector<netcluster,allocator<netcluster> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEnetclustercOallocatorlEnetclustergRsPgR,G__setup_memfuncvectorlEnetclustercOallocatorlEnetclustergRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEnetclustercOallocatorlEnetclustergRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgR),sizeof(vector<string,allocator<string> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEstringcOallocatorlEstringgRsPgR,G__setup_memfuncvectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR),sizeof(vector<waveSegment,allocator<waveSegment> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR,G__setup_memfuncvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEwaveSegmentcOallocatorlEwaveSegmentgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR),sizeof(vector<WDM<double>*,allocator<WDM<double>*> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR,G__setup_memfuncvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEWDMlEdoublegRmUcOallocatorlEWDMlEdoublegRmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEnetpixelmUcOallocatorlEnetpixelmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_injection),sizeof(injection),-1,36608,(char*)NULL,G__setup_memvarinjection,G__setup_memfuncinjection);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_watplot),sizeof(watplot),-1,1280,(char*)NULL,G__setup_memvarwatplot,G__setup_memfuncwatplot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR),sizeof(vector<TGraph*,allocator<TGraph*> >),-1,298752,(char*)NULL,G__setup_memvarvectorlETGraphmUcOallocatorlETGraphmUgRsPgR,G__setup_memfuncvectorlETGraphmUcOallocatorlETGraphmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlETH1FmUcOallocatorlETH1FmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlETH1FmUcOallocatorlETH1FmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_wavepixel),sizeof(wavepixel),-1,1280,(char*)NULL,G__setup_memvarwavepixel,G__setup_memfuncwavepixel);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_wavecluster),sizeof(wavecluster),-1,36608,(char*)NULL,G__setup_memvarwavecluster,G__setup_memfuncwavecluster);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEwavepixelcOallocatorlEwavepixelgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEwavepixelcOallocatorlEwavepixelgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_listlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_wavecor),sizeof(wavecor),-1,3840,(char*)NULL,G__setup_memvarwavecor,G__setup_memfuncwavecor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_WaveRDC),sizeof(WaveRDC),-1,326912,(char*)NULL,G__setup_memvarWaveRDC,G__setup_memfuncWaveRDC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_wavearraylEunsignedsPintgR),sizeof(wavearray<unsigned int>),-1,130816,(char*)NULL,G__setup_memvarwavearraylEunsignedsPintgR,G__setup_memfuncwavearraylEunsignedsPintgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_linedata);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEcomplexlEfloatgRcOallocatorlEcomplexlEfloatgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_linefilter),sizeof(linefilter),-1,34560,(char*)NULL,G__setup_memvarlinefilter,G__setup_memfunclinefilter);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_listlElinedatacOallocatorlElinedatagRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_netevent),sizeof(netevent),-1,36608,(char*)NULL,G__setup_memvarnetevent,G__setup_memfuncnetevent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_regression),sizeof(regression),-1,36608,(char*)NULL,G__setup_memvarregression,G__setup_memfuncregression);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRcOallocatorlEWSerieslEdoublegRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEintgRcOallocatorlEwavearraylEintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEWienercOallocatorlEWienergRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEWienercOallocatorlEWienergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlETMatrixTSymlEdoublegRcOallocatorlETMatrixTSymlEdoublegRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEwavearraylEdoublegRcOallocatorlEwavearraylEdoublegRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_watcLcLTime),sizeof(wat::Time),-1,35584,(char*)NULL,G__setup_memvarwatcLcLTime,G__setup_memfuncwatcLcLTime);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_watconstants),0,-1,0,(char*)NULL,G__setup_memvarwatconstants,G__setup_memfuncwatconstants);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_wavearraylElongsPlonggR),sizeof(wavearray<long long>),-1,130816,(char*)NULL,G__setup_memvarwavearraylElongsPlonggR,G__setup_memfuncwavearraylElongsPlonggR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_wavearraylElonggR),sizeof(wavearray<long>),-1,130816,(char*)NULL,G__setup_memvarwavearraylElonggR,G__setup_memfuncwavearraylElonggR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_HaarlEfloatgR),sizeof(Haar<float>),-1,325376,(char*)NULL,G__setup_memvarHaarlEfloatgR,G__setup_memfuncHaarlEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_HaarlEdoublegR),sizeof(Haar<double>),-1,325376,(char*)NULL,G__setup_memvarHaarlEdoublegR,G__setup_memfuncHaarlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_BiorthogonallEfloatgR),sizeof(Biorthogonal<float>),-1,325376,(char*)NULL,G__setup_memvarBiorthogonallEfloatgR,G__setup_memfuncBiorthogonallEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_BiorthogonallEdoublegR),sizeof(Biorthogonal<double>),-1,325376,(char*)NULL,G__setup_memvarBiorthogonallEdoublegR,G__setup_memfuncBiorthogonallEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_DaubechieslEfloatgR),sizeof(Daubechies<float>),-1,325376,(char*)NULL,G__setup_memvarDaubechieslEfloatgR,G__setup_memfuncDaubechieslEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_DaubechieslEdoublegR),sizeof(Daubechies<double>),-1,325376,(char*)NULL,G__setup_memvarDaubechieslEdoublegR,G__setup_memfuncDaubechieslEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymletlEfloatgR),sizeof(Symlet<float>),-1,325376,(char*)NULL,G__setup_memvarSymletlEfloatgR,G__setup_memfuncSymletlEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymletlEdoublegR),sizeof(Symlet<double>),-1,325376,(char*)NULL,G__setup_memvarSymletlEdoublegR,G__setup_memfuncSymletlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_MeyerlEfloatgR),sizeof(Meyer<float>),-1,325376,(char*)NULL,G__setup_memvarMeyerlEfloatgR,G__setup_memfuncMeyerlEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_MeyerlEdoublegR),sizeof(Meyer<double>),-1,325376,(char*)NULL,G__setup_memvarMeyerlEdoublegR,G__setup_memfuncMeyerlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_WDMlEfloatgR),sizeof(WDM<float>),-1,325376,(char*)NULL,G__setup_memvarWDMlEfloatgR,G__setup_memfuncWDMlEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmArraylEintgR),sizeof(SymmArray<int>),-1,327424,(char*)NULL,G__setup_memvarSymmArraylEintgR,G__setup_memfuncSymmArraylEintgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmArraylEfloatgR),sizeof(SymmArray<float>),-1,327424,(char*)NULL,G__setup_memvarSymmArraylEfloatgR,G__setup_memfuncSymmArraylEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmArraySSElEintgR),sizeof(SymmArraySSE<int>),-1,327424,(char*)NULL,G__setup_memvarSymmArraySSElEintgR,G__setup_memfuncSymmArraySSElEintgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmArraySSElEdoublegR),sizeof(SymmArraySSE<double>),-1,327424,(char*)NULL,G__setup_memvarSymmArraySSElEdoublegR,G__setup_memfuncSymmArraySSElEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmObjArraylESymmArraylEintgRsPgR),sizeof(SymmObjArray<SymmArray<int> >),-1,327424,(char*)NULL,G__setup_memvarSymmObjArraylESymmArraylEintgRsPgR,G__setup_memfuncSymmObjArraylESymmArraylEintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmObjArraylESymmArraylEfloatgRsPgR),sizeof(SymmObjArray<SymmArray<float> >),-1,327424,(char*)NULL,G__setup_memvarSymmObjArraylESymmArraylEfloatgRsPgR,G__setup_memfuncSymmObjArraylESymmArraylEfloatgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmObjArraylESymmArraylEdoublegRsPgR),sizeof(SymmObjArray<SymmArray<double> >),-1,327424,(char*)NULL,G__setup_memvarSymmObjArraylESymmArraylEdoublegRsPgR,G__setup_memfuncSymmObjArraylESymmArraylEdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmObjArraylESymmArraySSElEintgRsPgR),sizeof(SymmObjArray<SymmArraySSE<int> >),-1,327424,(char*)NULL,G__setup_memvarSymmObjArraylESymmArraySSElEintgRsPgR,G__setup_memfuncSymmObjArraylESymmArraySSElEintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SymmObjArraylESymmArraySSElEdoublegRsPgR),sizeof(SymmObjArray<SymmArraySSE<double> >),-1,327424,(char*)NULL,G__setup_memvarSymmObjArraylESymmArraySSElEdoublegRsPgR,G__setup_memfuncSymmObjArraylESymmArraySSElEdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_SSerieslEfloatgR),sizeof(SSeries<float>),-1,128256,(char*)NULL,G__setup_memvarSSerieslEfloatgR,G__setup_memfuncSSerieslEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR),sizeof(vector<SymmArraySSE<float>,allocator<SymmArraySSE<float> > >),-1,298752,(char*)NULL,G__setup_memvarvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR,G__setup_memfuncvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlESymmArraySSElEfloatgRcOallocatorlESymmArraySSElEfloatgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR),sizeof(vector<WSeries<double>*,allocator<WSeries<double>*> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR,G__setup_memfuncvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_vectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__wave_dictLN_reverse_iteratorlEvectorlEWSerieslEdoublegRmUcOallocatorlEWSerieslEdoublegRmUgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupwave_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupwave_dict()");
  G__set_cpp_environmentwave_dict();
  G__cpp_setup_tagtablewave_dict();

  G__cpp_setup_inheritancewave_dict();

  G__cpp_setup_typetablewave_dict();

  G__cpp_setup_memvarwave_dict();

  G__cpp_setup_memfuncwave_dict();
  G__cpp_setup_globalwave_dict();
  G__cpp_setup_funcwave_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncwave_dict();
  return;
}
class G__cpp_setup_initwave_dict {
  public:
    G__cpp_setup_initwave_dict() { G__add_setup_func("wave_dict",(G__incsetup)(&G__cpp_setupwave_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initwave_dict() { G__remove_setup_func("wave_dict"); }
};
G__cpp_setup_initwave_dict G__cpp_setup_initializerwave_dict;

